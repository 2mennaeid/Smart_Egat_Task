
EGAT_Smart_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008954  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08008a68  08008a68  00018a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800905c  0800905c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800905c  0800905c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800905c  0800905c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  200001e4  08009248  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001390  08009248  00021390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103e1  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fe5  00000000  00000000  00030631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00033618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2a  00000000  00000000  00034708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ab1e  00000000  00000000  00035432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001360a  00000000  00000000  0004ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009421e  00000000  00000000  0006355a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005710  00000000  00000000  000f7778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000fce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a4c 	.word	0x08008a4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008a4c 	.word	0x08008a4c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2uiz>:
 8000a70:	004a      	lsls	r2, r1, #1
 8000a72:	d211      	bcs.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d211      	bcs.n	8000a9e <__aeabi_d2uiz+0x2e>
 8000a7a:	d50d      	bpl.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d40e      	bmi.n	8000aa4 <__aeabi_d2uiz+0x34>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_d2uiz+0x3a>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_f2uiz>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	d20e      	bcs.n	8000b72 <__aeabi_f2uiz+0x22>
 8000b54:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b58:	d30b      	bcc.n	8000b72 <__aeabi_f2uiz+0x22>
 8000b5a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b62:	d409      	bmi.n	8000b78 <__aeabi_f2uiz+0x28>
 8000b64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	4770      	bx	lr
 8000b78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b7c:	d101      	bne.n	8000b82 <__aeabi_f2uiz+0x32>
 8000b7e:	0242      	lsls	r2, r0, #9
 8000b80:	d102      	bne.n	8000b88 <__aeabi_f2uiz+0x38>
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2lz>:
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4605      	mov	r5, r0
 8000b94:	460c      	mov	r4, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	2300      	movs	r3, #0
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	f7ff ff17 	bl	80009d0 <__aeabi_dcmplt>
 8000ba2:	b928      	cbnz	r0, 8000bb0 <__aeabi_d2lz+0x20>
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	4621      	mov	r1, r4
 8000ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bac:	f000 b80a 	b.w	8000bc4 <__aeabi_d2ulz>
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bb6:	f000 f805 	bl	8000bc4 <__aeabi_d2ulz>
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	bd38      	pop	{r3, r4, r5, pc}
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2ulz>:
 8000bc4:	b5d0      	push	{r4, r6, r7, lr}
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <__aeabi_d2ulz+0x34>)
 8000bca:	4606      	mov	r6, r0
 8000bcc:	460f      	mov	r7, r1
 8000bce:	f7ff fc8d 	bl	80004ec <__aeabi_dmul>
 8000bd2:	f7ff ff4d 	bl	8000a70 <__aeabi_d2uiz>
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	f7ff fc0e 	bl	80003f8 <__aeabi_ui2d>
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <__aeabi_d2ulz+0x38>)
 8000be0:	f7ff fc84 	bl	80004ec <__aeabi_dmul>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4630      	mov	r0, r6
 8000bea:	4639      	mov	r1, r7
 8000bec:	f7ff fac6 	bl	800017c <__aeabi_dsub>
 8000bf0:	f7ff ff3e 	bl	8000a70 <__aeabi_d2uiz>
 8000bf4:	4621      	mov	r1, r4
 8000bf6:	bdd0      	pop	{r4, r6, r7, pc}
 8000bf8:	3df00000 	.word	0x3df00000
 8000bfc:	41f00000 	.word	0x41f00000

08000c00 <LDR_Init>:
#include "LDRSensor.h"
extern ADC_HandleTypeDef hadc1;

void LDR_Init()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
	   ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
		sConfig.Channel = ADC_CHANNEL_1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <LDR_Init+0x30>)
 8000c22:	f002 f8d9 	bl	8002dd8 <HAL_ADC_ConfigChannel>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000208 	.word	0x20000208
 8000c34:	00000000 	.word	0x00000000

08000c38 <LDR_ReadValue>:
float LDR_ReadValue(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	   LDR_Init();
 8000c3e:	f7ff ffdf 	bl	8000c00 <LDR_Init>
	   uint16_t ldr_value ;
	   HAL_ADC_Start(&hadc1);
 8000c42:	481d      	ldr	r0, [pc, #116]	; (8000cb8 <LDR_ReadValue+0x80>)
 8000c44:	f001 fedc 	bl	8002a00 <HAL_ADC_Start>
	   if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY)==HAL_OK)
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <LDR_ReadValue+0x80>)
 8000c4e:	f001 ffb1 	bl	8002bb4 <HAL_ADC_PollForConversion>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d104      	bne.n	8000c62 <LDR_ReadValue+0x2a>
	   {
		   ldr_value = HAL_ADC_GetValue(&hadc1);
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <LDR_ReadValue+0x80>)
 8000c5a:	f002 f8b1 	bl	8002dc0 <HAL_ADC_GetValue>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	   }
	   HAL_ADC_Stop(&hadc1);
 8000c62:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <LDR_ReadValue+0x80>)
 8000c64:	f001 ff7a 	bl	8002b5c <HAL_ADC_Stop>
	   float brightness = (ldr_value * 3.3 / 4095.0); // Brightness in volts
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fbd4 	bl	8000418 <__aeabi_i2d>
 8000c70:	a30d      	add	r3, pc, #52	; (adr r3, 8000ca8 <LDR_ReadValue+0x70>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f7ff fc39 	bl	80004ec <__aeabi_dmul>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	a30b      	add	r3, pc, #44	; (adr r3, 8000cb0 <LDR_ReadValue+0x78>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	f7ff fd5a 	bl	8000740 <__aeabi_ddiv>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff ff0c 	bl	8000ab0 <__aeabi_d2f>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	603b      	str	r3, [r7, #0]
	   return brightness;
 8000c9c:	683b      	ldr	r3, [r7, #0]


}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	66666666 	.word	0x66666666
 8000cac:	400a6666 	.word	0x400a6666
 8000cb0:	00000000 	.word	0x00000000
 8000cb4:	40affe00 	.word	0x40affe00
 8000cb8:	20000208 	.word	0x20000208

08000cbc <Relay_Init>:

/**
 * @brief Initialize the GPIO pin used for the relay.
 */
void Relay_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

    // Enable the GPIOB clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <Relay_Init+0x6c>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <Relay_Init+0x6c>)
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <Relay_Init+0x6c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

    // Ensure the relay is initially off
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cee:	480f      	ldr	r0, [pc, #60]	; (8000d2c <Relay_Init+0x70>)
 8000cf0:	f002 fc6e 	bl	80035d0 <HAL_GPIO_WritePin>

    // Configure GPIO pin PB8 as output, push-pull, no pull-up/down
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2302      	movs	r3, #2
 8000d04:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <Relay_Init+0x70>)
 8000d0e:	f002 fadb 	bl	80032c8 <HAL_GPIO_Init>

    // Turn off the relay by default
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <Relay_Init+0x70>)
 8000d1a:	f002 fc59 	bl	80035d0 <HAL_GPIO_WritePin>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <Relay_SetState>:
/**
 * @brief Set the state of the relay.
 * @param state: Set to 1 to turn on the relay, or 0 to turn it off.
 */
void Relay_SetState(uint8_t state)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    if (state)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <Relay_SetState+0x1e>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); // Turn on the relay
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <Relay_SetState+0x34>)
 8000d48:	f002 fc42 	bl	80035d0 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // Turn off the relay
    }
}
 8000d4c:	e005      	b.n	8000d5a <Relay_SetState+0x2a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // Turn off the relay
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <Relay_SetState+0x34>)
 8000d56:	f002 fc3b 	bl	80035d0 <HAL_GPIO_WritePin>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <LM35_Init>:


#include "TemperatureSensor.h"
extern ADC_HandleTypeDef hadc1;
void LM35_Init()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d80:	2307      	movs	r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <LM35_Init+0x30>)
 8000d8a:	f002 f825 	bl	8002dd8 <HAL_ADC_ConfigChannel>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000208 	.word	0x20000208
 8000d9c:	00000000 	.word	0x00000000

08000da0 <LM35_ReadTemperature>:
float LM35_ReadTemperature(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
   LM35_Init();
 8000da6:	f7ff ffdf 	bl	8000d68 <LM35_Init>
   HAL_ADC_Start(&hadc1);
 8000daa:	4821      	ldr	r0, [pc, #132]	; (8000e30 <LM35_ReadTemperature+0x90>)
 8000dac:	f001 fe28 	bl	8002a00 <HAL_ADC_Start>
   uint16_t temp_value = HAL_ADC_GetValue(&hadc1);
 8000db0:	481f      	ldr	r0, [pc, #124]	; (8000e30 <LM35_ReadTemperature+0x90>)
 8000db2:	f002 f805 	bl	8002dc0 <HAL_ADC_GetValue>
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000dba:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbe:	481c      	ldr	r0, [pc, #112]	; (8000e30 <LM35_ReadTemperature+0x90>)
 8000dc0:	f001 fef8 	bl	8002bb4 <HAL_ADC_PollForConversion>
   HAL_ADC_Stop(&hadc1);
 8000dc4:	481a      	ldr	r0, [pc, #104]	; (8000e30 <LM35_ReadTemperature+0x90>)
 8000dc6:	f001 fec9 	bl	8002b5c <HAL_ADC_Stop>
   float temperature = (temp_value * 3.3 / 4095.0) * 100.0;
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fb23 	bl	8000418 <__aeabi_i2d>
 8000dd2:	a313      	add	r3, pc, #76	; (adr r3, 8000e20 <LM35_ReadTemperature+0x80>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	f7ff fb88 	bl	80004ec <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	a310      	add	r3, pc, #64	; (adr r3, 8000e28 <LM35_ReadTemperature+0x88>)
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	f7ff fca9 	bl	8000740 <__aeabi_ddiv>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <LM35_ReadTemperature+0x94>)
 8000dfc:	f7ff fb76 	bl	80004ec <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fe52 	bl	8000ab0 <__aeabi_d2f>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	603b      	str	r3, [r7, #0]
   return temperature;
 8000e10:	683b      	ldr	r3, [r7, #0]

}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	f3af 8000 	nop.w
 8000e20:	66666666 	.word	0x66666666
 8000e24:	400a6666 	.word	0x400a6666
 8000e28:	00000000 	.word	0x00000000
 8000e2c:	40affe00 	.word	0x40affe00
 8000e30:	20000208 	.word	0x20000208
 8000e34:	40590000 	.word	0x40590000

08000e38 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <case_insensitive_strcmp+0x16>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e056      	b.n	8000f00 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d10d      	bne.n	8000e76 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e050      	b.n	8000f00 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e04a      	b.n	8000f00 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <case_insensitive_strcmp+0xd4>)
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d103      	bne.n	8000e96 <case_insensitive_strcmp+0x5e>
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	f103 0220 	add.w	r2, r3, #32
 8000e94:	e000      	b.n	8000e98 <case_insensitive_strcmp+0x60>
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	73bb      	strb	r3, [r7, #14]
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	491a      	ldr	r1, [pc, #104]	; (8000f0c <case_insensitive_strcmp+0xd4>)
 8000ea4:	440b      	add	r3, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d102      	bne.n	8000eb6 <case_insensitive_strcmp+0x7e>
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	3320      	adds	r3, #32
 8000eb4:	e000      	b.n	8000eb8 <case_insensitive_strcmp+0x80>
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d0d0      	beq.n	8000e5e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	737b      	strb	r3, [r7, #13]
 8000ec2:	7b7b      	ldrb	r3, [r7, #13]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <case_insensitive_strcmp+0xd4>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d103      	bne.n	8000edc <case_insensitive_strcmp+0xa4>
 8000ed4:	7b7b      	ldrb	r3, [r7, #13]
 8000ed6:	f103 0220 	add.w	r2, r3, #32
 8000eda:	e000      	b.n	8000ede <case_insensitive_strcmp+0xa6>
 8000edc:	7b7a      	ldrb	r2, [r7, #13]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	733b      	strb	r3, [r7, #12]
 8000ee4:	7b3b      	ldrb	r3, [r7, #12]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4908      	ldr	r1, [pc, #32]	; (8000f0c <case_insensitive_strcmp+0xd4>)
 8000eea:	440b      	add	r3, r1
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d102      	bne.n	8000efc <case_insensitive_strcmp+0xc4>
 8000ef6:	7b3b      	ldrb	r3, [r7, #12]
 8000ef8:	3320      	adds	r3, #32
 8000efa:	e000      	b.n	8000efe <case_insensitive_strcmp+0xc6>
 8000efc:	7b3b      	ldrb	r3, [r7, #12]
 8000efe:	1ad3      	subs	r3, r2, r3
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	08008d00 	.word	0x08008d00

08000f10 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	4798      	blx	r3
 8000f20:	60f8      	str	r0, [r7, #12]
    if (node)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000f28:	2228      	movs	r2, #40	; 0x28
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f005 fdce 	bl	8006ace <memset>
    }

    return node;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000f48:	e03d      	b.n	8000fc6 <cJSON_Delete+0x8a>
    {
        next = item->next;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d108      	bne.n	8000f6e <cJSON_Delete+0x32>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffe7 	bl	8000f3c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <cJSON_Delete+0x58>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d008      	beq.n	8000f94 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <cJSON_Delete+0x9c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6912      	ldr	r2, [r2, #16]
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4798      	blx	r3
            item->valuestring = NULL;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10c      	bne.n	8000fba <cJSON_Delete+0x7e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d008      	beq.n	8000fba <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <cJSON_Delete+0x9c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6a12      	ldr	r2, [r2, #32]
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4798      	blx	r3
            item->string = NULL;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <cJSON_Delete+0x9c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	4798      	blx	r3
        item = next;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1be      	bne.n	8000f4a <cJSON_Delete+0xe>
    }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000

08000fdc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000fe0:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	0000      	movs	r0, r0
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b098      	sub	sp, #96	; 0x60
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001006:	2300      	movs	r3, #0
 8001008:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800100a:	f7ff ffe7 	bl	8000fdc <get_decimal_point>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <parse_number+0x36>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <parse_number+0x3a>
    {
        return false;
 8001026:	2300      	movs	r3, #0
 8001028:	e0a0      	b.n	800116c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800102a:	2300      	movs	r3, #0
 800102c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800102e:	e03d      	b.n	80010ac <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6899      	ldr	r1, [r3, #8]
 8001038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800103a:	440b      	add	r3, r1
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b45      	cmp	r3, #69	; 0x45
 8001042:	dc17      	bgt.n	8001074 <parse_number+0x84>
 8001044:	2b2b      	cmp	r3, #43	; 0x2b
 8001046:	db40      	blt.n	80010ca <parse_number+0xda>
 8001048:	3b2b      	subs	r3, #43	; 0x2b
 800104a:	2201      	movs	r2, #1
 800104c:	409a      	lsls	r2, r3
 800104e:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <parse_number+0x190>)
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10b      	bne.n	8001078 <parse_number+0x88>
 8001060:	f002 0308 	and.w	r3, r2, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d111      	bne.n	8001096 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001072:	e02a      	b.n	80010ca <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001074:	2b65      	cmp	r3, #101	; 0x65
 8001076:	d128      	bne.n	80010ca <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	6899      	ldr	r1, [r3, #8]
 8001080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001082:	440b      	add	r3, r1
 8001084:	4413      	add	r3, r2
 8001086:	7819      	ldrb	r1, [r3, #0]
 8001088:	f107 0208 	add.w	r2, r7, #8
 800108c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800108e:	4413      	add	r3, r2
 8001090:	460a      	mov	r2, r1
 8001092:	701a      	strb	r2, [r3, #0]
                break;
 8001094:	e007      	b.n	80010a6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001096:	f107 0208 	add.w	r2, r7, #8
 800109a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800109c:	4413      	add	r3, r2
 800109e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80010a2:	701a      	strb	r2, [r3, #0]
                break;
 80010a4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80010a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010a8:	3301      	adds	r3, #1
 80010aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ae:	2b3e      	cmp	r3, #62	; 0x3e
 80010b0:	d80d      	bhi.n	80010ce <parse_number+0xde>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00a      	beq.n	80010ce <parse_number+0xde>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010be:	441a      	add	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3b3      	bcc.n	8001030 <parse_number+0x40>
        }
    }
loop_end:
 80010c8:	e001      	b.n	80010ce <parse_number+0xde>
                goto loop_end;
 80010ca:	bf00      	nop
 80010cc:	e000      	b.n	80010d0 <parse_number+0xe0>
loop_end:
 80010ce:	bf00      	nop
    number_c_string[i] = '\0';
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d6:	4413      	add	r3, r2
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80010dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 fbd2 	bl	8006890 <strtod>
 80010ec:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80010f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d101      	bne.n	80010fe <parse_number+0x10e>
    {
        return false; /* parse_error */
 80010fa:	2300      	movs	r3, #0
 80010fc:	e036      	b.n	800116c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001104:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001108:	a31b      	add	r3, pc, #108	; (adr r3, 8001178 <parse_number+0x188>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001112:	f7ff fc71 	bl	80009f8 <__aeabi_dcmpge>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	e015      	b.n	8001152 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <parse_number+0x194>)
 800112c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001130:	f7ff fc58 	bl	80009e4 <__aeabi_dcmple>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	e006      	b.n	8001152 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001144:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001148:	f7ff fc6a 	bl	8000a20 <__aeabi_d2iz>
 800114c:	4602      	mov	r2, r0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2208      	movs	r2, #8
 8001156:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800115e:	f107 0208 	add.w	r2, r7, #8
 8001162:	1a8a      	subs	r2, r1, r2
 8001164:	441a      	add	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	609a      	str	r2, [r3, #8]
    return true;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3760      	adds	r7, #96	; 0x60
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	f3af 8000 	nop.w
 8001178:	ffc00000 	.word	0xffc00000
 800117c:	41dfffff 	.word	0x41dfffff
 8001180:	04007fe5 	.word	0x04007fe5
 8001184:	c1e00000 	.word	0xc1e00000

08001188 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	e04c      	b.n	8001238 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4413      	add	r3, r2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b2f      	cmp	r3, #47	; 0x2f
 80011a8:	d90f      	bls.n	80011ca <parse_hex4+0x42>
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b39      	cmp	r3, #57	; 0x39
 80011b4:	d809      	bhi.n	80011ca <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	3b30      	subs	r3, #48	; 0x30
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	e02d      	b.n	8001226 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b40      	cmp	r3, #64	; 0x40
 80011d4:	d90f      	bls.n	80011f6 <parse_hex4+0x6e>
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b46      	cmp	r3, #70	; 0x46
 80011e0:	d809      	bhi.n	80011f6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	3b37      	subs	r3, #55	; 0x37
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e017      	b.n	8001226 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b60      	cmp	r3, #96	; 0x60
 8001200:	d90f      	bls.n	8001222 <parse_hex4+0x9a>
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b66      	cmp	r3, #102	; 0x66
 800120c:	d809      	bhi.n	8001222 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	3b57      	subs	r3, #87	; 0x57
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e001      	b.n	8001226 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e00c      	b.n	8001240 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d802      	bhi.n	8001232 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3301      	adds	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b03      	cmp	r3, #3
 800123c:	d9af      	bls.n	800119e <parse_hex4+0x16>
        }
    }

    return h;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
	...

0800124c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b05      	cmp	r3, #5
 8001284:	f340 80b7 	ble.w	80013f6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	3302      	adds	r3, #2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff7b 	bl	8001188 <parse_hex4>
 8001292:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800129a:	d304      	bcc.n	80012a6 <utf16_literal_to_utf8+0x5a>
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80012a2:	f0c0 80aa 	bcc.w	80013fa <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80012ac:	d337      	bcc.n	800131e <utf16_literal_to_utf8+0xd2>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80012b4:	d233      	bcs.n	800131e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	3306      	adds	r3, #6
 80012ba:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80012c0:	230c      	movs	r3, #12
 80012c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	f340 8096 	ble.w	80013fe <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b5c      	cmp	r3, #92	; 0x5c
 80012d8:	f040 8093 	bne.w	8001402 <utf16_literal_to_utf8+0x1b6>
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b75      	cmp	r3, #117	; 0x75
 80012e4:	f040 808d 	bne.w	8001402 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3302      	adds	r3, #2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff4b 	bl	8001188 <parse_hex4>
 80012f2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80012fa:	f0c0 8084 	bcc.w	8001406 <utf16_literal_to_utf8+0x1ba>
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001304:	d27f      	bcs.n	8001406 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	029a      	lsls	r2, r3, #10
 800130a:	4b43      	ldr	r3, [pc, #268]	; (8001418 <utf16_literal_to_utf8+0x1cc>)
 800130c:	4013      	ands	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001314:	4313      	orrs	r3, r2
 8001316:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800131c:	e004      	b.n	8001328 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800131e:	2306      	movs	r3, #6
 8001320:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	2b7f      	cmp	r3, #127	; 0x7f
 800132c:	d803      	bhi.n	8001336 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001334:	e01f      	b.n	8001376 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133c:	d206      	bcs.n	800134c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800133e:	2302      	movs	r3, #2
 8001340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001344:	23c0      	movs	r3, #192	; 0xc0
 8001346:	f887 3020 	strb.w	r3, [r7, #32]
 800134a:	e014      	b.n	8001376 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001352:	d206      	bcs.n	8001362 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001354:	2303      	movs	r3, #3
 8001356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800135a:	23e0      	movs	r3, #224	; 0xe0
 800135c:	f887 3020 	strb.w	r3, [r7, #32]
 8001360:	e009      	b.n	8001376 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001368:	d24f      	bcs.n	800140a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800136a:	2304      	movs	r3, #4
 800136c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001370:	23f0      	movs	r3, #240	; 0xf0
 8001372:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800137a:	3b01      	subs	r3, #1
 800137c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001380:	e015      	b.n	80013ae <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6819      	ldr	r1, [r3, #0]
 8001390:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001394:	440b      	add	r3, r1
 8001396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80013a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013a8:	3b01      	subs	r3, #1
 80013aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80013ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1e5      	bne.n	8001382 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80013b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d909      	bls.n	80013d2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	b2d9      	uxtb	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e007      	b.n	80013e2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013ea:	441a      	add	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80013f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013f4:	e00b      	b.n	800140e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80013f6:	bf00      	nop
 80013f8:	e008      	b.n	800140c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80013fa:	bf00      	nop
 80013fc:	e006      	b.n	800140c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80013fe:	bf00      	nop
 8001400:	e004      	b.n	800140c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001402:	bf00      	nop
 8001404:	e002      	b.n	800140c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001406:	bf00      	nop
 8001408:	e000      	b.n	800140c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800140a:	bf00      	nop

fail:
    return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	000ffc00 	.word	0x000ffc00

0800141c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b22      	cmp	r3, #34	; 0x22
 8001458:	f040 8103 	bne.w	8001662 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001464:	e017      	b.n	8001496 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b5c      	cmp	r3, #92	; 0x5c
 800146c:	d110      	bne.n	8001490 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	461a      	mov	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	429a      	cmp	r2, r3
 8001480:	f080 80f1 	bcs.w	8001666 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	3301      	adds	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
                input_end++;
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	3301      	adds	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	3301      	adds	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a3a      	ldr	r2, [r7, #32]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d203      	bcs.n	80014b0 <parse_string+0x94>
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b22      	cmp	r3, #34	; 0x22
 80014ae:	d1da      	bne.n	8001466 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6a3a      	ldr	r2, [r7, #32]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	f080 80d3 	bcs.w	800166a <parse_string+0x24e>
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b22      	cmp	r3, #34	; 0x22
 80014ca:	f040 80ce 	bne.w	800166a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	4413      	add	r3, r2
 80014d8:	6a3a      	ldr	r2, [r7, #32]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	3201      	adds	r2, #1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4798      	blx	r3
 80014f0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80ba 	beq.w	800166e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80014fe:	e094      	b.n	800162a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b5c      	cmp	r3, #92	; 0x5c
 8001506:	d008      	beq.n	800151a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	1c53      	adds	r3, r2, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1c59      	adds	r1, r3, #1
 8001512:	60f9      	str	r1, [r7, #12]
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e087      	b.n	800162a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800151a:	2302      	movs	r3, #2
 800151c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800151e:	6a3a      	ldr	r2, [r7, #32]
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	f340 80a4 	ble.w	8001672 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	3301      	adds	r3, #1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b75      	cmp	r3, #117	; 0x75
 8001532:	f300 80a0 	bgt.w	8001676 <parse_string+0x25a>
 8001536:	2b5c      	cmp	r3, #92	; 0x5c
 8001538:	da04      	bge.n	8001544 <parse_string+0x128>
 800153a:	2b22      	cmp	r3, #34	; 0x22
 800153c:	d05c      	beq.n	80015f8 <parse_string+0x1dc>
 800153e:	2b2f      	cmp	r3, #47	; 0x2f
 8001540:	d05a      	beq.n	80015f8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001542:	e098      	b.n	8001676 <parse_string+0x25a>
            switch (input_pointer[1])
 8001544:	3b5c      	subs	r3, #92	; 0x5c
 8001546:	2b19      	cmp	r3, #25
 8001548:	f200 8095 	bhi.w	8001676 <parse_string+0x25a>
 800154c:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <parse_string+0x138>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	080015f9 	.word	0x080015f9
 8001558:	08001677 	.word	0x08001677
 800155c:	08001677 	.word	0x08001677
 8001560:	08001677 	.word	0x08001677
 8001564:	08001677 	.word	0x08001677
 8001568:	08001677 	.word	0x08001677
 800156c:	080015bd 	.word	0x080015bd
 8001570:	08001677 	.word	0x08001677
 8001574:	08001677 	.word	0x08001677
 8001578:	08001677 	.word	0x08001677
 800157c:	080015c9 	.word	0x080015c9
 8001580:	08001677 	.word	0x08001677
 8001584:	08001677 	.word	0x08001677
 8001588:	08001677 	.word	0x08001677
 800158c:	08001677 	.word	0x08001677
 8001590:	08001677 	.word	0x08001677
 8001594:	08001677 	.word	0x08001677
 8001598:	08001677 	.word	0x08001677
 800159c:	080015d5 	.word	0x080015d5
 80015a0:	08001677 	.word	0x08001677
 80015a4:	08001677 	.word	0x08001677
 80015a8:	08001677 	.word	0x08001677
 80015ac:	080015e1 	.word	0x080015e1
 80015b0:	08001677 	.word	0x08001677
 80015b4:	080015ed 	.word	0x080015ed
 80015b8:	08001609 	.word	0x08001609
                    *output_pointer++ = '\b';
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60fa      	str	r2, [r7, #12]
 80015c2:	2208      	movs	r2, #8
 80015c4:	701a      	strb	r2, [r3, #0]
                    break;
 80015c6:	e02c      	b.n	8001622 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60fa      	str	r2, [r7, #12]
 80015ce:	220c      	movs	r2, #12
 80015d0:	701a      	strb	r2, [r3, #0]
                    break;
 80015d2:	e026      	b.n	8001622 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	60fa      	str	r2, [r7, #12]
 80015da:	220a      	movs	r2, #10
 80015dc:	701a      	strb	r2, [r3, #0]
                    break;
 80015de:	e020      	b.n	8001622 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60fa      	str	r2, [r7, #12]
 80015e6:	220d      	movs	r2, #13
 80015e8:	701a      	strb	r2, [r3, #0]
                    break;
 80015ea:	e01a      	b.n	8001622 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60fa      	str	r2, [r7, #12]
 80015f2:	2209      	movs	r2, #9
 80015f4:	701a      	strb	r2, [r3, #0]
                    break;
 80015f6:	e014      	b.n	8001622 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	60f9      	str	r1, [r7, #12]
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	701a      	strb	r2, [r3, #0]
                    break;
 8001606:	e00c      	b.n	8001622 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	461a      	mov	r2, r3
 800160e:	6a39      	ldr	r1, [r7, #32]
 8001610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001612:	f7ff fe1b 	bl	800124c <utf16_literal_to_utf8>
 8001616:	4603      	mov	r3, r0
 8001618:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d02c      	beq.n	800167a <parse_string+0x25e>
                    break;
 8001620:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	4413      	add	r3, r2
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	429a      	cmp	r2, r3
 8001630:	f4ff af66 	bcc.w	8001500 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2210      	movs	r2, #16
 800163e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6a3a      	ldr	r2, [r7, #32]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	461a      	mov	r2, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	609a      	str	r2, [r3, #8]

    return true;
 800165e:	2301      	movs	r3, #1
 8001660:	e020      	b.n	80016a4 <parse_string+0x288>
        goto fail;
 8001662:	bf00      	nop
 8001664:	e00a      	b.n	800167c <parse_string+0x260>
                    goto fail;
 8001666:	bf00      	nop
 8001668:	e008      	b.n	800167c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800166a:	bf00      	nop
 800166c:	e006      	b.n	800167c <parse_string+0x260>
            goto fail; /* allocation failure */
 800166e:	bf00      	nop
 8001670:	e004      	b.n	800167c <parse_string+0x260>
                goto fail;
 8001672:	bf00      	nop
 8001674:	e002      	b.n	800167c <parse_string+0x260>
                    goto fail;
 8001676:	bf00      	nop
 8001678:	e000      	b.n	800167c <parse_string+0x260>
                        goto fail;
 800167a:	bf00      	nop

fail:
    if (output != NULL)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	69f8      	ldr	r0, [r7, #28]
 8001688:	4798      	blx	r3
        output = NULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	461a      	mov	r2, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	609a      	str	r2, [r3, #8]
    }

    return false;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <buffer_skip_whitespace+0x16>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e02c      	b.n	8001720 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <buffer_skip_whitespace+0x2c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d306      	bcc.n	80016e6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	e021      	b.n	8001720 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00d      	beq.n	8001708 <buffer_skip_whitespace+0x5c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <buffer_skip_whitespace+0x5c>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b20      	cmp	r3, #32
 8001706:	d9e9      	bls.n	80016dc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	d104      	bne.n	800171e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
	...

0800172c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <skip_utf8_bom+0x1e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <skip_utf8_bom+0x1e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <skip_utf8_bom+0x22>
    {
        return NULL;
 800174a:	2300      	movs	r3, #0
 800174c:	e01c      	b.n	8001788 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d018      	beq.n	8001786 <skip_utf8_bom+0x5a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	1d1a      	adds	r2, r3, #4
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d211      	bcs.n	8001786 <skip_utf8_bom+0x5a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	4413      	add	r3, r2
 800176c:	2203      	movs	r2, #3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <skip_utf8_bom+0x64>)
 8001770:	4618      	mov	r0, r3
 8001772:	f005 f9b4 	bl	8006ade <strncmp>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d104      	bne.n	8001786 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	1cda      	adds	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001786:	687b      	ldr	r3, [r7, #4]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	08008aa0 	.word	0x08008aa0

08001794 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e00c      	b.n	80017c4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f7fe fcda 	bl	8000164 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	3301      	adds	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	6979      	ldr	r1, [r7, #20]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 f805 	bl	80017cc <cJSON_ParseWithLengthOpts>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <cJSON_ParseWithLengthOpts+0x12c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <cJSON_ParseWithLengthOpts+0x12c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d042      	beq.n	800188a <cJSON_ParseWithLengthOpts+0xbe>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03f      	beq.n	800188a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001816:	4a39      	ldr	r2, [pc, #228]	; (80018fc <cJSON_ParseWithLengthOpts+0x130>)
 8001818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181c:	ca07      	ldmia	r2, {r0, r1, r2}
 800181e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001822:	4836      	ldr	r0, [pc, #216]	; (80018fc <cJSON_ParseWithLengthOpts+0x130>)
 8001824:	f7ff fb74 	bl	8000f10 <cJSON_New_Item>
 8001828:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	2b00      	cmp	r3, #0
 800182e:	d02e      	beq.n	800188e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff79 	bl	800172c <skip_utf8_bom>
 800183a:	4603      	mov	r3, r0
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff35 	bl	80016ac <buffer_skip_whitespace>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001848:	f000 f868 	bl	800191c <parse_value>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d01f      	beq.n	8001892 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00e      	beq.n	8001876 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff25 	bl	80016ac <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001862:	6a3a      	ldr	r2, [r7, #32]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	429a      	cmp	r2, r3
 8001868:	d215      	bcs.n	8001896 <cJSON_ParseWithLengthOpts+0xca>
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10f      	bne.n	8001896 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	441a      	add	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001888:	e031      	b.n	80018ee <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800188a:	bf00      	nop
 800188c:	e004      	b.n	8001898 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800188e:	bf00      	nop
 8001890:	e002      	b.n	8001898 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001892:	bf00      	nop
 8001894:	e000      	b.n	8001898 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001896:	bf00      	nop

fail:
    if (item != NULL)
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800189e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018a0:	f7ff fb4c 	bl	8000f3c <cJSON_Delete>
    }

    if (value != NULL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d020      	beq.n	80018ec <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80018b2:	6a3a      	ldr	r2, [r7, #32]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d202      	bcs.n	80018c0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e005      	b.n	80018cc <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	441a      	add	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <cJSON_ParseWithLengthOpts+0x12c>)
 80018de:	461a      	mov	r2, r3
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018e8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3738      	adds	r7, #56	; 0x38
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000200 	.word	0x20000200
 80018fc:	20000000 	.word	0x20000000

08001900 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff41 	bl	8001794 <cJSON_ParseWithOpts>
 8001912:	4603      	mov	r3, r0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <parse_value+0x18>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <parse_value+0x1c>
    {
        return false; /* no input */
 8001934:	2300      	movs	r3, #0
 8001936:	e0d2      	b.n	8001ade <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01d      	beq.n	800197a <parse_value+0x5e>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	1d1a      	adds	r2, r3, #4
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	d816      	bhi.n	800197a <parse_value+0x5e>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4413      	add	r3, r2
 8001956:	2204      	movs	r2, #4
 8001958:	4963      	ldr	r1, [pc, #396]	; (8001ae8 <parse_value+0x1cc>)
 800195a:	4618      	mov	r0, r3
 800195c:	f005 f8bf 	bl	8006ade <strncmp>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2204      	movs	r2, #4
 800196a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	1d1a      	adds	r2, r3, #4
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	609a      	str	r2, [r3, #8]
        return true;
 8001976:	2301      	movs	r3, #1
 8001978:	e0b1      	b.n	8001ade <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01d      	beq.n	80019bc <parse_value+0xa0>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	1d5a      	adds	r2, r3, #5
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d816      	bhi.n	80019bc <parse_value+0xa0>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4413      	add	r3, r2
 8001998:	2205      	movs	r2, #5
 800199a:	4954      	ldr	r1, [pc, #336]	; (8001aec <parse_value+0x1d0>)
 800199c:	4618      	mov	r0, r3
 800199e:	f005 f89e 	bl	8006ade <strncmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	1d5a      	adds	r2, r3, #5
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	609a      	str	r2, [r3, #8]
        return true;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e090      	b.n	8001ade <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d020      	beq.n	8001a04 <parse_value+0xe8>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	1d1a      	adds	r2, r3, #4
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d819      	bhi.n	8001a04 <parse_value+0xe8>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4413      	add	r3, r2
 80019da:	2204      	movs	r2, #4
 80019dc:	4944      	ldr	r1, [pc, #272]	; (8001af0 <parse_value+0x1d4>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f005 f87d 	bl	8006ade <strncmp>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2202      	movs	r2, #2
 80019ee:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	609a      	str	r2, [r3, #8]
        return true;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e06c      	b.n	8001ade <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d013      	beq.n	8001a32 <parse_value+0x116>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d20d      	bcs.n	8001a32 <parse_value+0x116>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b22      	cmp	r3, #34	; 0x22
 8001a24:	d105      	bne.n	8001a32 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fcf7 	bl	800141c <parse_string>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	e055      	b.n	8001ade <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d023      	beq.n	8001a80 <parse_value+0x164>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d21d      	bcs.n	8001a80 <parse_value+0x164>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b2d      	cmp	r3, #45	; 0x2d
 8001a52:	d00f      	beq.n	8001a74 <parse_value+0x158>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b2f      	cmp	r3, #47	; 0x2f
 8001a62:	d90d      	bls.n	8001a80 <parse_value+0x164>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b39      	cmp	r3, #57	; 0x39
 8001a72:	d805      	bhi.n	8001a80 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001a74:	6839      	ldr	r1, [r7, #0]
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff faba 	bl	8000ff0 <parse_number>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	e02e      	b.n	8001ade <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d013      	beq.n	8001aae <parse_value+0x192>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d20d      	bcs.n	8001aae <parse_value+0x192>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b5b      	cmp	r3, #91	; 0x5b
 8001aa0:	d105      	bne.n	8001aae <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001aa2:	6839      	ldr	r1, [r7, #0]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f825 	bl	8001af4 <parse_array>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	e017      	b.n	8001ade <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <parse_value+0x1c0>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d20d      	bcs.n	8001adc <parse_value+0x1c0>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b7b      	cmp	r3, #123	; 0x7b
 8001ace:	d105      	bne.n	8001adc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8d2 	bl	8001c7c <parse_object>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	e000      	b.n	8001ade <parse_value+0x1c2>
    }

    return false;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	08008a74 	.word	0x08008a74
 8001aec:	08008aa4 	.word	0x08008aa4
 8001af0:	08008aac 	.word	0x08008aac

08001af4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b0e:	d301      	bcc.n	8001b14 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001b10:	2300      	movs	r3, #0
 8001b12:	e0af      	b.n	8001c74 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b5b      	cmp	r3, #91	; 0x5b
 8001b2c:	f040 8094 	bne.w	8001c58 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001b3a:	6838      	ldr	r0, [r7, #0]
 8001b3c:	f7ff fdb6 	bl	80016ac <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00d      	beq.n	8001b62 <parse_array+0x6e>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d207      	bcs.n	8001b62 <parse_array+0x6e>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b5d      	cmp	r3, #93	; 0x5d
 8001b60:	d061      	beq.n	8001c26 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <parse_array+0x80>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d305      	bcc.n	8001b80 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	1e5a      	subs	r2, r3, #1
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001b7e:	e072      	b.n	8001c66 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	3310      	adds	r3, #16
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f9be 	bl	8000f10 <cJSON_New_Item>
 8001b94:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d05f      	beq.n	8001c5c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d104      	bne.n	8001bac <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e007      	b.n	8001bbc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001bc6:	6838      	ldr	r0, [r7, #0]
 8001bc8:	f7ff fd70 	bl	80016ac <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	6938      	ldr	r0, [r7, #16]
 8001bd0:	f7ff fea4 	bl	800191c <parse_value>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d042      	beq.n	8001c60 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001bda:	6838      	ldr	r0, [r7, #0]
 8001bdc:	f7ff fd66 	bl	80016ac <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00d      	beq.n	8001c02 <parse_array+0x10e>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d207      	bcs.n	8001c02 <parse_array+0x10e>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b2c      	cmp	r3, #44	; 0x2c
 8001c00:	d0c3      	beq.n	8001b8a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d02d      	beq.n	8001c64 <parse_array+0x170>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d227      	bcs.n	8001c64 <parse_array+0x170>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b5d      	cmp	r3, #93	; 0x5d
 8001c22:	d11f      	bne.n	8001c64 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001c24:	e000      	b.n	8001c28 <parse_array+0x134>
        goto success;
 8001c26:	bf00      	nop
    input_buffer->depth--;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <parse_array+0x14a>
        head->prev = current_item;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	609a      	str	r2, [r3, #8]

    return true;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e00d      	b.n	8001c74 <parse_array+0x180>
        goto fail;
 8001c58:	bf00      	nop
 8001c5a:	e004      	b.n	8001c66 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001c5c:	bf00      	nop
 8001c5e:	e002      	b.n	8001c66 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001c60:	bf00      	nop
 8001c62:	e000      	b.n	8001c66 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001c64:	bf00      	nop

fail:
    if (head != NULL)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001c6c:	6978      	ldr	r0, [r7, #20]
 8001c6e:	f7ff f965 	bl	8000f3c <cJSON_Delete>
    }

    return false;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c96:	d301      	bcc.n	8001c9c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e0f7      	b.n	8001e8c <parse_object+0x210>
    }
    input_buffer->depth++;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80db 	beq.w	8001e64 <parse_object+0x1e8>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	f080 80d4 	bcs.w	8001e64 <parse_object+0x1e8>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b7b      	cmp	r3, #123	; 0x7b
 8001cca:	f040 80cb 	bne.w	8001e64 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001cd8:	6838      	ldr	r0, [r7, #0]
 8001cda:	f7ff fce7 	bl	80016ac <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <parse_object+0x86>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d208      	bcs.n	8001d02 <parse_object+0x86>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b7d      	cmp	r3, #125	; 0x7d
 8001cfe:	f000 8098 	beq.w	8001e32 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <parse_object+0x98>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d305      	bcc.n	8001d20 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d1e:	e0ae      	b.n	8001e7e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f8ee 	bl	8000f10 <cJSON_New_Item>
 8001d34:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8095 	beq.w	8001e68 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d104      	bne.n	8001d4e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e007      	b.n	8001d5e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8083 	beq.w	8001e6c <parse_object+0x1f0>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d27b      	bcs.n	8001e6c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f7ff fc94 	bl	80016ac <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001d84:	6839      	ldr	r1, [r7, #0]
 8001d86:	6938      	ldr	r0, [r7, #16]
 8001d88:	f7ff fb48 	bl	800141c <parse_string>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d06e      	beq.n	8001e70 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001d92:	6838      	ldr	r0, [r7, #0]
 8001d94:	f7ff fc8a 	bl	80016ac <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d063      	beq.n	8001e74 <parse_object+0x1f8>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d25d      	bcs.n	8001e74 <parse_object+0x1f8>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b3a      	cmp	r3, #58	; 0x3a
 8001dc6:	d155      	bne.n	8001e74 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001dd2:	6838      	ldr	r0, [r7, #0]
 8001dd4:	f7ff fc6a 	bl	80016ac <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	6938      	ldr	r0, [r7, #16]
 8001ddc:	f7ff fd9e 	bl	800191c <parse_value>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d048      	beq.n	8001e78 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001de6:	6838      	ldr	r0, [r7, #0]
 8001de8:	f7ff fc60 	bl	80016ac <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00d      	beq.n	8001e0e <parse_object+0x192>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d207      	bcs.n	8001e0e <parse_object+0x192>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b2c      	cmp	r3, #44	; 0x2c
 8001e0c:	d08d      	beq.n	8001d2a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d033      	beq.n	8001e7c <parse_object+0x200>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d22d      	bcs.n	8001e7c <parse_object+0x200>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b7d      	cmp	r3, #125	; 0x7d
 8001e2e:	d125      	bne.n	8001e7c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8001e30:	e000      	b.n	8001e34 <parse_object+0x1b8>
        goto success; /* empty object */
 8001e32:	bf00      	nop
    input_buffer->depth--;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	1e5a      	subs	r2, r3, #1
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <parse_object+0x1ce>
        head->prev = current_item;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	609a      	str	r2, [r3, #8]
    return true;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e013      	b.n	8001e8c <parse_object+0x210>
        goto fail; /* not an object */
 8001e64:	bf00      	nop
 8001e66:	e00a      	b.n	8001e7e <parse_object+0x202>
            goto fail; /* allocation failure */
 8001e68:	bf00      	nop
 8001e6a:	e008      	b.n	8001e7e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8001e6c:	bf00      	nop
 8001e6e:	e006      	b.n	8001e7e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8001e70:	bf00      	nop
 8001e72:	e004      	b.n	8001e7e <parse_object+0x202>
            goto fail; /* invalid object */
 8001e74:	bf00      	nop
 8001e76:	e002      	b.n	8001e7e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8001e78:	bf00      	nop
 8001e7a:	e000      	b.n	8001e7e <parse_object+0x202>
        goto fail; /* expected end of object */
 8001e7c:	bf00      	nop

fail:
    if (head != NULL)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8001e84:	6978      	ldr	r0, [r7, #20]
 8001e86:	f7ff f859 	bl	8000f3c <cJSON_Delete>
    }

    return false;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <get_object_item+0x1c>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <get_object_item+0x20>
    {
        return NULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e033      	b.n	8001f1c <get_object_item+0x88>
    }

    current_element = object->child;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d017      	beq.n	8001ef0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001ec0:	e002      	b.n	8001ec8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <get_object_item+0x74>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d018      	beq.n	8001f08 <get_object_item+0x74>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4619      	mov	r1, r3
 8001edc:	68b8      	ldr	r0, [r7, #8]
 8001ede:	f7fe f937 	bl	8000150 <strcmp>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ec      	bne.n	8001ec2 <get_object_item+0x2e>
 8001ee8:	e00e      	b.n	8001f08 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <get_object_item+0x74>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4619      	mov	r1, r3
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f7fe ff9b 	bl	8000e38 <case_insensitive_strcmp>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <get_object_item+0x82>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <get_object_item+0x86>
        return NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <get_object_item+0x88>
    }

    return current_element;
 8001f1a:	697b      	ldr	r3, [r7, #20]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	6839      	ldr	r1, [r7, #0]
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffae 	bl	8001e94 <get_object_item>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <SystemClock_Config>:

ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart1;
void SystemClock_Config(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b094      	sub	sp, #80	; 0x50
 8001f46:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4c:	2228      	movs	r2, #40	; 0x28
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 fdbc 	bl	8006ace <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f72:	2302      	movs	r3, #2
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f76:	2301      	movs	r3, #1
 8001f78:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f82:	2300      	movs	r3, #0
 8001f84:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001f86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 fb35 	bl	8003600 <HAL_RCC_OscConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <SystemClock_Config+0x5e>
	{
		Error_Handler();
 8001f9c:	f000 f8ce 	bl	800213c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fda2 	bl	8003b04 <HAL_RCC_ClockConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0x88>
	{
		Error_Handler();
 8001fc6:	f000 f8b9 	bl	800213c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 ff23 	bl	8003e20 <HAL_RCCEx_PeriphCLKConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8001fe0:	f000 f8ac 	bl	800213c <Error_Handler>
	}
}
 8001fe4:	bf00      	nop
 8001fe6:	3750      	adds	r7, #80	; 0x50
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <ADC1_Init>:

void ADC1_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <ADC1_Init+0x7c>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <ADC1_Init+0x7c>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6193      	str	r3, [r2, #24]
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <ADC1_Init+0x7c>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_ADC1_CLK_ENABLE();
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <ADC1_Init+0x7c>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <ADC1_Init+0x7c>)
 8002010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002014:	6193      	str	r3, [r2, #24]
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <ADC1_Init+0x7c>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
	hadc1.Instance = ADC1;
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <ADC1_Init+0x80>)
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <ADC1_Init+0x84>)
 8002026:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <ADC1_Init+0x80>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <ADC1_Init+0x80>)
 8002030:	2200      	movs	r2, #0
 8002032:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <ADC1_Init+0x80>)
 8002036:	2200      	movs	r2, #0
 8002038:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <ADC1_Init+0x80>)
 800203c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002040:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <ADC1_Init+0x80>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <ADC1_Init+0x80>)
 800204a:	2201      	movs	r2, #1
 800204c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <ADC1_Init+0x80>)
 8002050:	f000 fbfe 	bl	8002850 <HAL_ADC_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <ADC1_Init+0x72>
	{
		Error_Handler();
 800205a:	f000 f86f 	bl	800213c <Error_Handler>
	}
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	20000208 	.word	0x20000208
 8002070:	40012400 	.word	0x40012400

08002074 <USART1_UART_Init>:
void USART1_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	__HAL_RCC_USART1_CLK_ENABLE();
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <USART1_UART_Init+0x68>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <USART1_UART_Init+0x68>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6193      	str	r3, [r2, #24]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <USART1_UART_Init+0x68>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
	huart1.Instance = USART1;
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <USART1_UART_Init+0x6c>)
 8002094:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <USART1_UART_Init+0x70>)
 8002096:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <USART1_UART_Init+0x6c>)
 800209a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800209e:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <USART1_UART_Init+0x6c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <USART1_UART_Init+0x6c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <USART1_UART_Init+0x6c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <USART1_UART_Init+0x6c>)
 80020b4:	220c      	movs	r2, #12
 80020b6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <USART1_UART_Init+0x6c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <USART1_UART_Init+0x6c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <USART1_UART_Init+0x6c>)
 80020c6:	f002 f817 	bl	80040f8 <HAL_UART_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <USART1_UART_Init+0x60>
	{
		Error_Handler();
 80020d0:	f000 f834 	bl	800213c <Error_Handler>
	}
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	20000238 	.word	0x20000238
 80020e4:	40013800 	.word	0x40013800

080020e8 <sendJSON>:
void sendJSON(char *jsonMessage) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)jsonMessage, strlen(jsonMessage), HAL_MAX_DELAY);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe f837 	bl	8000164 <strlen>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <sendJSON+0x28>)
 8002102:	f002 f849 	bl	8004198 <HAL_UART_Transmit>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000238 	.word	0x20000238

08002114 <receiveJSON>:
void receiveJSON(char *buffer, uint16_t bufferSize) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t *)buffer, bufferSize, HAL_MAX_DELAY);
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4803      	ldr	r0, [pc, #12]	; (8002138 <receiveJSON+0x24>)
 800212a:	f002 f8c0 	bl	80042ae <HAL_UART_Receive>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000238 	.word	0x20000238

0800213c <Error_Handler>:
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop

	__disable_irq();
	while (1)
 8002144:	e7fe      	b.n	8002144 <Error_Handler+0x8>
	...

08002148 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a06      	ldr	r2, [pc, #24]	; (8002170 <vApplicationGetIdleTaskMemory+0x28>)
 8002158:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4a05      	ldr	r2, [pc, #20]	; (8002174 <vApplicationGetIdleTaskMemory+0x2c>)
 800215e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000280 	.word	0x20000280
 8002174:	200002d4 	.word	0x200002d4

08002178 <main>:
uint32_t temp_sensor_data = 0;
uint32_t light_sensor_data = 0;
uint8_t relay_status = 0;

int main(void)
{
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b08e      	sub	sp, #56	; 0x38
 800217c:	af00      	add	r7, sp, #0
    HAL_Init();
 800217e:	f000 fb05 	bl	800278c <HAL_Init>
    SystemClock_Config();
 8002182:	f7ff fede 	bl	8001f42 <SystemClock_Config>
    ADC1_Init();
 8002186:	f7ff ff31 	bl	8001fec <ADC1_Init>
    USART1_UART_Init();
 800218a:	f7ff ff73 	bl	8002074 <USART1_UART_Init>
    Relay_Init();
 800218e:	f7fe fd95 	bl	8000cbc <Relay_Init>
    LM35_Init();
 8002192:	f7fe fde9 	bl	8000d68 <LM35_Init>
    LDR_Init();
 8002196:	f7fe fd33 	bl	8000c00 <LDR_Init>

    /* Create Tasks using CMSIS-RTOS */
    osThreadDef(uartTask, uartTask, osPriorityNormal, 1, 256);
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <main+0x70>)
 800219c:	f107 041c 	add.w	r4, r7, #28
 80021a0:	461d      	mov	r5, r3
 80021a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadDef(sensorTask, sensorTask, osPriorityNormal, 1, 256);
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <main+0x74>)
 80021b0:	463c      	mov	r4, r7
 80021b2:	461d      	mov	r5, r3
 80021b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fa70 	bl	80046ac <osThreadCreate>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <main+0x78>)
 80021d0:	6013      	str	r3, [r2, #0]
    sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 80021d2:	463b      	mov	r3, r7
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 fa68 	bl	80046ac <osThreadCreate>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <main+0x7c>)
 80021e0:	6013      	str	r3, [r2, #0]

    /* Start Scheduler */
    osKernelStart();
 80021e2:	f002 fa5c 	bl	800469e <osKernelStart>

    while (1)
 80021e6:	e7fe      	b.n	80021e6 <main+0x6e>
 80021e8:	08008ac0 	.word	0x08008ac0
 80021ec:	08008ae8 	.word	0x08008ae8
 80021f0:	200004d4 	.word	0x200004d4
 80021f4:	200004d8 	.word	0x200004d8

080021f8 <uartTask>:
    {
    }
}

void uartTask(void const *argument) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0ae      	sub	sp, #184	; 0xb8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
    char rx_buffer[100];
    cJSON *root, *command, *nodeID, *data;

    for (;;) {
        receiveJSON(rx_buffer, sizeof(rx_buffer));
 8002200:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002204:	2164      	movs	r1, #100	; 0x64
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff84 	bl	8002114 <receiveJSON>

        root = cJSON_Parse(rx_buffer);
 800220c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fb75 	bl	8001900 <cJSON_Parse>
 8002216:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        if (root == NULL) {
 800221a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <uartTask+0x32>
            sendJSON("{\"error\":\"Invalid JSON\"}");
 8002222:	4856      	ldr	r0, [pc, #344]	; (800237c <uartTask+0x184>)
 8002224:	f7ff ff60 	bl	80020e8 <sendJSON>
            continue;
 8002228:	e0a7      	b.n	800237a <uartTask+0x182>
        }

        command = cJSON_GetObjectItem(root, "command");
 800222a:	4955      	ldr	r1, [pc, #340]	; (8002380 <uartTask+0x188>)
 800222c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002230:	f7ff fe78 	bl	8001f24 <cJSON_GetObjectItem>
 8002234:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        nodeID = cJSON_GetObjectItem(root, "nodeID");
 8002238:	4952      	ldr	r1, [pc, #328]	; (8002384 <uartTask+0x18c>)
 800223a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800223e:	f7ff fe71 	bl	8001f24 <cJSON_GetObjectItem>
 8002242:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        data = cJSON_GetObjectItem(root, "data");
 8002246:	4950      	ldr	r1, [pc, #320]	; (8002388 <uartTask+0x190>)
 8002248:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800224c:	f7ff fe6a 	bl	8001f24 <cJSON_GetObjectItem>
 8002250:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

        if (command != NULL && nodeID != NULL) {
 8002254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8087 	beq.w	800236c <uartTask+0x174>
 800225e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8082 	beq.w	800236c <uartTask+0x174>
            int node_id = nodeID->valueint;
 8002268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            if (strcmp(command->valuestring, "ENA") == 0) {
 8002272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	4944      	ldr	r1, [pc, #272]	; (800238c <uartTask+0x194>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7fd ff68 	bl	8000150 <strcmp>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d12c      	bne.n	80022e0 <uartTask+0xe8>
                if (node_id == TEMP_SENSOR_ID) {
 8002286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d10c      	bne.n	80022a8 <uartTask+0xb0>
                    temp_sensor_data = LM35_ReadTemperature();
 800228e:	f7fe fd87 	bl	8000da0 <LM35_ReadTemperature>
 8002292:	4603      	mov	r3, r0
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fc5b 	bl	8000b50 <__aeabi_f2uiz>
 800229a:	4603      	mov	r3, r0
 800229c:	4a3c      	ldr	r2, [pc, #240]	; (8002390 <uartTask+0x198>)
 800229e:	6013      	str	r3, [r2, #0]
                    sendJSON("{\"nodeType\":\"NS\",\"nodeID\":0x80,\"data\":\"DONE\"}");
 80022a0:	483c      	ldr	r0, [pc, #240]	; (8002394 <uartTask+0x19c>)
 80022a2:	f7ff ff21 	bl	80020e8 <sendJSON>
 80022a6:	e061      	b.n	800236c <uartTask+0x174>
                } else if (node_id == LIGHT_SENSOR_ID) {
 80022a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ac:	2b81      	cmp	r3, #129	; 0x81
 80022ae:	d10c      	bne.n	80022ca <uartTask+0xd2>
                    light_sensor_data = LDR_ReadValue();
 80022b0:	f7fe fcc2 	bl	8000c38 <LDR_ReadValue>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fc4a 	bl	8000b50 <__aeabi_f2uiz>
 80022bc:	4603      	mov	r3, r0
 80022be:	4a36      	ldr	r2, [pc, #216]	; (8002398 <uartTask+0x1a0>)
 80022c0:	6013      	str	r3, [r2, #0]
                    sendJSON("{\"nodeType\":\"NS\",\"nodeID\":0x81,\"data\":\"DONE\"}");
 80022c2:	4836      	ldr	r0, [pc, #216]	; (800239c <uartTask+0x1a4>)
 80022c4:	f7ff ff10 	bl	80020e8 <sendJSON>
 80022c8:	e050      	b.n	800236c <uartTask+0x174>
                } else if (node_id == RELAY_ACTUATOR_ID) {
 80022ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ce:	2b50      	cmp	r3, #80	; 0x50
 80022d0:	d14c      	bne.n	800236c <uartTask+0x174>
                    Relay_SetState(1); // Turn on the relay
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7fe fd2c 	bl	8000d30 <Relay_SetState>
                    sendJSON("{\"nodeType\":\"NA\",\"nodeID\":0x50,\"data\":\"DONE\"}");
 80022d8:	4831      	ldr	r0, [pc, #196]	; (80023a0 <uartTask+0x1a8>)
 80022da:	f7ff ff05 	bl	80020e8 <sendJSON>
 80022de:	e045      	b.n	800236c <uartTask+0x174>
                }
            } else if (strcmp(command->valuestring, "ACT") == 0) {
 80022e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	492f      	ldr	r1, [pc, #188]	; (80023a4 <uartTask+0x1ac>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fd ff31 	bl	8000150 <strcmp>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d111      	bne.n	8002318 <uartTask+0x120>
                if (node_id == RELAY_ACTUATOR_ID) {
 80022f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022f8:	2b50      	cmp	r3, #80	; 0x50
 80022fa:	d137      	bne.n	800236c <uartTask+0x174>
                    uint8_t relay_action = data->valueint;
 80022fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                    Relay_SetState(relay_action);
 8002306:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fd10 	bl	8000d30 <Relay_SetState>
                    sendJSON("{\"nodeType\":\"NA\",\"nodeID\":0x50,\"data\":\"DONE\"}");
 8002310:	4823      	ldr	r0, [pc, #140]	; (80023a0 <uartTask+0x1a8>)
 8002312:	f7ff fee9 	bl	80020e8 <sendJSON>
 8002316:	e029      	b.n	800236c <uartTask+0x174>
                }
            } else if (strcmp(command->valuestring, "STA") == 0) {
 8002318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	4922      	ldr	r1, [pc, #136]	; (80023a8 <uartTask+0x1b0>)
 8002320:	4618      	mov	r0, r3
 8002322:	f7fd ff15 	bl	8000150 <strcmp>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d112      	bne.n	8002352 <uartTask+0x15a>
                if (node_id == RELAY_ACTUATOR_ID) {
 800232c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002330:	2b50      	cmp	r3, #80	; 0x50
 8002332:	d11b      	bne.n	800236c <uartTask+0x174>
                    char relay_status_msg[50];
                    sprintf(relay_status_msg, "{\"nodeType\":\"NA\",\"nodeID\":0x50,\"data\":\"%d\"}", relay_status);
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <uartTask+0x1b4>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	491c      	ldr	r1, [pc, #112]	; (80023b0 <uartTask+0x1b8>)
 8002340:	4618      	mov	r0, r3
 8002342:	f004 fb61 	bl	8006a08 <siprintf>
                    sendJSON(relay_status_msg);
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fecc 	bl	80020e8 <sendJSON>
 8002350:	e00c      	b.n	800236c <uartTask+0x174>
                }
            } else if (strcmp(command->valuestring, "DUR") == 0) {
 8002352:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <uartTask+0x1bc>)
 800235a:	4618      	mov	r0, r3
 800235c:	f7fd fef8 	bl	8000150 <strcmp>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <uartTask+0x174>
                // Implement logic for setting sensor reporting duration
                sendJSON("{\"nodeType\":\"NS\",\"nodeID\":0x80,\"data\":\"DONE\"}");
 8002366:	480b      	ldr	r0, [pc, #44]	; (8002394 <uartTask+0x19c>)
 8002368:	f7ff febe 	bl	80020e8 <sendJSON>
            }
        }
        cJSON_Delete(root);
 800236c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002370:	f7fe fde4 	bl	8000f3c <cJSON_Delete>
        osDelay(100);  // Use CMSIS-RTOS osDelay
 8002374:	2064      	movs	r0, #100	; 0x64
 8002376:	f002 f9e5 	bl	8004744 <osDelay>
        receiveJSON(rx_buffer, sizeof(rx_buffer));
 800237a:	e741      	b.n	8002200 <uartTask+0x8>
 800237c:	08008b04 	.word	0x08008b04
 8002380:	08008b20 	.word	0x08008b20
 8002384:	08008b28 	.word	0x08008b28
 8002388:	08008b30 	.word	0x08008b30
 800238c:	08008b38 	.word	0x08008b38
 8002390:	200004dc 	.word	0x200004dc
 8002394:	08008b3c 	.word	0x08008b3c
 8002398:	200004e0 	.word	0x200004e0
 800239c:	08008b6c 	.word	0x08008b6c
 80023a0:	08008b9c 	.word	0x08008b9c
 80023a4:	08008bcc 	.word	0x08008bcc
 80023a8:	08008bd0 	.word	0x08008bd0
 80023ac:	200004e4 	.word	0x200004e4
 80023b0:	08008bd4 	.word	0x08008bd4
 80023b4:	08008c00 	.word	0x08008c00

080023b8 <sensorTask>:
    }
}

void sensorTask(void const *argument) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09c      	sub	sp, #112	; 0x70
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    for (;;) {
        char temp_msg[50];
        sprintf(temp_msg, "{\"nodeType\":\"NS\",\"nodeID\":0x80,\"data\":\"%d\"}", temp_sensor_data);
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <sensorTask+0x48>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <sensorTask+0x4c>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fb1c 	bl	8006a08 <siprintf>
        sendJSON(temp_msg);
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe87 	bl	80020e8 <sendJSON>

        char light_msg[50];
        sprintf(light_msg, "{\"nodeType\":\"NS\",\"nodeID\":0x81,\"data\":\"%d\"}", light_sensor_data);
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <sensorTask+0x50>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023e2:	490a      	ldr	r1, [pc, #40]	; (800240c <sensorTask+0x54>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 fb0f 	bl	8006a08 <siprintf>
        sendJSON(light_msg);
 80023ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fe7a 	bl	80020e8 <sendJSON>

        osDelay(5000); // 5 seconds delay
 80023f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80023f8:	f002 f9a4 	bl	8004744 <osDelay>
    for (;;) {
 80023fc:	e7e0      	b.n	80023c0 <sensorTask+0x8>
 80023fe:	bf00      	nop
 8002400:	200004dc 	.word	0x200004dc
 8002404:	08008c04 	.word	0x08008c04
 8002408:	200004e0 	.word	0x200004e0
 800240c:	08008c30 	.word	0x08008c30

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_MspInit+0x4c>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_MspInit+0x4c>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6193      	str	r3, [r2, #24]
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_MspInit+0x4c>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_MspInit+0x4c>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <HAL_MspInit+0x4c>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002438:	61d3      	str	r3, [r2, #28]
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_MspInit+0x4c>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	210f      	movs	r1, #15
 800244a:	f06f 0001 	mvn.w	r0, #1
 800244e:	f000 ff12 	bl	8003276 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a14      	ldr	r2, [pc, #80]	; (80024cc <HAL_ADC_MspInit+0x6c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d121      	bne.n	80024c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_ADC_MspInit+0x70>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_ADC_MspInit+0x70>)
 8002486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_ADC_MspInit+0x70>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_ADC_MspInit+0x70>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <HAL_ADC_MspInit+0x70>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_ADC_MspInit+0x70>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80024b0:	2306      	movs	r3, #6
 80024b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b4:	2303      	movs	r3, #3
 80024b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <HAL_ADC_MspInit+0x74>)
 80024c0:	f000 ff02 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40012400 	.word	0x40012400
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010800 	.word	0x40010800

080024d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <HAL_UART_MspInit+0x8c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d131      	bne.n	800255c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_UART_MspInit+0x90>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_UART_MspInit+0x90>)
 80024fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_UART_MspInit+0x90>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_UART_MspInit+0x90>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_UART_MspInit+0x90>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_UART_MspInit+0x90>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800252c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	4619      	mov	r1, r3
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <HAL_UART_MspInit+0x94>)
 800253e:	f000 fec3 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4619      	mov	r1, r3
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <HAL_UART_MspInit+0x94>)
 8002558:	f000 feb6 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40013800 	.word	0x40013800
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800

08002570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <NMI_Handler+0x4>

08002576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <HardFault_Handler+0x4>

0800257c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <MemManage_Handler+0x4>

08002582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002586:	e7fe      	b.n	8002586 <BusFault_Handler+0x4>

08002588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800258c:	e7fe      	b.n	800258c <UsageFault_Handler+0x4>

0800258e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800259e:	f000 f93b 	bl	8002818 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80025a2:	f002 fe4b 	bl	800523c <xTaskGetSchedulerState>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d001      	beq.n	80025b0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80025ac:	f003 f83c 	bl	8005628 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return 1;
 80025b8:	2301      	movs	r3, #1
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <_kill>:

int _kill(int pid, int sig)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025cc:	f004 faf0 	bl	8006bb0 <__errno>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2216      	movs	r2, #22
 80025d4:	601a      	str	r2, [r3, #0]
  return -1;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_exit>:

void _exit (int status)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025ea:	f04f 31ff 	mov.w	r1, #4294967295
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffe7 	bl	80025c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025f4:	e7fe      	b.n	80025f4 <_exit+0x12>

080025f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e00a      	b.n	800261e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002608:	f3af 8000 	nop.w
 800260c:	4601      	mov	r1, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	60ba      	str	r2, [r7, #8]
 8002614:	b2ca      	uxtb	r2, r1
 8002616:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	dbf0      	blt.n	8002608 <_read+0x12>
  }

  return len;
 8002626:	687b      	ldr	r3, [r7, #4]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e009      	b.n	8002656 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	60ba      	str	r2, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	dbf1      	blt.n	8002642 <_write+0x12>
  }
  return len;
 800265e:	687b      	ldr	r3, [r7, #4]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_close>:

int _close(int file)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268e:	605a      	str	r2, [r3, #4]
  return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <_isatty>:

int _isatty(int file)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f004 fa5a 	bl	8006bb0 <__errno>
 80026fc:	4603      	mov	r3, r0
 80026fe:	220c      	movs	r2, #12
 8002700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20005000 	.word	0x20005000
 8002728:	00000400 	.word	0x00000400
 800272c:	200004e8 	.word	0x200004e8
 8002730:	20001390 	.word	0x20001390

08002734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002740:	f7ff fff8 	bl	8002734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002744:	480b      	ldr	r0, [pc, #44]	; (8002774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002746:	490c      	ldr	r1, [pc, #48]	; (8002778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002748:	4a0c      	ldr	r2, [pc, #48]	; (800277c <LoopFillZerobss+0x16>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800274c:	e002      	b.n	8002754 <LoopCopyDataInit>

0800274e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002752:	3304      	adds	r3, #4

08002754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002758:	d3f9      	bcc.n	800274e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800275c:	4c09      	ldr	r4, [pc, #36]	; (8002784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002760:	e001      	b.n	8002766 <LoopFillZerobss>

08002762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002764:	3204      	adds	r2, #4

08002766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002768:	d3fb      	bcc.n	8002762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800276a:	f004 fa27 	bl	8006bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800276e:	f7ff fd03 	bl	8002178 <main>
  bx lr
 8002772:	4770      	bx	lr
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800277c:	08009064 	.word	0x08009064
  ldr r2, =_sbss
 8002780:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002784:	20001390 	.word	0x20001390

08002788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC1_2_IRQHandler>
	...

0800278c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_Init+0x28>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_Init+0x28>)
 8002796:	f043 0310 	orr.w	r3, r3, #16
 800279a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800279c:	2003      	movs	r0, #3
 800279e:	f000 fd5f 	bl	8003260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a2:	200f      	movs	r0, #15
 80027a4:	f000 f808 	bl	80027b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a8:	f7ff fe32 	bl	8002410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40022000 	.word	0x40022000

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_InitTick+0x54>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_InitTick+0x58>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fd69 	bl	80032ae <HAL_SYSTICK_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00e      	b.n	8002804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d80a      	bhi.n	8002802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ec:	2200      	movs	r2, #0
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f000 fd3f 	bl	8003276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f8:	4a06      	ldr	r2, [pc, #24]	; (8002814 <HAL_InitTick+0x5c>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000000c 	.word	0x2000000c
 8002810:	20000014 	.word	0x20000014
 8002814:	20000010 	.word	0x20000010

08002818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_IncTick+0x1c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_IncTick+0x20>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	4a03      	ldr	r2, [pc, #12]	; (8002838 <HAL_IncTick+0x20>)
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000014 	.word	0x20000014
 8002838:	200004ec 	.word	0x200004ec

0800283c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <HAL_GetTick+0x10>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	200004ec 	.word	0x200004ec

08002850 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0be      	b.n	80029f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fde6 	bl	8002460 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fbf1 	bl	800307c <ADC_ConversionStop_Disable>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 8099 	bne.w	80029de <HAL_ADC_Init+0x18e>
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 8095 	bne.w	80029de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028bc:	f023 0302 	bic.w	r3, r3, #2
 80028c0:	f043 0202 	orr.w	r2, r3, #2
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7b1b      	ldrb	r3, [r3, #12]
 80028d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d003      	beq.n	80028f2 <HAL_ADC_Init+0xa2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_ADC_Init+0xa8>
 80028f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f6:	e000      	b.n	80028fa <HAL_ADC_Init+0xaa>
 80028f8:	2300      	movs	r3, #0
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7d1b      	ldrb	r3, [r3, #20]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d119      	bne.n	800293c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7b1b      	ldrb	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	3b01      	subs	r3, #1
 8002916:	035a      	lsls	r2, r3, #13
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	e00b      	b.n	800293c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_ADC_Init+0x1a8>)
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	430b      	orrs	r3, r1
 8002962:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296c:	d003      	beq.n	8002976 <HAL_ADC_Init+0x126>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d104      	bne.n	8002980 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	3b01      	subs	r3, #1
 800297c:	051b      	lsls	r3, r3, #20
 800297e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	430a      	orrs	r2, r1
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_ADC_Init+0x1ac>)
 800299c:	4013      	ands	r3, r2
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d10b      	bne.n	80029bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029ba:	e018      	b.n	80029ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f023 0312 	bic.w	r3, r3, #18
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029dc:	e007      	b.n	80029ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	ffe1f7fd 	.word	0xffe1f7fd
 80029fc:	ff1f0efe 	.word	0xff1f0efe

08002a00 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_Start+0x1a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e098      	b.n	8002b4c <HAL_ADC_Start+0x14c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fad0 	bl	8002fc8 <ADC_Enable>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8087 	bne.w	8002b42 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a41      	ldr	r2, [pc, #260]	; (8002b54 <HAL_ADC_Start+0x154>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d105      	bne.n	8002a5e <HAL_ADC_Start+0x5e>
 8002a52:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d026      	beq.n	8002ac6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a88:	e01d      	b.n	8002ac6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_ADC_Start+0xaa>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2b      	ldr	r2, [pc, #172]	; (8002b54 <HAL_ADC_Start+0x154>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_ADC_Start+0xc6>
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002abe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f023 0206 	bic.w	r2, r3, #6
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ade:	e002      	b.n	8002ae6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0202 	mvn.w	r2, #2
 8002af6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b06:	d113      	bne.n	8002b30 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b0c:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <HAL_ADC_Start+0x154>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	e00c      	b.n	8002b4a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	e003      	b.n	8002b4a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40012800 	.word	0x40012800
 8002b58:	40012400 	.word	0x40012400

08002b5c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Stop+0x1a>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e01a      	b.n	8002bac <HAL_ADC_Stop+0x50>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa7c 	bl	800307c <ADC_ConversionStop_Disable>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002bca:	f7ff fe37 	bl	800283c <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0d3      	b.n	8002d9e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d131      	bne.n	8002c68 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d12a      	bne.n	8002c68 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c12:	e021      	b.n	8002c58 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1a:	d01d      	beq.n	8002c58 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_ADC_PollForConversion+0x7e>
 8002c22:	f7ff fe0b 	bl	800283c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d212      	bcs.n	8002c58 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0a2      	b.n	8002d9e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0d6      	beq.n	8002c14 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c66:	e070      	b.n	8002d4a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c68:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <HAL_ADC_PollForConversion+0x1f4>)
 8002c6a:	681c      	ldr	r4, [r3, #0]
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f001 f98d 	bl	8003f8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002c72:	4603      	mov	r3, r0
 8002c74:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6919      	ldr	r1, [r3, #16]
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_ADC_PollForConversion+0x1f8>)
 8002c80:	400b      	ands	r3, r1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d118      	bne.n	8002cb8 <HAL_ADC_PollForConversion+0x104>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68d9      	ldr	r1, [r3, #12]
 8002c8c:	4b48      	ldr	r3, [pc, #288]	; (8002db0 <HAL_ADC_PollForConversion+0x1fc>)
 8002c8e:	400b      	ands	r3, r1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d111      	bne.n	8002cb8 <HAL_ADC_PollForConversion+0x104>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6919      	ldr	r1, [r3, #16]
 8002c9a:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <HAL_ADC_PollForConversion+0x200>)
 8002c9c:	400b      	ands	r3, r1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x100>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_ADC_PollForConversion+0x204>)
 8002caa:	400b      	ands	r3, r1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x100>
 8002cb0:	2314      	movs	r3, #20
 8002cb2:	e020      	b.n	8002cf6 <HAL_ADC_PollForConversion+0x142>
 8002cb4:	2329      	movs	r3, #41	; 0x29
 8002cb6:	e01e      	b.n	8002cf6 <HAL_ADC_PollForConversion+0x142>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6919      	ldr	r1, [r3, #16]
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_ADC_PollForConversion+0x200>)
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_ADC_PollForConversion+0x120>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68d9      	ldr	r1, [r3, #12]
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_ADC_PollForConversion+0x204>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_ADC_PollForConversion+0x13c>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6919      	ldr	r1, [r3, #16]
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_ADC_PollForConversion+0x208>)
 8002cdc:	400b      	ands	r3, r1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <HAL_ADC_PollForConversion+0x140>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68d9      	ldr	r1, [r3, #12]
 8002ce8:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <HAL_ADC_PollForConversion+0x208>)
 8002cea:	400b      	ands	r3, r1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_PollForConversion+0x140>
 8002cf0:	2354      	movs	r3, #84	; 0x54
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_PollForConversion+0x142>
 8002cf4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cfc:	e021      	b.n	8002d42 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d01a      	beq.n	8002d3c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_ADC_PollForConversion+0x168>
 8002d0c:	f7ff fd96 	bl	800283c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d20f      	bcs.n	8002d3c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d90b      	bls.n	8002d3c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e030      	b.n	8002d9e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d8d9      	bhi.n	8002cfe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f06f 0212 	mvn.w	r2, #18
 8002d52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d6e:	d115      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	24924924 	.word	0x24924924
 8002db0:	00924924 	.word	0x00924924
 8002db4:	12492492 	.word	0x12492492
 8002db8:	00492492 	.word	0x00492492
 8002dbc:	00249249 	.word	0x00249249

08002dc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x20>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e0dc      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x1da>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d81c      	bhi.n	8002e42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	3b05      	subs	r3, #5
 8002e1a:	221f      	movs	r2, #31
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	4019      	ands	r1, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b05      	subs	r3, #5
 8002e34:	fa00 f203 	lsl.w	r2, r0, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e40:	e03c      	b.n	8002ebc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d81c      	bhi.n	8002e84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b23      	subs	r3, #35	; 0x23
 8002e5c:	221f      	movs	r2, #31
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	4019      	ands	r1, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b23      	subs	r3, #35	; 0x23
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
 8002e82:	e01b      	b.n	8002ebc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	3b41      	subs	r3, #65	; 0x41
 8002e96:	221f      	movs	r2, #31
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	4019      	ands	r1, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	3b41      	subs	r3, #65	; 0x41
 8002eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d91c      	bls.n	8002efe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68d9      	ldr	r1, [r3, #12]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b1e      	subs	r3, #30
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	4019      	ands	r1, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6898      	ldr	r0, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	3b1e      	subs	r3, #30
 8002ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	e019      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	2207      	movs	r2, #7
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	4019      	ands	r1, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6898      	ldr	r0, [r3, #8]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d003      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f3e:	2b11      	cmp	r3, #17
 8002f40:	d132      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <HAL_ADC_ConfigChannel+0x1e4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d125      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d126      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d11a      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9a      	lsrs	r2, r3, #18
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f88:	e002      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f9      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x1b2>
 8002f96:	e007      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	40012400 	.word	0x40012400
 8002fc0:	2000000c 	.word	0x2000000c
 8002fc4:	431bde83 	.word	0x431bde83

08002fc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d040      	beq.n	8003068 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <ADC_Enable+0xac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <ADC_Enable+0xb0>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	0c9b      	lsrs	r3, r3, #18
 8003002:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003004:	e002      	b.n	800300c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3b01      	subs	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f9      	bne.n	8003006 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003012:	f7ff fc13 	bl	800283c <HAL_GetTick>
 8003016:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003018:	e01f      	b.n	800305a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800301a:	f7ff fc0f 	bl	800283c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d918      	bls.n	800305a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	d011      	beq.n	800305a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	f043 0210 	orr.w	r2, r3, #16
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	f043 0201 	orr.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e007      	b.n	800306a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d1d8      	bne.n	800301a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	2000000c 	.word	0x2000000c
 8003078:	431bde83 	.word	0x431bde83

0800307c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d12e      	bne.n	80030f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030a6:	f7ff fbc9 	bl	800283c <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030ac:	e01b      	b.n	80030e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030ae:	f7ff fbc5 	bl	800283c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d914      	bls.n	80030e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d10d      	bne.n	80030e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e007      	b.n	80030f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d0dc      	beq.n	80030ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003132:	4a04      	ldr	r2, [pc, #16]	; (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	60d3      	str	r3, [r2, #12]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <__NVIC_GetPriorityGrouping+0x18>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0307 	and.w	r3, r3, #7
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db0a      	blt.n	800318e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	490c      	ldr	r1, [pc, #48]	; (80031b0 <__NVIC_SetPriority+0x4c>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	440b      	add	r3, r1
 8003188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800318c:	e00a      	b.n	80031a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4908      	ldr	r1, [pc, #32]	; (80031b4 <__NVIC_SetPriority+0x50>)
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	3b04      	subs	r3, #4
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	440b      	add	r3, r1
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	bf28      	it	cs
 80031d6:	2304      	movcs	r3, #4
 80031d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3304      	adds	r3, #4
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d902      	bls.n	80031e8 <NVIC_EncodePriority+0x30>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b03      	subs	r3, #3
 80031e6:	e000      	b.n	80031ea <NVIC_EncodePriority+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43d9      	mvns	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	4313      	orrs	r3, r2
         );
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800322c:	d301      	bcc.n	8003232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322e:	2301      	movs	r3, #1
 8003230:	e00f      	b.n	8003252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <SysTick_Config+0x40>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323a:	210f      	movs	r1, #15
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f7ff ff90 	bl	8003164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <SysTick_Config+0x40>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <SysTick_Config+0x40>)
 800324c:	2207      	movs	r2, #7
 800324e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	e000e010 	.word	0xe000e010

08003260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff49 	bl	8003100 <__NVIC_SetPriorityGrouping>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003288:	f7ff ff5e 	bl	8003148 <__NVIC_GetPriorityGrouping>
 800328c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f7ff ff90 	bl	80031b8 <NVIC_EncodePriority>
 8003298:	4602      	mov	r2, r0
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff5f 	bl	8003164 <__NVIC_SetPriority>
}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ffb0 	bl	800321c <SysTick_Config>
 80032bc:	4603      	mov	r3, r0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b08b      	sub	sp, #44	; 0x2c
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032da:	e169      	b.n	80035b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032dc:	2201      	movs	r2, #1
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	f040 8158 	bne.w	80035aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a9a      	ldr	r2, [pc, #616]	; (8003568 <HAL_GPIO_Init+0x2a0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d05e      	beq.n	80033c2 <HAL_GPIO_Init+0xfa>
 8003304:	4a98      	ldr	r2, [pc, #608]	; (8003568 <HAL_GPIO_Init+0x2a0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d875      	bhi.n	80033f6 <HAL_GPIO_Init+0x12e>
 800330a:	4a98      	ldr	r2, [pc, #608]	; (800356c <HAL_GPIO_Init+0x2a4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d058      	beq.n	80033c2 <HAL_GPIO_Init+0xfa>
 8003310:	4a96      	ldr	r2, [pc, #600]	; (800356c <HAL_GPIO_Init+0x2a4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d86f      	bhi.n	80033f6 <HAL_GPIO_Init+0x12e>
 8003316:	4a96      	ldr	r2, [pc, #600]	; (8003570 <HAL_GPIO_Init+0x2a8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d052      	beq.n	80033c2 <HAL_GPIO_Init+0xfa>
 800331c:	4a94      	ldr	r2, [pc, #592]	; (8003570 <HAL_GPIO_Init+0x2a8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d869      	bhi.n	80033f6 <HAL_GPIO_Init+0x12e>
 8003322:	4a94      	ldr	r2, [pc, #592]	; (8003574 <HAL_GPIO_Init+0x2ac>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d04c      	beq.n	80033c2 <HAL_GPIO_Init+0xfa>
 8003328:	4a92      	ldr	r2, [pc, #584]	; (8003574 <HAL_GPIO_Init+0x2ac>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d863      	bhi.n	80033f6 <HAL_GPIO_Init+0x12e>
 800332e:	4a92      	ldr	r2, [pc, #584]	; (8003578 <HAL_GPIO_Init+0x2b0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d046      	beq.n	80033c2 <HAL_GPIO_Init+0xfa>
 8003334:	4a90      	ldr	r2, [pc, #576]	; (8003578 <HAL_GPIO_Init+0x2b0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d85d      	bhi.n	80033f6 <HAL_GPIO_Init+0x12e>
 800333a:	2b12      	cmp	r3, #18
 800333c:	d82a      	bhi.n	8003394 <HAL_GPIO_Init+0xcc>
 800333e:	2b12      	cmp	r3, #18
 8003340:	d859      	bhi.n	80033f6 <HAL_GPIO_Init+0x12e>
 8003342:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <HAL_GPIO_Init+0x80>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	080033c3 	.word	0x080033c3
 800334c:	0800339d 	.word	0x0800339d
 8003350:	080033af 	.word	0x080033af
 8003354:	080033f1 	.word	0x080033f1
 8003358:	080033f7 	.word	0x080033f7
 800335c:	080033f7 	.word	0x080033f7
 8003360:	080033f7 	.word	0x080033f7
 8003364:	080033f7 	.word	0x080033f7
 8003368:	080033f7 	.word	0x080033f7
 800336c:	080033f7 	.word	0x080033f7
 8003370:	080033f7 	.word	0x080033f7
 8003374:	080033f7 	.word	0x080033f7
 8003378:	080033f7 	.word	0x080033f7
 800337c:	080033f7 	.word	0x080033f7
 8003380:	080033f7 	.word	0x080033f7
 8003384:	080033f7 	.word	0x080033f7
 8003388:	080033f7 	.word	0x080033f7
 800338c:	080033a5 	.word	0x080033a5
 8003390:	080033b9 	.word	0x080033b9
 8003394:	4a79      	ldr	r2, [pc, #484]	; (800357c <HAL_GPIO_Init+0x2b4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800339a:	e02c      	b.n	80033f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	623b      	str	r3, [r7, #32]
          break;
 80033a2:	e029      	b.n	80033f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	3304      	adds	r3, #4
 80033aa:	623b      	str	r3, [r7, #32]
          break;
 80033ac:	e024      	b.n	80033f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	3308      	adds	r3, #8
 80033b4:	623b      	str	r3, [r7, #32]
          break;
 80033b6:	e01f      	b.n	80033f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	330c      	adds	r3, #12
 80033be:	623b      	str	r3, [r7, #32]
          break;
 80033c0:	e01a      	b.n	80033f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ca:	2304      	movs	r3, #4
 80033cc:	623b      	str	r3, [r7, #32]
          break;
 80033ce:	e013      	b.n	80033f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033d8:	2308      	movs	r3, #8
 80033da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	611a      	str	r2, [r3, #16]
          break;
 80033e2:	e009      	b.n	80033f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e4:	2308      	movs	r3, #8
 80033e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	615a      	str	r2, [r3, #20]
          break;
 80033ee:	e003      	b.n	80033f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
          break;
 80033f4:	e000      	b.n	80033f8 <HAL_GPIO_Init+0x130>
          break;
 80033f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2bff      	cmp	r3, #255	; 0xff
 80033fc:	d801      	bhi.n	8003402 <HAL_GPIO_Init+0x13a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	e001      	b.n	8003406 <HAL_GPIO_Init+0x13e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2bff      	cmp	r3, #255	; 0xff
 800340c:	d802      	bhi.n	8003414 <HAL_GPIO_Init+0x14c>
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	e002      	b.n	800341a <HAL_GPIO_Init+0x152>
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	3b08      	subs	r3, #8
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	210f      	movs	r1, #15
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	6a39      	ldr	r1, [r7, #32]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	431a      	orrs	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80b1 	beq.w	80035aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003448:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_GPIO_Init+0x2b8>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_GPIO_Init+0x2b8>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6193      	str	r3, [r2, #24]
 8003454:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_GPIO_Init+0x2b8>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003460:	4a48      	ldr	r2, [pc, #288]	; (8003584 <HAL_GPIO_Init+0x2bc>)
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	3302      	adds	r3, #2
 8003468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220f      	movs	r2, #15
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a40      	ldr	r2, [pc, #256]	; (8003588 <HAL_GPIO_Init+0x2c0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_GPIO_Init+0x1ec>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3f      	ldr	r2, [pc, #252]	; (800358c <HAL_GPIO_Init+0x2c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00d      	beq.n	80034b0 <HAL_GPIO_Init+0x1e8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a3e      	ldr	r2, [pc, #248]	; (8003590 <HAL_GPIO_Init+0x2c8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <HAL_GPIO_Init+0x1e4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3d      	ldr	r2, [pc, #244]	; (8003594 <HAL_GPIO_Init+0x2cc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_GPIO_Init+0x1e0>
 80034a4:	2303      	movs	r3, #3
 80034a6:	e006      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034a8:	2304      	movs	r3, #4
 80034aa:	e004      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e002      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_GPIO_Init+0x1ee>
 80034b4:	2300      	movs	r3, #0
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	f002 0203 	and.w	r2, r2, #3
 80034bc:	0092      	lsls	r2, r2, #2
 80034be:	4093      	lsls	r3, r2
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034c6:	492f      	ldr	r1, [pc, #188]	; (8003584 <HAL_GPIO_Init+0x2bc>)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034e0:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	492c      	ldr	r1, [pc, #176]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]
 80034ec:	e006      	b.n	80034fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034ee:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	4928      	ldr	r1, [pc, #160]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	4922      	ldr	r1, [pc, #136]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	4313      	orrs	r3, r2
 8003512:	60cb      	str	r3, [r1, #12]
 8003514:	e006      	b.n	8003524 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	43db      	mvns	r3, r3
 800351e:	491e      	ldr	r1, [pc, #120]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 8003520:	4013      	ands	r3, r2
 8003522:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4918      	ldr	r1, [pc, #96]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
 800353c:	e006      	b.n	800354c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	43db      	mvns	r3, r3
 8003546:	4914      	ldr	r1, [pc, #80]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 8003548:	4013      	ands	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d021      	beq.n	800359c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_GPIO_Init+0x2d0>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
 8003564:	e021      	b.n	80035aa <HAL_GPIO_Init+0x2e2>
 8003566:	bf00      	nop
 8003568:	10320000 	.word	0x10320000
 800356c:	10310000 	.word	0x10310000
 8003570:	10220000 	.word	0x10220000
 8003574:	10210000 	.word	0x10210000
 8003578:	10120000 	.word	0x10120000
 800357c:	10110000 	.word	0x10110000
 8003580:	40021000 	.word	0x40021000
 8003584:	40010000 	.word	0x40010000
 8003588:	40010800 	.word	0x40010800
 800358c:	40010c00 	.word	0x40010c00
 8003590:	40011000 	.word	0x40011000
 8003594:	40011400 	.word	0x40011400
 8003598:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_GPIO_Init+0x304>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	4909      	ldr	r1, [pc, #36]	; (80035cc <HAL_GPIO_Init+0x304>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	3301      	adds	r3, #1
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f47f ae8e 	bne.w	80032dc <HAL_GPIO_Init+0x14>
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	372c      	adds	r7, #44	; 0x2c
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr
 80035cc:	40010400 	.word	0x40010400

080035d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035e0:	787b      	ldrb	r3, [r7, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035ec:	e003      	b.n	80035f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035ee:	887b      	ldrh	r3, [r7, #2]
 80035f0:	041a      	lsls	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	611a      	str	r2, [r3, #16]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e272      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8087 	beq.w	800372e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003620:	4b92      	ldr	r3, [pc, #584]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00c      	beq.n	8003646 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800362c:	4b8f      	ldr	r3, [pc, #572]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d112      	bne.n	800365e <HAL_RCC_OscConfig+0x5e>
 8003638:	4b8c      	ldr	r3, [pc, #560]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d10b      	bne.n	800365e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	4b89      	ldr	r3, [pc, #548]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d06c      	beq.n	800372c <HAL_RCC_OscConfig+0x12c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d168      	bne.n	800372c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e24c      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x76>
 8003668:	4b80      	ldr	r3, [pc, #512]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7f      	ldr	r2, [pc, #508]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e02e      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x98>
 800367e:	4b7b      	ldr	r3, [pc, #492]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b78      	ldr	r3, [pc, #480]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a77      	ldr	r2, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e01d      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0xbc>
 80036a2:	4b72      	ldr	r3, [pc, #456]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a71      	ldr	r2, [pc, #452]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b6f      	ldr	r3, [pc, #444]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6e      	ldr	r2, [pc, #440]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 80036bc:	4b6b      	ldr	r3, [pc, #428]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6a      	ldr	r2, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b68      	ldr	r3, [pc, #416]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a67      	ldr	r2, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7ff f8ae 	bl	800283c <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7ff f8aa 	bl	800283c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e200      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xe4>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7ff f89a 	bl	800283c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7ff f896 	bl	800283c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1ec      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x10c>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373a:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x18c>
 8003752:	4b46      	ldr	r3, [pc, #280]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x176>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1c0      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b3d      	ldr	r3, [pc, #244]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4939      	ldr	r1, [pc, #228]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	e03a      	b.n	8003802 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCC_OscConfig+0x270>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7ff f84f 	bl	800283c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a2:	f7ff f84b 	bl	800283c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1a1      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4927      	ldr	r1, [pc, #156]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_RCC_OscConfig+0x270>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7ff f82e 	bl	800283c <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e4:	f7ff f82a 	bl	800283c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e180      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d03a      	beq.n	8003884 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d019      	beq.n	800384a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <HAL_RCC_OscConfig+0x274>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381c:	f7ff f80e 	bl	800283c <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003824:	f7ff f80a 	bl	800283c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e160      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f000 face 	bl	8003de4 <RCC_Delay>
 8003848:	e01c      	b.n	8003884 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_RCC_OscConfig+0x274>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fe fff4 	bl	800283c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003856:	e00f      	b.n	8003878 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003858:	f7fe fff0 	bl	800283c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d908      	bls.n	8003878 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e146      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
 8003870:	42420000 	.word	0x42420000
 8003874:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e9      	bne.n	8003858 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a6 	beq.w	80039de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b8b      	ldr	r3, [pc, #556]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a87      	ldr	r2, [pc, #540]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	61d3      	str	r3, [r2, #28]
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ca:	4b7f      	ldr	r3, [pc, #508]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7e      	ldr	r2, [pc, #504]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fe ffb1 	bl	800283c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fe ffad 	bl	800283c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e103      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	4b75      	ldr	r3, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x312>
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	e02d      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x334>
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a69      	ldr	r2, [pc, #420]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a66      	ldr	r2, [pc, #408]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6213      	str	r3, [r2, #32]
 8003932:	e01c      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x356>
 800393c:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4a60      	ldr	r2, [pc, #384]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6213      	str	r3, [r2, #32]
 8003948:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4a5d      	ldr	r2, [pc, #372]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a5a      	ldr	r2, [pc, #360]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6213      	str	r3, [r2, #32]
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a57      	ldr	r2, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7fe ff61 	bl	800283c <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fe ff5d 	bl	800283c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0b1      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCC_OscConfig+0x37e>
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fe ff4b 	bl	800283c <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fe ff47 	bl	800283c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e09b      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b3c      	ldr	r3, [pc, #240]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8087 	beq.w	8003af6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d061      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d146      	bne.n	8003a8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fe ff1b 	bl	800283c <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fe ff17 	bl	800283c <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e06d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d108      	bne.n	8003a44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4921      	ldr	r1, [pc, #132]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a19      	ldr	r1, [r3, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	430b      	orrs	r3, r1
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fe feeb 	bl	800283c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fe fee7 	bl	800283c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e03d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x46a>
 8003a88:	e035      	b.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fe fed4 	bl	800283c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fe fed0 	bl	800283c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e026      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x498>
 8003ab6:	e01e      	b.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e019      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x500>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000

08003b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d0      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b67      	ldr	r3, [pc, #412]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4965      	ldr	r1, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d040      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d115      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e073      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06b      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fe fe22 	bl	800283c <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fe fe1e 	bl	800283c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e053      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d210      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fd80 	bl	80027b8 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08008c64 	.word	0x08008c64
 8003cd0:	2000000c 	.word	0x2000000c
 8003cd4:	20000010 	.word	0x20000010

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d002      	beq.n	8003d08 <HAL_RCC_GetSysClockFreq+0x30>
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d003      	beq.n	8003d0e <HAL_RCC_GetSysClockFreq+0x36>
 8003d06:	e027      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d0a:	613b      	str	r3, [r7, #16]
      break;
 8003d0c:	e027      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	0c9b      	lsrs	r3, r3, #18
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0c5b      	lsrs	r3, r3, #17
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d3a:	fb03 f202 	mul.w	r2, r3, r2
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e004      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	613b      	str	r3, [r7, #16]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d5a:	613b      	str	r3, [r7, #16]
      break;
 8003d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5e:	693b      	ldr	r3, [r7, #16]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	007a1200 	.word	0x007a1200
 8003d74:	08008c7c 	.word	0x08008c7c
 8003d78:	08008c8c 	.word	0x08008c8c
 8003d7c:	003d0900 	.word	0x003d0900

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b02      	ldr	r3, [pc, #8]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	2000000c 	.word	0x2000000c

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff2 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08008c74 	.word	0x08008c74

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffde 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0adb      	lsrs	r3, r3, #11
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	08008c74 	.word	0x08008c74

08003de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <RCC_Delay+0x34>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <RCC_Delay+0x38>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0a5b      	lsrs	r3, r3, #9
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e00:	bf00      	nop
  }
  while (Delay --);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e5a      	subs	r2, r3, #1
 8003e06:	60fa      	str	r2, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f9      	bne.n	8003e00 <RCC_Delay+0x1c>
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	2000000c 	.word	0x2000000c
 8003e1c:	10624dd3 	.word	0x10624dd3

08003e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d07d      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e40:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	61d3      	str	r3, [r2, #28]
 8003e58:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d118      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e74:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a42      	ldr	r2, [pc, #264]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e80:	f7fe fcdc 	bl	800283c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	e008      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fe fcd8 	bl	800283c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e06d      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea6:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02e      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d027      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec4:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ecc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eda:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d014      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe fca7 	bl	800283c <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fe fca3 	bl	800283c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e036      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ee      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4917      	ldr	r1, [pc, #92]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	490b      	ldr	r1, [pc, #44]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40007000 	.word	0x40007000
 8003f88:	42420440 	.word	0x42420440

08003f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	f200 808a 	bhi.w	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d045      	beq.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d075      	beq.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003fc2:	e082      	b.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003fc4:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fca:	4b45      	ldr	r3, [pc, #276]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d07b      	beq.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0c9b      	lsrs	r3, r3, #18
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	4a41      	ldr	r2, [pc, #260]	; (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003fe0:	5cd3      	ldrb	r3, [r2, r3]
 8003fe2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d015      	beq.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fee:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0c5b      	lsrs	r3, r3, #17
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004008:	4a38      	ldr	r2, [pc, #224]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004024:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004030:	d102      	bne.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	61bb      	str	r3, [r7, #24]
      break;
 8004036:	e04a      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4a2d      	ldr	r2, [pc, #180]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
      break;
 8004046:	e042      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004048:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004058:	d108      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	e01f      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004084:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e00f      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004096:	d11c      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80040a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040a8:	61bb      	str	r3, [r7, #24]
      break;
 80040aa:	e012      	b.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80040ac:	e011      	b.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040ae:	f7ff fe85 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	0b9b      	lsrs	r3, r3, #14
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	61bb      	str	r3, [r7, #24]
      break;
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040d2:	bf00      	nop
    }
  }
  return (frequency);
 80040d4:	69bb      	ldr	r3, [r7, #24]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08008c90 	.word	0x08008c90
 80040e8:	08008ca0 	.word	0x08008ca0
 80040ec:	007a1200 	.word	0x007a1200
 80040f0:	003d0900 	.word	0x003d0900
 80040f4:	aaaaaaab 	.word	0xaaaaaaab

080040f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e042      	b.n	8004190 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fe f9da 	bl	80024d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800413a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fa09 	bl	8004554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d175      	bne.n	80042a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_UART_Transmit+0x2c>
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e06e      	b.n	80042a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2221      	movs	r2, #33	; 0x21
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041d6:	f7fe fb31 	bl	800283c <HAL_GetTick>
 80041da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	88fa      	ldrh	r2, [r7, #6]
 80041e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	88fa      	ldrh	r2, [r7, #6]
 80041e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f0:	d108      	bne.n	8004204 <HAL_UART_Transmit+0x6c>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	e003      	b.n	800420c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004208:	2300      	movs	r3, #0
 800420a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800420c:	e02e      	b.n	800426c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2200      	movs	r2, #0
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f8df 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e03a      	b.n	80042a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004244:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	3302      	adds	r3, #2
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	e007      	b.n	800425e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3301      	adds	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1cb      	bne.n	800420e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2200      	movs	r2, #0
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f8ab 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e006      	b.n	80042a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b08a      	sub	sp, #40	; 0x28
 80042b2:	af02      	add	r7, sp, #8
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	f040 8081 	bne.w	80043d2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Receive+0x2e>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e079      	b.n	80043d4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2222      	movs	r2, #34	; 0x22
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f4:	f7fe faa2 	bl	800283c <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d108      	bne.n	8004322 <HAL_UART_Receive+0x74>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	e003      	b.n	800432a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800432a:	e047      	b.n	80043bc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2200      	movs	r2, #0
 8004334:	2120      	movs	r1, #32
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f850 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e042      	b.n	80043d4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10c      	bne.n	800436e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004360:	b29a      	uxth	r2, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	3302      	adds	r3, #2
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	e01f      	b.n	80043ae <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d007      	beq.n	8004388 <HAL_UART_Receive+0xda>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_UART_Receive+0xe8>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e008      	b.n	80043a8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	3301      	adds	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1b2      	bne.n	800432c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	e03b      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d037      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fe fa21 	bl	800283c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	6a3a      	ldr	r2, [r7, #32]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <UART_WaitOnFlagUntilTimeout+0x30>
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e03a      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d023      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x8a>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d020      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d01d      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b08      	cmp	r3, #8
 8004436:	d116      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f81d 	bl	800448e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2208      	movs	r2, #8
 8004458:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e00f      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4013      	ands	r3, r2
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	bf0c      	ite	eq
 8004476:	2301      	moveq	r3, #1
 8004478:	2300      	movne	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	429a      	cmp	r2, r3
 8004482:	d0b4      	beq.n	80043ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800448e:	b480      	push	{r7}
 8004490:	b095      	sub	sp, #84	; 0x54
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b6:	643a      	str	r2, [r7, #64]	; 0x40
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e5      	bne.n	8004496 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3314      	adds	r3, #20
 80044d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e5      	bne.n	80044ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	2b01      	cmp	r3, #1
 8004504:	d119      	bne.n	800453a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	60bb      	str	r3, [r7, #8]
   return(result);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f023 0310 	bic.w	r3, r3, #16
 800451c:	647b      	str	r3, [r7, #68]	; 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004526:	61ba      	str	r2, [r7, #24]
 8004528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6979      	ldr	r1, [r7, #20]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	613b      	str	r3, [r7, #16]
   return(result);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e5      	bne.n	8004506 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004548:	bf00      	nop
 800454a:	3754      	adds	r7, #84	; 0x54
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
	...

08004554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800458e:	f023 030c 	bic.w	r3, r3, #12
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	430b      	orrs	r3, r1
 800459a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <UART_SetConfig+0x114>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d103      	bne.n	80045c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7ff fbfe 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	e002      	b.n	80045ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045c4:	f7ff fbe6 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 80045c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009a      	lsls	r2, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	4a22      	ldr	r2, [pc, #136]	; (800466c <UART_SetConfig+0x118>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	0119      	lsls	r1, r3, #4
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009a      	lsls	r2, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004600:	4b1a      	ldr	r3, [pc, #104]	; (800466c <UART_SetConfig+0x118>)
 8004602:	fba3 0302 	umull	r0, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2064      	movs	r0, #100	; 0x64
 800460a:	fb00 f303 	mul.w	r3, r0, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	3332      	adds	r3, #50	; 0x32
 8004614:	4a15      	ldr	r2, [pc, #84]	; (800466c <UART_SetConfig+0x118>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004620:	4419      	add	r1, r3
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009a      	lsls	r2, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	fbb2 f2f3 	udiv	r2, r2, r3
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <UART_SetConfig+0x118>)
 800463a:	fba3 0302 	umull	r0, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	2064      	movs	r0, #100	; 0x64
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	3332      	adds	r3, #50	; 0x32
 800464c:	4a07      	ldr	r2, [pc, #28]	; (800466c <UART_SetConfig+0x118>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	f003 020f 	and.w	r2, r3, #15
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	440a      	add	r2, r1
 800465e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40013800 	.word	0x40013800
 800466c:	51eb851f 	.word	0x51eb851f

08004670 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800467e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004682:	2b84      	cmp	r3, #132	; 0x84
 8004684:	d005      	beq.n	8004692 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004686:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	3303      	adds	r3, #3
 8004690:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004692:	68fb      	ldr	r3, [r7, #12]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr

0800469e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80046a2:	f000 fad9 	bl	8004c58 <vTaskStartScheduler>
  
  return osOK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}

080046ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af04      	add	r7, sp, #16
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d020      	beq.n	8004700 <osThreadCreate+0x54>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01c      	beq.n	8004700 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685c      	ldr	r4, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691e      	ldr	r6, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ffc9 	bl	8004670 <makeFreeRtosPriority>
 80046de:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046e8:	9202      	str	r2, [sp, #8]
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	9100      	str	r1, [sp, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	4632      	mov	r2, r6
 80046f2:	4629      	mov	r1, r5
 80046f4:	4620      	mov	r0, r4
 80046f6:	f000 f8e8 	bl	80048ca <xTaskCreateStatic>
 80046fa:	4603      	mov	r3, r0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e01c      	b.n	800473a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685c      	ldr	r4, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800470c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ffab 	bl	8004670 <makeFreeRtosPriority>
 800471a:	4602      	mov	r2, r0
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	9200      	str	r2, [sp, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	4632      	mov	r2, r6
 8004728:	4629      	mov	r1, r5
 800472a:	4620      	mov	r0, r4
 800472c:	f000 f92a 	bl	8004984 <xTaskCreate>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004736:	2300      	movs	r3, #0
 8004738:	e000      	b.n	800473c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800473a:	68fb      	ldr	r3, [r7, #12]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004744 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <osDelay+0x16>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	e000      	b.n	800475c <osDelay+0x18>
 800475a:	2301      	movs	r3, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fa47 	bl	8004bf0 <vTaskDelay>
  
  return osOK;
 8004762:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f103 0208 	add.w	r2, r3, #8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f103 0208 	add.w	r2, r3, #8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f103 0208 	add.w	r2, r3, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d103      	bne.n	8004828 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e00c      	b.n	8004842 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3308      	adds	r3, #8
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e002      	b.n	8004836 <vListInsert+0x2e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	d2f6      	bcs.n	8004830 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	601a      	str	r2, [r3, #0]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6892      	ldr	r2, [r2, #8]
 800488e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6852      	ldr	r2, [r2, #4]
 8004898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d103      	bne.n	80048ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b08e      	sub	sp, #56	; 0x38
 80048ce:	af04      	add	r7, sp, #16
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <xTaskCreateStatic+0x46>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	61fb      	str	r3, [r7, #28]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004910:	2354      	movs	r3, #84	; 0x54
 8004912:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b54      	cmp	r3, #84	; 0x54
 8004918:	d00a      	beq.n	8004930 <xTaskCreateStatic+0x66>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	61bb      	str	r3, [r7, #24]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004930:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01e      	beq.n	8004976 <xTaskCreateStatic+0xac>
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01b      	beq.n	8004976 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004946:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004950:	2300      	movs	r3, #0
 8004952:	9303      	str	r3, [sp, #12]
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f850 	bl	8004a0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800496e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004970:	f000 f8d4 	bl	8004b1c <prvAddNewTaskToReadyList>
 8004974:	e001      	b.n	800497a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800497a:	697b      	ldr	r3, [r7, #20]
	}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08c      	sub	sp, #48	; 0x30
 8004988:	af04      	add	r7, sp, #16
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fe89 	bl	80056b0 <pvPortMalloc>
 800499e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00e      	beq.n	80049c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049a6:	2054      	movs	r0, #84	; 0x54
 80049a8:	f000 fe82 	bl	80056b0 <pvPortMalloc>
 80049ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
 80049ba:	e005      	b.n	80049c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049bc:	6978      	ldr	r0, [r7, #20]
 80049be:	f000 ff43 	bl	8005848 <vPortFree>
 80049c2:	e001      	b.n	80049c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d017      	beq.n	80049fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	2300      	movs	r3, #0
 80049da:	9303      	str	r3, [sp, #12]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	9302      	str	r3, [sp, #8]
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f80e 	bl	8004a0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049f2:	69f8      	ldr	r0, [r7, #28]
 80049f4:	f000 f892 	bl	8004b1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049f8:	2301      	movs	r3, #1
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	e002      	b.n	8004a04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004a02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a04:	69bb      	ldr	r3, [r7, #24]
	}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b088      	sub	sp, #32
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a26:	3b01      	subs	r3, #1
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f023 0307 	bic.w	r3, r3, #7
 8004a34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	617b      	str	r3, [r7, #20]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01f      	beq.n	8004a9c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e012      	b.n	8004a88 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	7819      	ldrb	r1, [r3, #0]
 8004a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	3334      	adds	r3, #52	; 0x34
 8004a72:	460a      	mov	r2, r1
 8004a74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d006      	beq.n	8004a90 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	d9e9      	bls.n	8004a62 <prvInitialiseNewTask+0x54>
 8004a8e:	e000      	b.n	8004a92 <prvInitialiseNewTask+0x84>
			{
				break;
 8004a90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a9a:	e003      	b.n	8004aa4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d901      	bls.n	8004aae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004aaa:	2306      	movs	r3, #6
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	2200      	movs	r2, #0
 8004abe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fe70 	bl	80047aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	3318      	adds	r3, #24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fe6b 	bl	80047aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	f1c3 0207 	rsb	r2, r3, #7
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	2200      	movs	r2, #0
 8004aee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	69b8      	ldr	r0, [r7, #24]
 8004afe:	f000 fc21 	bl	8005344 <pxPortInitialiseStack>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b14:	bf00      	nop
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b24:	f000 fd02 	bl	800552c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b28:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <prvAddNewTaskToReadyList+0xb8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	4a29      	ldr	r2, [pc, #164]	; (8004bd4 <prvAddNewTaskToReadyList+0xb8>)
 8004b30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b32:	4b29      	ldr	r3, [pc, #164]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b3a:	4a27      	ldr	r2, [pc, #156]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b40:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <prvAddNewTaskToReadyList+0xb8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d110      	bne.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b48:	f000 faba 	bl	80050c0 <prvInitialiseTaskLists>
 8004b4c:	e00d      	b.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b4e:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <prvAddNewTaskToReadyList+0xc0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d802      	bhi.n	8004b6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b64:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <prvAddNewTaskToReadyList+0xc4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <prvAddNewTaskToReadyList+0xc4>)
 8004b72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <prvAddNewTaskToReadyList+0xc8>)
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <prvAddNewTaskToReadyList+0xcc>)
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7ff fe10 	bl	80047c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ba2:	f000 fcf3 	bl	800558c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <prvAddNewTaskToReadyList+0xc0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00e      	beq.n	8004bcc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <prvAddNewTaskToReadyList+0xbc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d207      	bcs.n	8004bcc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <prvAddNewTaskToReadyList+0xd0>)
 8004bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	200005f0 	.word	0x200005f0
 8004bd8:	200004f0 	.word	0x200004f0
 8004bdc:	200005fc 	.word	0x200005fc
 8004be0:	2000060c 	.word	0x2000060c
 8004be4:	200005f8 	.word	0x200005f8
 8004be8:	200004f4 	.word	0x200004f4
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d017      	beq.n	8004c32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c02:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <vTaskDelay+0x60>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <vTaskDelay+0x30>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	60bb      	str	r3, [r7, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c20:	f000 f87a 	bl	8004d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c24:	2100      	movs	r1, #0
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb26 	bl	8005278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c2c:	f000 f882 	bl	8004d34 <xTaskResumeAll>
 8004c30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <vTaskDelay+0x64>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000618 	.word	0x20000618
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	; 0x28
 8004c5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c66:	463a      	mov	r2, r7
 8004c68:	1d39      	adds	r1, r7, #4
 8004c6a:	f107 0308 	add.w	r3, r7, #8
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fd fa6a 	bl	8002148 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	9202      	str	r2, [sp, #8]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	2300      	movs	r3, #0
 8004c84:	460a      	mov	r2, r1
 8004c86:	491e      	ldr	r1, [pc, #120]	; (8004d00 <vTaskStartScheduler+0xa8>)
 8004c88:	481e      	ldr	r0, [pc, #120]	; (8004d04 <vTaskStartScheduler+0xac>)
 8004c8a:	f7ff fe1e 	bl	80048ca <xTaskCreateStatic>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <vTaskStartScheduler+0xb0>)
 8004c92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c94:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <vTaskStartScheduler+0xb0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	e001      	b.n	8004ca6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d116      	bne.n	8004cda <vTaskStartScheduler+0x82>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	613b      	str	r3, [r7, #16]
}
 8004cbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <vTaskStartScheduler+0xb4>)
 8004cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <vTaskStartScheduler+0xb8>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <vTaskStartScheduler+0xbc>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cd4:	f000 fbb8 	bl	8005448 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cd8:	e00e      	b.n	8004cf8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d10a      	bne.n	8004cf8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	60fb      	str	r3, [r7, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <vTaskStartScheduler+0x9e>
}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	08008c5c 	.word	0x08008c5c
 8004d04:	08005091 	.word	0x08005091
 8004d08:	20000614 	.word	0x20000614
 8004d0c:	20000610 	.word	0x20000610
 8004d10:	200005fc 	.word	0x200005fc
 8004d14:	200005f4 	.word	0x200005f4

08004d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <vTaskSuspendAll+0x18>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3301      	adds	r3, #1
 8004d22:	4a03      	ldr	r2, [pc, #12]	; (8004d30 <vTaskSuspendAll+0x18>)
 8004d24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000618 	.word	0x20000618

08004d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <xTaskResumeAll+0x114>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	603b      	str	r3, [r7, #0]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d60:	f000 fbe4 	bl	800552c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d64:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <xTaskResumeAll+0x114>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	4a37      	ldr	r2, [pc, #220]	; (8004e48 <xTaskResumeAll+0x114>)
 8004d6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6e:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <xTaskResumeAll+0x114>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d161      	bne.n	8004e3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d76:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <xTaskResumeAll+0x118>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d05d      	beq.n	8004e3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d7e:	e02e      	b.n	8004dde <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d80:	4b33      	ldr	r3, [pc, #204]	; (8004e50 <xTaskResumeAll+0x11c>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3318      	adds	r3, #24
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fd73 	bl	8004878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fd6e 	bl	8004878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	2201      	movs	r2, #1
 8004da2:	409a      	lsls	r2, r3
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <xTaskResumeAll+0x120>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <xTaskResumeAll+0x120>)
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4a27      	ldr	r2, [pc, #156]	; (8004e58 <xTaskResumeAll+0x124>)
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7ff fcfc 	bl	80047c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <xTaskResumeAll+0x128>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d302      	bcc.n	8004dde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <xTaskResumeAll+0x12c>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dde:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <xTaskResumeAll+0x11c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1cc      	bne.n	8004d80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dec:	f000 fa06 	bl	80051fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <xTaskResumeAll+0x130>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d010      	beq.n	8004e1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dfc:	f000 f836 	bl	8004e6c <xTaskIncrementTick>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <xTaskResumeAll+0x12c>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f1      	bne.n	8004dfc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <xTaskResumeAll+0x130>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <xTaskResumeAll+0x12c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e26:	2301      	movs	r3, #1
 8004e28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <xTaskResumeAll+0x134>)
 8004e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e3a:	f000 fba7 	bl	800558c <vPortExitCritical>

	return xAlreadyYielded;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000618 	.word	0x20000618
 8004e4c:	200005f0 	.word	0x200005f0
 8004e50:	200005b0 	.word	0x200005b0
 8004e54:	200005f8 	.word	0x200005f8
 8004e58:	200004f4 	.word	0x200004f4
 8004e5c:	200004f0 	.word	0x200004f0
 8004e60:	20000604 	.word	0x20000604
 8004e64:	20000600 	.word	0x20000600
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e76:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <xTaskIncrementTick+0x144>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 808e 	bne.w	8004f9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e80:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <xTaskIncrementTick+0x148>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e88:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <xTaskIncrementTick+0x148>)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d120      	bne.n	8004ed6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e94:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	603b      	str	r3, [r7, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <xTaskIncrementTick+0x46>
 8004eb4:	4b40      	ldr	r3, [pc, #256]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	4b40      	ldr	r3, [pc, #256]	; (8004fbc <xTaskIncrementTick+0x150>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a3e      	ldr	r2, [pc, #248]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4a3e      	ldr	r2, [pc, #248]	; (8004fbc <xTaskIncrementTick+0x150>)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b3d      	ldr	r3, [pc, #244]	; (8004fc0 <xTaskIncrementTick+0x154>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <xTaskIncrementTick+0x154>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	f000 f993 	bl	80051fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d348      	bcc.n	8004f72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ee0:	4b35      	ldr	r3, [pc, #212]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eea:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	601a      	str	r2, [r3, #0]
					break;
 8004ef2:	e03e      	b.n	8004f72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <xTaskIncrementTick+0x14c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d203      	bcs.n	8004f14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	; (8004fc4 <xTaskIncrementTick+0x158>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f12:	e02e      	b.n	8004f72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fcad 	bl	8004878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3318      	adds	r3, #24
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fca4 	bl	8004878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	2201      	movs	r2, #1
 8004f36:	409a      	lsls	r2, r3
 8004f38:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <xTaskIncrementTick+0x15c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	4a22      	ldr	r2, [pc, #136]	; (8004fc8 <xTaskIncrementTick+0x15c>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <xTaskIncrementTick+0x160>)
 8004f50:	441a      	add	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7ff fc32 	bl	80047c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <xTaskIncrementTick+0x164>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3b9      	bcc.n	8004ee0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f70:	e7b6      	b.n	8004ee0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <xTaskIncrementTick+0x164>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4914      	ldr	r1, [pc, #80]	; (8004fcc <xTaskIncrementTick+0x160>)
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d901      	bls.n	8004f8e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <xTaskIncrementTick+0x168>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004f96:	2301      	movs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e004      	b.n	8004fa6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <xTaskIncrementTick+0x16c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <xTaskIncrementTick+0x16c>)
 8004fa4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fa6:	697b      	ldr	r3, [r7, #20]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000618 	.word	0x20000618
 8004fb4:	200005f4 	.word	0x200005f4
 8004fb8:	200005a8 	.word	0x200005a8
 8004fbc:	200005ac 	.word	0x200005ac
 8004fc0:	20000608 	.word	0x20000608
 8004fc4:	20000610 	.word	0x20000610
 8004fc8:	200005f8 	.word	0x200005f8
 8004fcc:	200004f4 	.word	0x200004f4
 8004fd0:	200004f0 	.word	0x200004f0
 8004fd4:	20000604 	.word	0x20000604
 8004fd8:	20000600 	.word	0x20000600

08004fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fe2:	4b26      	ldr	r3, [pc, #152]	; (800507c <vTaskSwitchContext+0xa0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fea:	4b25      	ldr	r3, [pc, #148]	; (8005080 <vTaskSwitchContext+0xa4>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ff0:	e03f      	b.n	8005072 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004ff2:	4b23      	ldr	r3, [pc, #140]	; (8005080 <vTaskSwitchContext+0xa4>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff8:	4b22      	ldr	r3, [pc, #136]	; (8005084 <vTaskSwitchContext+0xa8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	fab3 f383 	clz	r3, r3
 8005004:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	f1c3 031f 	rsb	r3, r3, #31
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	491e      	ldr	r1, [pc, #120]	; (8005088 <vTaskSwitchContext+0xac>)
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	607b      	str	r3, [r7, #4]
}
 8005034:	bf00      	nop
 8005036:	e7fe      	b.n	8005036 <vTaskSwitchContext+0x5a>
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4a11      	ldr	r2, [pc, #68]	; (8005088 <vTaskSwitchContext+0xac>)
 8005044:	4413      	add	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3308      	adds	r3, #8
 800505a:	429a      	cmp	r2, r3
 800505c:	d104      	bne.n	8005068 <vTaskSwitchContext+0x8c>
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	4a07      	ldr	r2, [pc, #28]	; (800508c <vTaskSwitchContext+0xb0>)
 8005070:	6013      	str	r3, [r2, #0]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	20000618 	.word	0x20000618
 8005080:	20000604 	.word	0x20000604
 8005084:	200005f8 	.word	0x200005f8
 8005088:	200004f4 	.word	0x200004f4
 800508c:	200004f0 	.word	0x200004f0

08005090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005098:	f000 f852 	bl	8005140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <prvIdleTask+0x28>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d9f9      	bls.n	8005098 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <prvIdleTask+0x2c>)
 80050a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050b4:	e7f0      	b.n	8005098 <prvIdleTask+0x8>
 80050b6:	bf00      	nop
 80050b8:	200004f4 	.word	0x200004f4
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050c6:	2300      	movs	r3, #0
 80050c8:	607b      	str	r3, [r7, #4]
 80050ca:	e00c      	b.n	80050e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <prvInitialiseTaskLists+0x60>)
 80050d8:	4413      	add	r3, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fb46 	bl	800476c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3301      	adds	r3, #1
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b06      	cmp	r3, #6
 80050ea:	d9ef      	bls.n	80050cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050ec:	480d      	ldr	r0, [pc, #52]	; (8005124 <prvInitialiseTaskLists+0x64>)
 80050ee:	f7ff fb3d 	bl	800476c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050f2:	480d      	ldr	r0, [pc, #52]	; (8005128 <prvInitialiseTaskLists+0x68>)
 80050f4:	f7ff fb3a 	bl	800476c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050f8:	480c      	ldr	r0, [pc, #48]	; (800512c <prvInitialiseTaskLists+0x6c>)
 80050fa:	f7ff fb37 	bl	800476c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050fe:	480c      	ldr	r0, [pc, #48]	; (8005130 <prvInitialiseTaskLists+0x70>)
 8005100:	f7ff fb34 	bl	800476c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005104:	480b      	ldr	r0, [pc, #44]	; (8005134 <prvInitialiseTaskLists+0x74>)
 8005106:	f7ff fb31 	bl	800476c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <prvInitialiseTaskLists+0x78>)
 800510c:	4a05      	ldr	r2, [pc, #20]	; (8005124 <prvInitialiseTaskLists+0x64>)
 800510e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <prvInitialiseTaskLists+0x7c>)
 8005112:	4a05      	ldr	r2, [pc, #20]	; (8005128 <prvInitialiseTaskLists+0x68>)
 8005114:	601a      	str	r2, [r3, #0]
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	200004f4 	.word	0x200004f4
 8005124:	20000580 	.word	0x20000580
 8005128:	20000594 	.word	0x20000594
 800512c:	200005b0 	.word	0x200005b0
 8005130:	200005c4 	.word	0x200005c4
 8005134:	200005dc 	.word	0x200005dc
 8005138:	200005a8 	.word	0x200005a8
 800513c:	200005ac 	.word	0x200005ac

08005140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005146:	e019      	b.n	800517c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005148:	f000 f9f0 	bl	800552c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514c:	4b10      	ldr	r3, [pc, #64]	; (8005190 <prvCheckTasksWaitingTermination+0x50>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fb8d 	bl	8004878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <prvCheckTasksWaitingTermination+0x54>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3b01      	subs	r3, #1
 8005164:	4a0b      	ldr	r2, [pc, #44]	; (8005194 <prvCheckTasksWaitingTermination+0x54>)
 8005166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <prvCheckTasksWaitingTermination+0x58>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3b01      	subs	r3, #1
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <prvCheckTasksWaitingTermination+0x58>)
 8005170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005172:	f000 fa0b 	bl	800558c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f810 	bl	800519c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <prvCheckTasksWaitingTermination+0x58>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e1      	bne.n	8005148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200005c4 	.word	0x200005c4
 8005194:	200005f0 	.word	0x200005f0
 8005198:	200005d8 	.word	0x200005d8

0800519c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d108      	bne.n	80051c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fb48 	bl	8005848 <vPortFree>
				vPortFree( pxTCB );
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fb45 	bl	8005848 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051be:	e018      	b.n	80051f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d103      	bne.n	80051d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb3c 	bl	8005848 <vPortFree>
	}
 80051d0:	e00f      	b.n	80051f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d00a      	beq.n	80051f2 <prvDeleteTCB+0x56>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <prvDeleteTCB+0x54>
	}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005202:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <prvResetNextTaskUnblockTime+0x38>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <prvResetNextTaskUnblockTime+0x3c>)
 800520e:	f04f 32ff 	mov.w	r2, #4294967295
 8005212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005214:	e008      	b.n	8005228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005216:	4b07      	ldr	r3, [pc, #28]	; (8005234 <prvResetNextTaskUnblockTime+0x38>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4a04      	ldr	r2, [pc, #16]	; (8005238 <prvResetNextTaskUnblockTime+0x3c>)
 8005226:	6013      	str	r3, [r2, #0]
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	200005a8 	.word	0x200005a8
 8005238:	20000610 	.word	0x20000610

0800523c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <xTaskGetSchedulerState+0x34>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800524a:	2301      	movs	r3, #1
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	e008      	b.n	8005262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005250:	4b08      	ldr	r3, [pc, #32]	; (8005274 <xTaskGetSchedulerState+0x38>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005258:	2302      	movs	r3, #2
 800525a:	607b      	str	r3, [r7, #4]
 800525c:	e001      	b.n	8005262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005262:	687b      	ldr	r3, [r7, #4]
	}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	200005fc 	.word	0x200005fc
 8005274:	20000618 	.word	0x20000618

08005278 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005282:	4b29      	ldr	r3, [pc, #164]	; (8005328 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005288:	4b28      	ldr	r3, [pc, #160]	; (800532c <prvAddCurrentTaskToDelayedList+0xb4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3304      	adds	r3, #4
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff faf2 	bl	8004878 <uxListRemove>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800529a:	4b24      	ldr	r3, [pc, #144]	; (800532c <prvAddCurrentTaskToDelayedList+0xb4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	2201      	movs	r2, #1
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43da      	mvns	r2, r3
 80052a8:	4b21      	ldr	r3, [pc, #132]	; (8005330 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4013      	ands	r3, r2
 80052ae:	4a20      	ldr	r2, [pc, #128]	; (8005330 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d10a      	bne.n	80052d0 <prvAddCurrentTaskToDelayedList+0x58>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <prvAddCurrentTaskToDelayedList+0xb4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	481a      	ldr	r0, [pc, #104]	; (8005334 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052ca:	f7ff fa7a 	bl	80047c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052ce:	e026      	b.n	800531e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052d8:	4b14      	ldr	r3, [pc, #80]	; (800532c <prvAddCurrentTaskToDelayedList+0xb4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d209      	bcs.n	80052fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e8:	4b13      	ldr	r3, [pc, #76]	; (8005338 <prvAddCurrentTaskToDelayedList+0xc0>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b0f      	ldr	r3, [pc, #60]	; (800532c <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f7ff fa87 	bl	8004808 <vListInsert>
}
 80052fa:	e010      	b.n	800531e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <prvAddCurrentTaskToDelayedList+0xc4>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3304      	adds	r3, #4
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f7ff fa7d 	bl	8004808 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	429a      	cmp	r2, r3
 8005316:	d202      	bcs.n	800531e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <prvAddCurrentTaskToDelayedList+0xc8>)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	6013      	str	r3, [r2, #0]
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	200005f4 	.word	0x200005f4
 800532c:	200004f0 	.word	0x200004f0
 8005330:	200005f8 	.word	0x200005f8
 8005334:	200005dc 	.word	0x200005dc
 8005338:	200005ac 	.word	0x200005ac
 800533c:	200005a8 	.word	0x200005a8
 8005340:	20000610 	.word	0x20000610

08005344 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3b04      	subs	r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800535c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b04      	subs	r3, #4
 8005362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f023 0201 	bic.w	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3b04      	subs	r3, #4
 8005372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <pxPortInitialiseStack+0x54>)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3b14      	subs	r3, #20
 800537e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3b20      	subs	r3, #32
 800538a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800538c:	68fb      	ldr	r3, [r7, #12]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr
 8005398:	0800539d 	.word	0x0800539d

0800539c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <prvTaskExitError+0x54>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d00a      	beq.n	80053c6 <prvTaskExitError+0x2a>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <prvTaskExitError+0x28>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60bb      	str	r3, [r7, #8]
}
 80053d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053da:	bf00      	nop
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0fc      	beq.n	80053dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000018 	.word	0x20000018
	...

08005400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <pxCurrentTCBConst2>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	6808      	ldr	r0, [r1, #0]
 8005406:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800540a:	f380 8809 	msr	PSP, r0
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	f04e 0e0d 	orr.w	lr, lr, #13
 800541e:	4770      	bx	lr

08005420 <pxCurrentTCBConst2>:
 8005420:	200004f0 	.word	0x200004f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop

08005428 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005428:	4806      	ldr	r0, [pc, #24]	; (8005444 <prvPortStartFirstTask+0x1c>)
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	6800      	ldr	r0, [r0, #0]
 800542e:	f380 8808 	msr	MSP, r0
 8005432:	b662      	cpsie	i
 8005434:	b661      	cpsie	f
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	df00      	svc	0
 8005440:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005442:	bf00      	nop
 8005444:	e000ed08 	.word	0xe000ed08

08005448 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800544e:	4b32      	ldr	r3, [pc, #200]	; (8005518 <xPortStartScheduler+0xd0>)
 8005450:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005470:	b2da      	uxtb	r2, r3
 8005472:	4b2a      	ldr	r3, [pc, #168]	; (800551c <xPortStartScheduler+0xd4>)
 8005474:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005476:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <xPortStartScheduler+0xd8>)
 8005478:	2207      	movs	r2, #7
 800547a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800547c:	e009      	b.n	8005492 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800547e:	4b28      	ldr	r3, [pc, #160]	; (8005520 <xPortStartScheduler+0xd8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3b01      	subs	r3, #1
 8005484:	4a26      	ldr	r2, [pc, #152]	; (8005520 <xPortStartScheduler+0xd8>)
 8005486:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d0ef      	beq.n	800547e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <xPortStartScheduler+0xd8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1c3 0307 	rsb	r3, r3, #7
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d00a      	beq.n	80054c0 <xPortStartScheduler+0x78>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	60bb      	str	r3, [r7, #8]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <xPortStartScheduler+0xd8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <xPortStartScheduler+0xd8>)
 80054c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054ca:	4b15      	ldr	r3, [pc, #84]	; (8005520 <xPortStartScheduler+0xd8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054d2:	4a13      	ldr	r2, [pc, #76]	; (8005520 <xPortStartScheduler+0xd8>)
 80054d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054de:	4b11      	ldr	r3, [pc, #68]	; (8005524 <xPortStartScheduler+0xdc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a10      	ldr	r2, [pc, #64]	; (8005524 <xPortStartScheduler+0xdc>)
 80054e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054ea:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <xPortStartScheduler+0xdc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <xPortStartScheduler+0xdc>)
 80054f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054f6:	f000 f8b9 	bl	800566c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <xPortStartScheduler+0xe0>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005500:	f7ff ff92 	bl	8005428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005504:	f7ff fd6a 	bl	8004fdc <vTaskSwitchContext>
	prvTaskExitError();
 8005508:	f7ff ff48 	bl	800539c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	e000e400 	.word	0xe000e400
 800551c:	2000061c 	.word	0x2000061c
 8005520:	20000620 	.word	0x20000620
 8005524:	e000ed20 	.word	0xe000ed20
 8005528:	20000018 	.word	0x20000018

0800552c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	607b      	str	r3, [r7, #4]
}
 8005544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005546:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <vPortEnterCritical+0x58>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3301      	adds	r3, #1
 800554c:	4a0d      	ldr	r2, [pc, #52]	; (8005584 <vPortEnterCritical+0x58>)
 800554e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <vPortEnterCritical+0x58>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10f      	bne.n	8005578 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005558:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <vPortEnterCritical+0x5c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <vPortEnterCritical+0x4c>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	603b      	str	r3, [r7, #0]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <vPortEnterCritical+0x4a>
	}
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000018 	.word	0x20000018
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005592:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <vPortExitCritical+0x4c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <vPortExitCritical+0x24>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	607b      	str	r3, [r7, #4]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <vPortExitCritical+0x4c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	4a08      	ldr	r2, [pc, #32]	; (80055d8 <vPortExitCritical+0x4c>)
 80055b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <vPortExitCritical+0x4c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d105      	bne.n	80055ce <vPortExitCritical+0x42>
 80055c2:	2300      	movs	r3, #0
 80055c4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	20000018 	.word	0x20000018
 80055dc:	00000000 	.word	0x00000000

080055e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055e0:	f3ef 8009 	mrs	r0, PSP
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <pxCurrentTCBConst>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055f0:	6010      	str	r0, [r2, #0]
 80055f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80055f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055fa:	f380 8811 	msr	BASEPRI, r0
 80055fe:	f7ff fced 	bl	8004fdc <vTaskSwitchContext>
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f380 8811 	msr	BASEPRI, r0
 800560a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	6808      	ldr	r0, [r1, #0]
 8005612:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005616:	f380 8809 	msr	PSP, r0
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	4770      	bx	lr

08005620 <pxCurrentTCBConst>:
 8005620:	200004f0 	.word	0x200004f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
}
 8005640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005642:	f7ff fc13 	bl	8004e6c <xTaskIncrementTick>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <xPortSysTickHandler+0x40>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f383 8811 	msr	BASEPRI, r3
}
 800565e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <vPortSetupTimerInterrupt+0x30>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <vPortSetupTimerInterrupt+0x38>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <vPortSetupTimerInterrupt+0x3c>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	4a08      	ldr	r2, [pc, #32]	; (80056ac <vPortSetupTimerInterrupt+0x40>)
 800568a:	3b01      	subs	r3, #1
 800568c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800568e:	4b03      	ldr	r3, [pc, #12]	; (800569c <vPortSetupTimerInterrupt+0x30>)
 8005690:	2207      	movs	r2, #7
 8005692:	601a      	str	r2, [r3, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr
 800569c:	e000e010 	.word	0xe000e010
 80056a0:	e000e018 	.word	0xe000e018
 80056a4:	2000000c 	.word	0x2000000c
 80056a8:	10624dd3 	.word	0x10624dd3
 80056ac:	e000e014 	.word	0xe000e014

080056b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	; 0x28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056bc:	f7ff fb2c 	bl	8004d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056c0:	4b5b      	ldr	r3, [pc, #364]	; (8005830 <pvPortMalloc+0x180>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056c8:	f000 f920 	bl	800590c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056cc:	4b59      	ldr	r3, [pc, #356]	; (8005834 <pvPortMalloc+0x184>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f040 8093 	bne.w	8005800 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01d      	beq.n	800571c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056e0:	2208      	movs	r2, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4413      	add	r3, r2
 80056e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d014      	beq.n	800571c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f023 0307 	bic.w	r3, r3, #7
 80056f8:	3308      	adds	r3, #8
 80056fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <pvPortMalloc+0x6c>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	617b      	str	r3, [r7, #20]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d06e      	beq.n	8005800 <pvPortMalloc+0x150>
 8005722:	4b45      	ldr	r3, [pc, #276]	; (8005838 <pvPortMalloc+0x188>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d869      	bhi.n	8005800 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800572c:	4b43      	ldr	r3, [pc, #268]	; (800583c <pvPortMalloc+0x18c>)
 800572e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005730:	4b42      	ldr	r3, [pc, #264]	; (800583c <pvPortMalloc+0x18c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005736:	e004      	b.n	8005742 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d903      	bls.n	8005754 <pvPortMalloc+0xa4>
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f1      	bne.n	8005738 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005754:	4b36      	ldr	r3, [pc, #216]	; (8005830 <pvPortMalloc+0x180>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	429a      	cmp	r2, r3
 800575c:	d050      	beq.n	8005800 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2208      	movs	r2, #8
 8005764:	4413      	add	r3, r2
 8005766:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	2308      	movs	r3, #8
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	429a      	cmp	r2, r3
 800577e:	d91f      	bls.n	80057c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4413      	add	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <pvPortMalloc+0xf8>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	613b      	str	r3, [r7, #16]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057ba:	69b8      	ldr	r0, [r7, #24]
 80057bc:	f000 f908 	bl	80059d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057c0:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <pvPortMalloc+0x188>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <pvPortMalloc+0x188>)
 80057cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057ce:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <pvPortMalloc+0x188>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <pvPortMalloc+0x190>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d203      	bcs.n	80057e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057da:	4b17      	ldr	r3, [pc, #92]	; (8005838 <pvPortMalloc+0x188>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a18      	ldr	r2, [pc, #96]	; (8005840 <pvPortMalloc+0x190>)
 80057e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4b13      	ldr	r3, [pc, #76]	; (8005834 <pvPortMalloc+0x184>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057f6:	4b13      	ldr	r3, [pc, #76]	; (8005844 <pvPortMalloc+0x194>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	4a11      	ldr	r2, [pc, #68]	; (8005844 <pvPortMalloc+0x194>)
 80057fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005800:	f7ff fa98 	bl	8004d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <pvPortMalloc+0x174>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60fb      	str	r3, [r7, #12]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <pvPortMalloc+0x172>
	return pvReturn;
 8005824:	69fb      	ldr	r3, [r7, #28]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3728      	adds	r7, #40	; 0x28
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	2000122c 	.word	0x2000122c
 8005834:	20001240 	.word	0x20001240
 8005838:	20001230 	.word	0x20001230
 800583c:	20001224 	.word	0x20001224
 8005840:	20001234 	.word	0x20001234
 8005844:	20001238 	.word	0x20001238

08005848 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d04d      	beq.n	80058f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800585a:	2308      	movs	r3, #8
 800585c:	425b      	negs	r3, r3
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	4b24      	ldr	r3, [pc, #144]	; (8005900 <vPortFree+0xb8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <vPortFree+0x44>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60fb      	str	r3, [r7, #12]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <vPortFree+0x62>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	60bb      	str	r3, [r7, #8]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <vPortFree+0xb8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01e      	beq.n	80058f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11a      	bne.n	80058f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <vPortFree+0xb8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	401a      	ands	r2, r3
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058d0:	f7ff fa22 	bl	8004d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <vPortFree+0xbc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4413      	add	r3, r2
 80058de:	4a09      	ldr	r2, [pc, #36]	; (8005904 <vPortFree+0xbc>)
 80058e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058e2:	6938      	ldr	r0, [r7, #16]
 80058e4:	f000 f874 	bl	80059d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058e8:	4b07      	ldr	r3, [pc, #28]	; (8005908 <vPortFree+0xc0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a06      	ldr	r2, [pc, #24]	; (8005908 <vPortFree+0xc0>)
 80058f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058f2:	f7ff fa1f 	bl	8004d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058f6:	bf00      	nop
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20001240 	.word	0x20001240
 8005904:	20001230 	.word	0x20001230
 8005908:	2000123c 	.word	0x2000123c

0800590c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005912:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005916:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <prvHeapInit+0xac>)
 800591a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00c      	beq.n	8005940 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3307      	adds	r3, #7
 800592a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0307 	bic.w	r3, r3, #7
 8005932:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <prvHeapInit+0xac>)
 800593c:	4413      	add	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005944:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <prvHeapInit+0xb0>)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800594a:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <prvHeapInit+0xb0>)
 800594c:	2200      	movs	r2, #0
 800594e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	4413      	add	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005958:	2208      	movs	r2, #8
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <prvHeapInit+0xb4>)
 800596c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <prvHeapInit+0xb4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <prvHeapInit+0xb4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	1ad2      	subs	r2, r2, r3
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800598c:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <prvHeapInit+0xb4>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4a0a      	ldr	r2, [pc, #40]	; (80059c4 <prvHeapInit+0xb8>)
 800599a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <prvHeapInit+0xbc>)
 80059a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <prvHeapInit+0xc0>)
 80059a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059aa:	601a      	str	r2, [r3, #0]
}
 80059ac:	bf00      	nop
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000624 	.word	0x20000624
 80059bc:	20001224 	.word	0x20001224
 80059c0:	2000122c 	.word	0x2000122c
 80059c4:	20001234 	.word	0x20001234
 80059c8:	20001230 	.word	0x20001230
 80059cc:	20001240 	.word	0x20001240

080059d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059d8:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <prvInsertBlockIntoFreeList+0xa8>)
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	e002      	b.n	80059e4 <prvInsertBlockIntoFreeList+0x14>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d8f7      	bhi.n	80059de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	4413      	add	r3, r2
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d108      	bne.n	8005a12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	441a      	add	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	441a      	add	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d118      	bne.n	8005a58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <prvInsertBlockIntoFreeList+0xac>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d00d      	beq.n	8005a4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	e008      	b.n	8005a60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <prvInsertBlockIntoFreeList+0xac>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	e003      	b.n	8005a60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d002      	beq.n	8005a6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	20001224 	.word	0x20001224
 8005a7c:	2000122c 	.word	0x2000122c

08005a80 <malloc>:
 8005a80:	4b02      	ldr	r3, [pc, #8]	; (8005a8c <malloc+0xc>)
 8005a82:	4601      	mov	r1, r0
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	f000 b82b 	b.w	8005ae0 <_malloc_r>
 8005a8a:	bf00      	nop
 8005a8c:	200001e0 	.word	0x200001e0

08005a90 <free>:
 8005a90:	4b02      	ldr	r3, [pc, #8]	; (8005a9c <free+0xc>)
 8005a92:	4601      	mov	r1, r0
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	f001 b8cb 	b.w	8006c30 <_free_r>
 8005a9a:	bf00      	nop
 8005a9c:	200001e0 	.word	0x200001e0

08005aa0 <sbrk_aligned>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4e0e      	ldr	r6, [pc, #56]	; (8005adc <sbrk_aligned+0x3c>)
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	6831      	ldr	r1, [r6, #0]
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	b911      	cbnz	r1, 8005ab2 <sbrk_aligned+0x12>
 8005aac:	f001 f85e 	bl	8006b6c <_sbrk_r>
 8005ab0:	6030      	str	r0, [r6, #0]
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f001 f859 	bl	8006b6c <_sbrk_r>
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	d00a      	beq.n	8005ad4 <sbrk_aligned+0x34>
 8005abe:	1cc4      	adds	r4, r0, #3
 8005ac0:	f024 0403 	bic.w	r4, r4, #3
 8005ac4:	42a0      	cmp	r0, r4
 8005ac6:	d007      	beq.n	8005ad8 <sbrk_aligned+0x38>
 8005ac8:	1a21      	subs	r1, r4, r0
 8005aca:	4628      	mov	r0, r5
 8005acc:	f001 f84e 	bl	8006b6c <_sbrk_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d101      	bne.n	8005ad8 <sbrk_aligned+0x38>
 8005ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ad8:	4620      	mov	r0, r4
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	20001248 	.word	0x20001248

08005ae0 <_malloc_r>:
 8005ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae4:	1ccd      	adds	r5, r1, #3
 8005ae6:	f025 0503 	bic.w	r5, r5, #3
 8005aea:	3508      	adds	r5, #8
 8005aec:	2d0c      	cmp	r5, #12
 8005aee:	bf38      	it	cc
 8005af0:	250c      	movcc	r5, #12
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	4607      	mov	r7, r0
 8005af6:	db01      	blt.n	8005afc <_malloc_r+0x1c>
 8005af8:	42a9      	cmp	r1, r5
 8005afa:	d905      	bls.n	8005b08 <_malloc_r+0x28>
 8005afc:	230c      	movs	r3, #12
 8005afe:	2600      	movs	r6, #0
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4630      	mov	r0, r6
 8005b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bdc <_malloc_r+0xfc>
 8005b0c:	f000 f868 	bl	8005be0 <__malloc_lock>
 8005b10:	f8d8 3000 	ldr.w	r3, [r8]
 8005b14:	461c      	mov	r4, r3
 8005b16:	bb5c      	cbnz	r4, 8005b70 <_malloc_r+0x90>
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	f7ff ffc0 	bl	8005aa0 <sbrk_aligned>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	4604      	mov	r4, r0
 8005b24:	d155      	bne.n	8005bd2 <_malloc_r+0xf2>
 8005b26:	f8d8 4000 	ldr.w	r4, [r8]
 8005b2a:	4626      	mov	r6, r4
 8005b2c:	2e00      	cmp	r6, #0
 8005b2e:	d145      	bne.n	8005bbc <_malloc_r+0xdc>
 8005b30:	2c00      	cmp	r4, #0
 8005b32:	d048      	beq.n	8005bc6 <_malloc_r+0xe6>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	4631      	mov	r1, r6
 8005b38:	4638      	mov	r0, r7
 8005b3a:	eb04 0903 	add.w	r9, r4, r3
 8005b3e:	f001 f815 	bl	8006b6c <_sbrk_r>
 8005b42:	4581      	cmp	r9, r0
 8005b44:	d13f      	bne.n	8005bc6 <_malloc_r+0xe6>
 8005b46:	6821      	ldr	r1, [r4, #0]
 8005b48:	4638      	mov	r0, r7
 8005b4a:	1a6d      	subs	r5, r5, r1
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	f7ff ffa7 	bl	8005aa0 <sbrk_aligned>
 8005b52:	3001      	adds	r0, #1
 8005b54:	d037      	beq.n	8005bc6 <_malloc_r+0xe6>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	442b      	add	r3, r5
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d038      	beq.n	8005bd6 <_malloc_r+0xf6>
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	42a2      	cmp	r2, r4
 8005b68:	d12b      	bne.n	8005bc2 <_malloc_r+0xe2>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	e00f      	b.n	8005b90 <_malloc_r+0xb0>
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	1b52      	subs	r2, r2, r5
 8005b74:	d41f      	bmi.n	8005bb6 <_malloc_r+0xd6>
 8005b76:	2a0b      	cmp	r2, #11
 8005b78:	d917      	bls.n	8005baa <_malloc_r+0xca>
 8005b7a:	1961      	adds	r1, r4, r5
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	6025      	str	r5, [r4, #0]
 8005b80:	bf18      	it	ne
 8005b82:	6059      	strne	r1, [r3, #4]
 8005b84:	6863      	ldr	r3, [r4, #4]
 8005b86:	bf08      	it	eq
 8005b88:	f8c8 1000 	streq.w	r1, [r8]
 8005b8c:	5162      	str	r2, [r4, r5]
 8005b8e:	604b      	str	r3, [r1, #4]
 8005b90:	4638      	mov	r0, r7
 8005b92:	f104 060b 	add.w	r6, r4, #11
 8005b96:	f000 f829 	bl	8005bec <__malloc_unlock>
 8005b9a:	f026 0607 	bic.w	r6, r6, #7
 8005b9e:	1d23      	adds	r3, r4, #4
 8005ba0:	1af2      	subs	r2, r6, r3
 8005ba2:	d0ae      	beq.n	8005b02 <_malloc_r+0x22>
 8005ba4:	1b9b      	subs	r3, r3, r6
 8005ba6:	50a3      	str	r3, [r4, r2]
 8005ba8:	e7ab      	b.n	8005b02 <_malloc_r+0x22>
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	6862      	ldr	r2, [r4, #4]
 8005bae:	d1dd      	bne.n	8005b6c <_malloc_r+0x8c>
 8005bb0:	f8c8 2000 	str.w	r2, [r8]
 8005bb4:	e7ec      	b.n	8005b90 <_malloc_r+0xb0>
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	6864      	ldr	r4, [r4, #4]
 8005bba:	e7ac      	b.n	8005b16 <_malloc_r+0x36>
 8005bbc:	4634      	mov	r4, r6
 8005bbe:	6876      	ldr	r6, [r6, #4]
 8005bc0:	e7b4      	b.n	8005b2c <_malloc_r+0x4c>
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	e7cc      	b.n	8005b60 <_malloc_r+0x80>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	4638      	mov	r0, r7
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	f000 f80e 	bl	8005bec <__malloc_unlock>
 8005bd0:	e797      	b.n	8005b02 <_malloc_r+0x22>
 8005bd2:	6025      	str	r5, [r4, #0]
 8005bd4:	e7dc      	b.n	8005b90 <_malloc_r+0xb0>
 8005bd6:	605b      	str	r3, [r3, #4]
 8005bd8:	deff      	udf	#255	; 0xff
 8005bda:	bf00      	nop
 8005bdc:	20001244 	.word	0x20001244

08005be0 <__malloc_lock>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__malloc_lock+0x8>)
 8005be2:	f001 b80f 	b.w	8006c04 <__retarget_lock_acquire_recursive>
 8005be6:	bf00      	nop
 8005be8:	2000138c 	.word	0x2000138c

08005bec <__malloc_unlock>:
 8005bec:	4801      	ldr	r0, [pc, #4]	; (8005bf4 <__malloc_unlock+0x8>)
 8005bee:	f001 b80a 	b.w	8006c06 <__retarget_lock_release_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	2000138c 	.word	0x2000138c

08005bf8 <realloc>:
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <realloc+0xc>)
 8005bfa:	460a      	mov	r2, r1
 8005bfc:	4601      	mov	r1, r0
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	f000 b802 	b.w	8005c08 <_realloc_r>
 8005c04:	200001e0 	.word	0x200001e0

08005c08 <_realloc_r>:
 8005c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	4614      	mov	r4, r2
 8005c10:	460e      	mov	r6, r1
 8005c12:	b921      	cbnz	r1, 8005c1e <_realloc_r+0x16>
 8005c14:	4611      	mov	r1, r2
 8005c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1a:	f7ff bf61 	b.w	8005ae0 <_malloc_r>
 8005c1e:	b92a      	cbnz	r2, 8005c2c <_realloc_r+0x24>
 8005c20:	f001 f806 	bl	8006c30 <_free_r>
 8005c24:	4625      	mov	r5, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c2c:	f002 f850 	bl	8007cd0 <_malloc_usable_size_r>
 8005c30:	4284      	cmp	r4, r0
 8005c32:	4607      	mov	r7, r0
 8005c34:	d802      	bhi.n	8005c3c <_realloc_r+0x34>
 8005c36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c3a:	d812      	bhi.n	8005c62 <_realloc_r+0x5a>
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f7ff ff4e 	bl	8005ae0 <_malloc_r>
 8005c44:	4605      	mov	r5, r0
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d0ed      	beq.n	8005c26 <_realloc_r+0x1e>
 8005c4a:	42bc      	cmp	r4, r7
 8005c4c:	4622      	mov	r2, r4
 8005c4e:	4631      	mov	r1, r6
 8005c50:	bf28      	it	cs
 8005c52:	463a      	movcs	r2, r7
 8005c54:	f000 ffd8 	bl	8006c08 <memcpy>
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	f000 ffe8 	bl	8006c30 <_free_r>
 8005c60:	e7e1      	b.n	8005c26 <_realloc_r+0x1e>
 8005c62:	4635      	mov	r5, r6
 8005c64:	e7df      	b.n	8005c26 <_realloc_r+0x1e>

08005c66 <sulp>:
 8005c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	4690      	mov	r8, r2
 8005c6e:	f001 feff 	bl	8007a70 <__ulp>
 8005c72:	4604      	mov	r4, r0
 8005c74:	460d      	mov	r5, r1
 8005c76:	f1b8 0f00 	cmp.w	r8, #0
 8005c7a:	d011      	beq.n	8005ca0 <sulp+0x3a>
 8005c7c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005c80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dd0b      	ble.n	8005ca0 <sulp+0x3a>
 8005c88:	2400      	movs	r4, #0
 8005c8a:	051b      	lsls	r3, r3, #20
 8005c8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005c90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005c94:	4622      	mov	r2, r4
 8005c96:	462b      	mov	r3, r5
 8005c98:	f7fa fc28 	bl	80004ec <__aeabi_dmul>
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ca8 <_strtod_l>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	b09f      	sub	sp, #124	; 0x7c
 8005cae:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	921a      	str	r2, [sp, #104]	; 0x68
 8005cb6:	460d      	mov	r5, r1
 8005cb8:	f04f 0800 	mov.w	r8, #0
 8005cbc:	f04f 0900 	mov.w	r9, #0
 8005cc0:	460a      	mov	r2, r1
 8005cc2:	9219      	str	r2, [sp, #100]	; 0x64
 8005cc4:	7811      	ldrb	r1, [r2, #0]
 8005cc6:	292b      	cmp	r1, #43	; 0x2b
 8005cc8:	d04a      	beq.n	8005d60 <_strtod_l+0xb8>
 8005cca:	d838      	bhi.n	8005d3e <_strtod_l+0x96>
 8005ccc:	290d      	cmp	r1, #13
 8005cce:	d832      	bhi.n	8005d36 <_strtod_l+0x8e>
 8005cd0:	2908      	cmp	r1, #8
 8005cd2:	d832      	bhi.n	8005d3a <_strtod_l+0x92>
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	d03b      	beq.n	8005d50 <_strtod_l+0xa8>
 8005cd8:	2200      	movs	r2, #0
 8005cda:	920e      	str	r2, [sp, #56]	; 0x38
 8005cdc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005cde:	7832      	ldrb	r2, [r6, #0]
 8005ce0:	2a30      	cmp	r2, #48	; 0x30
 8005ce2:	f040 80b2 	bne.w	8005e4a <_strtod_l+0x1a2>
 8005ce6:	7872      	ldrb	r2, [r6, #1]
 8005ce8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005cec:	2a58      	cmp	r2, #88	; 0x58
 8005cee:	d16e      	bne.n	8005dce <_strtod_l+0x126>
 8005cf0:	9302      	str	r3, [sp, #8]
 8005cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	ab1a      	add	r3, sp, #104	; 0x68
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	4a8c      	ldr	r2, [pc, #560]	; (8005f30 <_strtod_l+0x288>)
 8005cfe:	ab1b      	add	r3, sp, #108	; 0x6c
 8005d00:	a919      	add	r1, sp, #100	; 0x64
 8005d02:	f001 f845 	bl	8006d90 <__gethex>
 8005d06:	f010 070f 	ands.w	r7, r0, #15
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	d005      	beq.n	8005d1a <_strtod_l+0x72>
 8005d0e:	2f06      	cmp	r7, #6
 8005d10:	d128      	bne.n	8005d64 <_strtod_l+0xbc>
 8005d12:	2300      	movs	r3, #0
 8005d14:	3601      	adds	r6, #1
 8005d16:	9619      	str	r6, [sp, #100]	; 0x64
 8005d18:	930e      	str	r3, [sp, #56]	; 0x38
 8005d1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 85a0 	bne.w	8006862 <_strtod_l+0xbba>
 8005d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d24:	b1cb      	cbz	r3, 8005d5a <_strtod_l+0xb2>
 8005d26:	4642      	mov	r2, r8
 8005d28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	b01f      	add	sp, #124	; 0x7c
 8005d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d36:	2920      	cmp	r1, #32
 8005d38:	d1ce      	bne.n	8005cd8 <_strtod_l+0x30>
 8005d3a:	3201      	adds	r2, #1
 8005d3c:	e7c1      	b.n	8005cc2 <_strtod_l+0x1a>
 8005d3e:	292d      	cmp	r1, #45	; 0x2d
 8005d40:	d1ca      	bne.n	8005cd8 <_strtod_l+0x30>
 8005d42:	2101      	movs	r1, #1
 8005d44:	910e      	str	r1, [sp, #56]	; 0x38
 8005d46:	1c51      	adds	r1, r2, #1
 8005d48:	9119      	str	r1, [sp, #100]	; 0x64
 8005d4a:	7852      	ldrb	r2, [r2, #1]
 8005d4c:	2a00      	cmp	r2, #0
 8005d4e:	d1c5      	bne.n	8005cdc <_strtod_l+0x34>
 8005d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d52:	9519      	str	r5, [sp, #100]	; 0x64
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f040 8582 	bne.w	800685e <_strtod_l+0xbb6>
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	e7e5      	b.n	8005d2c <_strtod_l+0x84>
 8005d60:	2100      	movs	r1, #0
 8005d62:	e7ef      	b.n	8005d44 <_strtod_l+0x9c>
 8005d64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005d66:	b13a      	cbz	r2, 8005d78 <_strtod_l+0xd0>
 8005d68:	2135      	movs	r1, #53	; 0x35
 8005d6a:	a81c      	add	r0, sp, #112	; 0x70
 8005d6c:	f001 ff6c 	bl	8007c48 <__copybits>
 8005d70:	4620      	mov	r0, r4
 8005d72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005d74:	f001 fb50 	bl	8007418 <_Bfree>
 8005d78:	3f01      	subs	r7, #1
 8005d7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d7c:	2f04      	cmp	r7, #4
 8005d7e:	d806      	bhi.n	8005d8e <_strtod_l+0xe6>
 8005d80:	e8df f007 	tbb	[pc, r7]
 8005d84:	201d0314 	.word	0x201d0314
 8005d88:	14          	.byte	0x14
 8005d89:	00          	.byte	0x00
 8005d8a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005d8e:	05e9      	lsls	r1, r5, #23
 8005d90:	bf48      	it	mi
 8005d92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005d96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d9a:	0d1b      	lsrs	r3, r3, #20
 8005d9c:	051b      	lsls	r3, r3, #20
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1bb      	bne.n	8005d1a <_strtod_l+0x72>
 8005da2:	f000 ff05 	bl	8006bb0 <__errno>
 8005da6:	2322      	movs	r3, #34	; 0x22
 8005da8:	6003      	str	r3, [r0, #0]
 8005daa:	e7b6      	b.n	8005d1a <_strtod_l+0x72>
 8005dac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005db0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005db4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005db8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005dbc:	e7e7      	b.n	8005d8e <_strtod_l+0xe6>
 8005dbe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005f34 <_strtod_l+0x28c>
 8005dc2:	e7e4      	b.n	8005d8e <_strtod_l+0xe6>
 8005dc4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005dc8:	f04f 38ff 	mov.w	r8, #4294967295
 8005dcc:	e7df      	b.n	8005d8e <_strtod_l+0xe6>
 8005dce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	9219      	str	r2, [sp, #100]	; 0x64
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	2b30      	cmp	r3, #48	; 0x30
 8005dd8:	d0f9      	beq.n	8005dce <_strtod_l+0x126>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d09d      	beq.n	8005d1a <_strtod_l+0x72>
 8005dde:	2301      	movs	r3, #1
 8005de0:	f04f 0a00 	mov.w	sl, #0
 8005de4:	220a      	movs	r2, #10
 8005de6:	46d3      	mov	fp, sl
 8005de8:	9305      	str	r3, [sp, #20]
 8005dea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dec:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005df2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005df4:	7806      	ldrb	r6, [r0, #0]
 8005df6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005dfa:	b2d9      	uxtb	r1, r3
 8005dfc:	2909      	cmp	r1, #9
 8005dfe:	d926      	bls.n	8005e4e <_strtod_l+0x1a6>
 8005e00:	2201      	movs	r2, #1
 8005e02:	494d      	ldr	r1, [pc, #308]	; (8005f38 <_strtod_l+0x290>)
 8005e04:	f000 fe6b 	bl	8006ade <strncmp>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d030      	beq.n	8005e6e <_strtod_l+0x1c6>
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	4632      	mov	r2, r6
 8005e10:	4603      	mov	r3, r0
 8005e12:	465e      	mov	r6, fp
 8005e14:	9008      	str	r0, [sp, #32]
 8005e16:	2a65      	cmp	r2, #101	; 0x65
 8005e18:	d001      	beq.n	8005e1e <_strtod_l+0x176>
 8005e1a:	2a45      	cmp	r2, #69	; 0x45
 8005e1c:	d113      	bne.n	8005e46 <_strtod_l+0x19e>
 8005e1e:	b91e      	cbnz	r6, 8005e28 <_strtod_l+0x180>
 8005e20:	9a05      	ldr	r2, [sp, #20]
 8005e22:	4302      	orrs	r2, r0
 8005e24:	d094      	beq.n	8005d50 <_strtod_l+0xa8>
 8005e26:	2600      	movs	r6, #0
 8005e28:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005e2a:	1c6a      	adds	r2, r5, #1
 8005e2c:	9219      	str	r2, [sp, #100]	; 0x64
 8005e2e:	786a      	ldrb	r2, [r5, #1]
 8005e30:	2a2b      	cmp	r2, #43	; 0x2b
 8005e32:	d074      	beq.n	8005f1e <_strtod_l+0x276>
 8005e34:	2a2d      	cmp	r2, #45	; 0x2d
 8005e36:	d078      	beq.n	8005f2a <_strtod_l+0x282>
 8005e38:	f04f 0c00 	mov.w	ip, #0
 8005e3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e40:	2909      	cmp	r1, #9
 8005e42:	d97f      	bls.n	8005f44 <_strtod_l+0x29c>
 8005e44:	9519      	str	r5, [sp, #100]	; 0x64
 8005e46:	2700      	movs	r7, #0
 8005e48:	e09e      	b.n	8005f88 <_strtod_l+0x2e0>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e7c8      	b.n	8005de0 <_strtod_l+0x138>
 8005e4e:	f1bb 0f08 	cmp.w	fp, #8
 8005e52:	bfd8      	it	le
 8005e54:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8005e56:	f100 0001 	add.w	r0, r0, #1
 8005e5a:	bfd6      	itet	le
 8005e5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e60:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005e64:	930a      	strle	r3, [sp, #40]	; 0x28
 8005e66:	f10b 0b01 	add.w	fp, fp, #1
 8005e6a:	9019      	str	r0, [sp, #100]	; 0x64
 8005e6c:	e7c1      	b.n	8005df2 <_strtod_l+0x14a>
 8005e6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	9219      	str	r2, [sp, #100]	; 0x64
 8005e74:	785a      	ldrb	r2, [r3, #1]
 8005e76:	f1bb 0f00 	cmp.w	fp, #0
 8005e7a:	d037      	beq.n	8005eec <_strtod_l+0x244>
 8005e7c:	465e      	mov	r6, fp
 8005e7e:	9008      	str	r0, [sp, #32]
 8005e80:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005e84:	2b09      	cmp	r3, #9
 8005e86:	d912      	bls.n	8005eae <_strtod_l+0x206>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e7c4      	b.n	8005e16 <_strtod_l+0x16e>
 8005e8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e8e:	3001      	adds	r0, #1
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	9219      	str	r2, [sp, #100]	; 0x64
 8005e94:	785a      	ldrb	r2, [r3, #1]
 8005e96:	2a30      	cmp	r2, #48	; 0x30
 8005e98:	d0f8      	beq.n	8005e8c <_strtod_l+0x1e4>
 8005e9a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	f200 84e4 	bhi.w	800686c <_strtod_l+0xbc4>
 8005ea4:	9008      	str	r0, [sp, #32]
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005eac:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eae:	3a30      	subs	r2, #48	; 0x30
 8005eb0:	f100 0301 	add.w	r3, r0, #1
 8005eb4:	d014      	beq.n	8005ee0 <_strtod_l+0x238>
 8005eb6:	9908      	ldr	r1, [sp, #32]
 8005eb8:	eb00 0c06 	add.w	ip, r0, r6
 8005ebc:	4419      	add	r1, r3
 8005ebe:	9108      	str	r1, [sp, #32]
 8005ec0:	4633      	mov	r3, r6
 8005ec2:	210a      	movs	r1, #10
 8005ec4:	4563      	cmp	r3, ip
 8005ec6:	d113      	bne.n	8005ef0 <_strtod_l+0x248>
 8005ec8:	1833      	adds	r3, r6, r0
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	f106 0601 	add.w	r6, r6, #1
 8005ed0:	4406      	add	r6, r0
 8005ed2:	dc1a      	bgt.n	8005f0a <_strtod_l+0x262>
 8005ed4:	230a      	movs	r3, #10
 8005ed6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ed8:	fb03 2301 	mla	r3, r3, r1, r2
 8005edc:	930a      	str	r3, [sp, #40]	; 0x28
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	1c51      	adds	r1, r2, #1
 8005ee6:	9119      	str	r1, [sp, #100]	; 0x64
 8005ee8:	7852      	ldrb	r2, [r2, #1]
 8005eea:	e7c9      	b.n	8005e80 <_strtod_l+0x1d8>
 8005eec:	4658      	mov	r0, fp
 8005eee:	e7d2      	b.n	8005e96 <_strtod_l+0x1ee>
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	f103 0301 	add.w	r3, r3, #1
 8005ef6:	dc03      	bgt.n	8005f00 <_strtod_l+0x258>
 8005ef8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005efa:	434f      	muls	r7, r1
 8005efc:	970a      	str	r7, [sp, #40]	; 0x28
 8005efe:	e7e1      	b.n	8005ec4 <_strtod_l+0x21c>
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	bfd8      	it	le
 8005f04:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005f08:	e7dc      	b.n	8005ec4 <_strtod_l+0x21c>
 8005f0a:	2e10      	cmp	r6, #16
 8005f0c:	bfdc      	itt	le
 8005f0e:	230a      	movle	r3, #10
 8005f10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005f14:	e7e3      	b.n	8005ede <_strtod_l+0x236>
 8005f16:	2300      	movs	r3, #0
 8005f18:	9308      	str	r3, [sp, #32]
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e780      	b.n	8005e20 <_strtod_l+0x178>
 8005f1e:	f04f 0c00 	mov.w	ip, #0
 8005f22:	1caa      	adds	r2, r5, #2
 8005f24:	9219      	str	r2, [sp, #100]	; 0x64
 8005f26:	78aa      	ldrb	r2, [r5, #2]
 8005f28:	e788      	b.n	8005e3c <_strtod_l+0x194>
 8005f2a:	f04f 0c01 	mov.w	ip, #1
 8005f2e:	e7f8      	b.n	8005f22 <_strtod_l+0x27a>
 8005f30:	08008cb0 	.word	0x08008cb0
 8005f34:	7ff00000 	.word	0x7ff00000
 8005f38:	08008ca2 	.word	0x08008ca2
 8005f3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f3e:	1c51      	adds	r1, r2, #1
 8005f40:	9119      	str	r1, [sp, #100]	; 0x64
 8005f42:	7852      	ldrb	r2, [r2, #1]
 8005f44:	2a30      	cmp	r2, #48	; 0x30
 8005f46:	d0f9      	beq.n	8005f3c <_strtod_l+0x294>
 8005f48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005f4c:	2908      	cmp	r1, #8
 8005f4e:	f63f af7a 	bhi.w	8005e46 <_strtod_l+0x19e>
 8005f52:	3a30      	subs	r2, #48	; 0x30
 8005f54:	9209      	str	r2, [sp, #36]	; 0x24
 8005f56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f58:	920c      	str	r2, [sp, #48]	; 0x30
 8005f5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f5c:	1c57      	adds	r7, r2, #1
 8005f5e:	9719      	str	r7, [sp, #100]	; 0x64
 8005f60:	7852      	ldrb	r2, [r2, #1]
 8005f62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005f66:	f1be 0f09 	cmp.w	lr, #9
 8005f6a:	d938      	bls.n	8005fde <_strtod_l+0x336>
 8005f6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f6e:	1a7f      	subs	r7, r7, r1
 8005f70:	2f08      	cmp	r7, #8
 8005f72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005f76:	dc03      	bgt.n	8005f80 <_strtod_l+0x2d8>
 8005f78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f7a:	428f      	cmp	r7, r1
 8005f7c:	bfa8      	it	ge
 8005f7e:	460f      	movge	r7, r1
 8005f80:	f1bc 0f00 	cmp.w	ip, #0
 8005f84:	d000      	beq.n	8005f88 <_strtod_l+0x2e0>
 8005f86:	427f      	negs	r7, r7
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	d14f      	bne.n	800602c <_strtod_l+0x384>
 8005f8c:	9905      	ldr	r1, [sp, #20]
 8005f8e:	4301      	orrs	r1, r0
 8005f90:	f47f aec3 	bne.w	8005d1a <_strtod_l+0x72>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f47f aedb 	bne.w	8005d50 <_strtod_l+0xa8>
 8005f9a:	2a69      	cmp	r2, #105	; 0x69
 8005f9c:	d029      	beq.n	8005ff2 <_strtod_l+0x34a>
 8005f9e:	dc26      	bgt.n	8005fee <_strtod_l+0x346>
 8005fa0:	2a49      	cmp	r2, #73	; 0x49
 8005fa2:	d026      	beq.n	8005ff2 <_strtod_l+0x34a>
 8005fa4:	2a4e      	cmp	r2, #78	; 0x4e
 8005fa6:	f47f aed3 	bne.w	8005d50 <_strtod_l+0xa8>
 8005faa:	499a      	ldr	r1, [pc, #616]	; (8006214 <_strtod_l+0x56c>)
 8005fac:	a819      	add	r0, sp, #100	; 0x64
 8005fae:	f001 f931 	bl	8007214 <__match>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	f43f aecc 	beq.w	8005d50 <_strtod_l+0xa8>
 8005fb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b28      	cmp	r3, #40	; 0x28
 8005fbe:	d12f      	bne.n	8006020 <_strtod_l+0x378>
 8005fc0:	4995      	ldr	r1, [pc, #596]	; (8006218 <_strtod_l+0x570>)
 8005fc2:	aa1c      	add	r2, sp, #112	; 0x70
 8005fc4:	a819      	add	r0, sp, #100	; 0x64
 8005fc6:	f001 f939 	bl	800723c <__hexnan>
 8005fca:	2805      	cmp	r0, #5
 8005fcc:	d128      	bne.n	8006020 <_strtod_l+0x378>
 8005fce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fd0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005fd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005fd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005fdc:	e69d      	b.n	8005d1a <_strtod_l+0x72>
 8005fde:	210a      	movs	r1, #10
 8005fe0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005fe2:	fb01 2107 	mla	r1, r1, r7, r2
 8005fe6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005fea:	9209      	str	r2, [sp, #36]	; 0x24
 8005fec:	e7b5      	b.n	8005f5a <_strtod_l+0x2b2>
 8005fee:	2a6e      	cmp	r2, #110	; 0x6e
 8005ff0:	e7d9      	b.n	8005fa6 <_strtod_l+0x2fe>
 8005ff2:	498a      	ldr	r1, [pc, #552]	; (800621c <_strtod_l+0x574>)
 8005ff4:	a819      	add	r0, sp, #100	; 0x64
 8005ff6:	f001 f90d 	bl	8007214 <__match>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	f43f aea8 	beq.w	8005d50 <_strtod_l+0xa8>
 8006000:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006002:	4987      	ldr	r1, [pc, #540]	; (8006220 <_strtod_l+0x578>)
 8006004:	3b01      	subs	r3, #1
 8006006:	a819      	add	r0, sp, #100	; 0x64
 8006008:	9319      	str	r3, [sp, #100]	; 0x64
 800600a:	f001 f903 	bl	8007214 <__match>
 800600e:	b910      	cbnz	r0, 8006016 <_strtod_l+0x36e>
 8006010:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006012:	3301      	adds	r3, #1
 8006014:	9319      	str	r3, [sp, #100]	; 0x64
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006224 <_strtod_l+0x57c>
 800601e:	e67c      	b.n	8005d1a <_strtod_l+0x72>
 8006020:	4881      	ldr	r0, [pc, #516]	; (8006228 <_strtod_l+0x580>)
 8006022:	f000 fdff 	bl	8006c24 <nan>
 8006026:	4680      	mov	r8, r0
 8006028:	4689      	mov	r9, r1
 800602a:	e676      	b.n	8005d1a <_strtod_l+0x72>
 800602c:	9b08      	ldr	r3, [sp, #32]
 800602e:	f1bb 0f00 	cmp.w	fp, #0
 8006032:	bf08      	it	eq
 8006034:	46b3      	moveq	fp, r6
 8006036:	1afb      	subs	r3, r7, r3
 8006038:	2e10      	cmp	r6, #16
 800603a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800603c:	4635      	mov	r5, r6
 800603e:	9309      	str	r3, [sp, #36]	; 0x24
 8006040:	bfa8      	it	ge
 8006042:	2510      	movge	r5, #16
 8006044:	f7fa f9d8 	bl	80003f8 <__aeabi_ui2d>
 8006048:	2e09      	cmp	r6, #9
 800604a:	4680      	mov	r8, r0
 800604c:	4689      	mov	r9, r1
 800604e:	dd13      	ble.n	8006078 <_strtod_l+0x3d0>
 8006050:	4b76      	ldr	r3, [pc, #472]	; (800622c <_strtod_l+0x584>)
 8006052:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006056:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800605a:	f7fa fa47 	bl	80004ec <__aeabi_dmul>
 800605e:	4680      	mov	r8, r0
 8006060:	4650      	mov	r0, sl
 8006062:	4689      	mov	r9, r1
 8006064:	f7fa f9c8 	bl	80003f8 <__aeabi_ui2d>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	4640      	mov	r0, r8
 800606e:	4649      	mov	r1, r9
 8006070:	f7fa f886 	bl	8000180 <__adddf3>
 8006074:	4680      	mov	r8, r0
 8006076:	4689      	mov	r9, r1
 8006078:	2e0f      	cmp	r6, #15
 800607a:	dc36      	bgt.n	80060ea <_strtod_l+0x442>
 800607c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800607e:	2b00      	cmp	r3, #0
 8006080:	f43f ae4b 	beq.w	8005d1a <_strtod_l+0x72>
 8006084:	dd22      	ble.n	80060cc <_strtod_l+0x424>
 8006086:	2b16      	cmp	r3, #22
 8006088:	dc09      	bgt.n	800609e <_strtod_l+0x3f6>
 800608a:	4968      	ldr	r1, [pc, #416]	; (800622c <_strtod_l+0x584>)
 800608c:	4642      	mov	r2, r8
 800608e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006092:	464b      	mov	r3, r9
 8006094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006098:	f7fa fa28 	bl	80004ec <__aeabi_dmul>
 800609c:	e7c3      	b.n	8006026 <_strtod_l+0x37e>
 800609e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060a0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80060a4:	4293      	cmp	r3, r2
 80060a6:	db20      	blt.n	80060ea <_strtod_l+0x442>
 80060a8:	4c60      	ldr	r4, [pc, #384]	; (800622c <_strtod_l+0x584>)
 80060aa:	f1c6 060f 	rsb	r6, r6, #15
 80060ae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80060b2:	4642      	mov	r2, r8
 80060b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060b8:	464b      	mov	r3, r9
 80060ba:	f7fa fa17 	bl	80004ec <__aeabi_dmul>
 80060be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c0:	1b9e      	subs	r6, r3, r6
 80060c2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80060c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80060ca:	e7e5      	b.n	8006098 <_strtod_l+0x3f0>
 80060cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ce:	3316      	adds	r3, #22
 80060d0:	db0b      	blt.n	80060ea <_strtod_l+0x442>
 80060d2:	9b08      	ldr	r3, [sp, #32]
 80060d4:	4640      	mov	r0, r8
 80060d6:	1bdf      	subs	r7, r3, r7
 80060d8:	4b54      	ldr	r3, [pc, #336]	; (800622c <_strtod_l+0x584>)
 80060da:	4649      	mov	r1, r9
 80060dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80060e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e4:	f7fa fb2c 	bl	8000740 <__aeabi_ddiv>
 80060e8:	e79d      	b.n	8006026 <_strtod_l+0x37e>
 80060ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ec:	1b75      	subs	r5, r6, r5
 80060ee:	441d      	add	r5, r3
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	dd70      	ble.n	80061d6 <_strtod_l+0x52e>
 80060f4:	f015 030f 	ands.w	r3, r5, #15
 80060f8:	d00a      	beq.n	8006110 <_strtod_l+0x468>
 80060fa:	494c      	ldr	r1, [pc, #304]	; (800622c <_strtod_l+0x584>)
 80060fc:	4642      	mov	r2, r8
 80060fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006102:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006106:	464b      	mov	r3, r9
 8006108:	f7fa f9f0 	bl	80004ec <__aeabi_dmul>
 800610c:	4680      	mov	r8, r0
 800610e:	4689      	mov	r9, r1
 8006110:	f035 050f 	bics.w	r5, r5, #15
 8006114:	d04d      	beq.n	80061b2 <_strtod_l+0x50a>
 8006116:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800611a:	dd22      	ble.n	8006162 <_strtod_l+0x4ba>
 800611c:	2600      	movs	r6, #0
 800611e:	46b3      	mov	fp, r6
 8006120:	960b      	str	r6, [sp, #44]	; 0x2c
 8006122:	9608      	str	r6, [sp, #32]
 8006124:	2322      	movs	r3, #34	; 0x22
 8006126:	f04f 0800 	mov.w	r8, #0
 800612a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006224 <_strtod_l+0x57c>
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006132:	2b00      	cmp	r3, #0
 8006134:	f43f adf1 	beq.w	8005d1a <_strtod_l+0x72>
 8006138:	4620      	mov	r0, r4
 800613a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800613c:	f001 f96c 	bl	8007418 <_Bfree>
 8006140:	4620      	mov	r0, r4
 8006142:	9908      	ldr	r1, [sp, #32]
 8006144:	f001 f968 	bl	8007418 <_Bfree>
 8006148:	4659      	mov	r1, fp
 800614a:	4620      	mov	r0, r4
 800614c:	f001 f964 	bl	8007418 <_Bfree>
 8006150:	4620      	mov	r0, r4
 8006152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006154:	f001 f960 	bl	8007418 <_Bfree>
 8006158:	4631      	mov	r1, r6
 800615a:	4620      	mov	r0, r4
 800615c:	f001 f95c 	bl	8007418 <_Bfree>
 8006160:	e5db      	b.n	8005d1a <_strtod_l+0x72>
 8006162:	4b33      	ldr	r3, [pc, #204]	; (8006230 <_strtod_l+0x588>)
 8006164:	4640      	mov	r0, r8
 8006166:	9305      	str	r3, [sp, #20]
 8006168:	2300      	movs	r3, #0
 800616a:	4649      	mov	r1, r9
 800616c:	469a      	mov	sl, r3
 800616e:	112d      	asrs	r5, r5, #4
 8006170:	2d01      	cmp	r5, #1
 8006172:	dc21      	bgt.n	80061b8 <_strtod_l+0x510>
 8006174:	b10b      	cbz	r3, 800617a <_strtod_l+0x4d2>
 8006176:	4680      	mov	r8, r0
 8006178:	4689      	mov	r9, r1
 800617a:	492d      	ldr	r1, [pc, #180]	; (8006230 <_strtod_l+0x588>)
 800617c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006180:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006184:	4642      	mov	r2, r8
 8006186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800618a:	464b      	mov	r3, r9
 800618c:	f7fa f9ae 	bl	80004ec <__aeabi_dmul>
 8006190:	4b24      	ldr	r3, [pc, #144]	; (8006224 <_strtod_l+0x57c>)
 8006192:	460a      	mov	r2, r1
 8006194:	400b      	ands	r3, r1
 8006196:	4927      	ldr	r1, [pc, #156]	; (8006234 <_strtod_l+0x58c>)
 8006198:	4680      	mov	r8, r0
 800619a:	428b      	cmp	r3, r1
 800619c:	d8be      	bhi.n	800611c <_strtod_l+0x474>
 800619e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80061a2:	428b      	cmp	r3, r1
 80061a4:	bf86      	itte	hi
 80061a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80061aa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006238 <_strtod_l+0x590>
 80061ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80061b2:	2300      	movs	r3, #0
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	e07b      	b.n	80062b0 <_strtod_l+0x608>
 80061b8:	07ea      	lsls	r2, r5, #31
 80061ba:	d505      	bpl.n	80061c8 <_strtod_l+0x520>
 80061bc:	9b05      	ldr	r3, [sp, #20]
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f7fa f993 	bl	80004ec <__aeabi_dmul>
 80061c6:	2301      	movs	r3, #1
 80061c8:	9a05      	ldr	r2, [sp, #20]
 80061ca:	f10a 0a01 	add.w	sl, sl, #1
 80061ce:	3208      	adds	r2, #8
 80061d0:	106d      	asrs	r5, r5, #1
 80061d2:	9205      	str	r2, [sp, #20]
 80061d4:	e7cc      	b.n	8006170 <_strtod_l+0x4c8>
 80061d6:	d0ec      	beq.n	80061b2 <_strtod_l+0x50a>
 80061d8:	426d      	negs	r5, r5
 80061da:	f015 020f 	ands.w	r2, r5, #15
 80061de:	d00a      	beq.n	80061f6 <_strtod_l+0x54e>
 80061e0:	4b12      	ldr	r3, [pc, #72]	; (800622c <_strtod_l+0x584>)
 80061e2:	4640      	mov	r0, r8
 80061e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e8:	4649      	mov	r1, r9
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	f7fa faa7 	bl	8000740 <__aeabi_ddiv>
 80061f2:	4680      	mov	r8, r0
 80061f4:	4689      	mov	r9, r1
 80061f6:	112d      	asrs	r5, r5, #4
 80061f8:	d0db      	beq.n	80061b2 <_strtod_l+0x50a>
 80061fa:	2d1f      	cmp	r5, #31
 80061fc:	dd1e      	ble.n	800623c <_strtod_l+0x594>
 80061fe:	2600      	movs	r6, #0
 8006200:	46b3      	mov	fp, r6
 8006202:	960b      	str	r6, [sp, #44]	; 0x2c
 8006204:	9608      	str	r6, [sp, #32]
 8006206:	2322      	movs	r3, #34	; 0x22
 8006208:	f04f 0800 	mov.w	r8, #0
 800620c:	f04f 0900 	mov.w	r9, #0
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	e78d      	b.n	8006130 <_strtod_l+0x488>
 8006214:	08008cad 	.word	0x08008cad
 8006218:	08008cc4 	.word	0x08008cc4
 800621c:	08008ca4 	.word	0x08008ca4
 8006220:	08008ca7 	.word	0x08008ca7
 8006224:	7ff00000 	.word	0x7ff00000
 8006228:	0800905a 	.word	0x0800905a
 800622c:	08008f18 	.word	0x08008f18
 8006230:	08008ef0 	.word	0x08008ef0
 8006234:	7ca00000 	.word	0x7ca00000
 8006238:	7fefffff 	.word	0x7fefffff
 800623c:	f015 0310 	ands.w	r3, r5, #16
 8006240:	bf18      	it	ne
 8006242:	236a      	movne	r3, #106	; 0x6a
 8006244:	4640      	mov	r0, r8
 8006246:	9305      	str	r3, [sp, #20]
 8006248:	4649      	mov	r1, r9
 800624a:	2300      	movs	r3, #0
 800624c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006518 <_strtod_l+0x870>
 8006250:	07ea      	lsls	r2, r5, #31
 8006252:	d504      	bpl.n	800625e <_strtod_l+0x5b6>
 8006254:	e9da 2300 	ldrd	r2, r3, [sl]
 8006258:	f7fa f948 	bl	80004ec <__aeabi_dmul>
 800625c:	2301      	movs	r3, #1
 800625e:	106d      	asrs	r5, r5, #1
 8006260:	f10a 0a08 	add.w	sl, sl, #8
 8006264:	d1f4      	bne.n	8006250 <_strtod_l+0x5a8>
 8006266:	b10b      	cbz	r3, 800626c <_strtod_l+0x5c4>
 8006268:	4680      	mov	r8, r0
 800626a:	4689      	mov	r9, r1
 800626c:	9b05      	ldr	r3, [sp, #20]
 800626e:	b1bb      	cbz	r3, 80062a0 <_strtod_l+0x5f8>
 8006270:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006274:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006278:	2b00      	cmp	r3, #0
 800627a:	4649      	mov	r1, r9
 800627c:	dd10      	ble.n	80062a0 <_strtod_l+0x5f8>
 800627e:	2b1f      	cmp	r3, #31
 8006280:	f340 8128 	ble.w	80064d4 <_strtod_l+0x82c>
 8006284:	2b34      	cmp	r3, #52	; 0x34
 8006286:	bfd8      	it	le
 8006288:	f04f 33ff 	movle.w	r3, #4294967295
 800628c:	f04f 0800 	mov.w	r8, #0
 8006290:	bfcf      	iteee	gt
 8006292:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006296:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800629a:	4093      	lslle	r3, r2
 800629c:	ea03 0901 	andle.w	r9, r3, r1
 80062a0:	2200      	movs	r2, #0
 80062a2:	2300      	movs	r3, #0
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa fb88 	bl	80009bc <__aeabi_dcmpeq>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d1a6      	bne.n	80061fe <_strtod_l+0x556>
 80062b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b2:	465a      	mov	r2, fp
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	4620      	mov	r0, r4
 80062b8:	4633      	mov	r3, r6
 80062ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062bc:	f001 f914 	bl	80074e8 <__s2b>
 80062c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f43f af2a 	beq.w	800611c <_strtod_l+0x474>
 80062c8:	2600      	movs	r6, #0
 80062ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062cc:	9b08      	ldr	r3, [sp, #32]
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	eba3 0307 	sub.w	r3, r3, r7
 80062d4:	bfa8      	it	ge
 80062d6:	2300      	movge	r3, #0
 80062d8:	46b3      	mov	fp, r6
 80062da:	9312      	str	r3, [sp, #72]	; 0x48
 80062dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80062e0:	9316      	str	r3, [sp, #88]	; 0x58
 80062e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e4:	4620      	mov	r0, r4
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	f001 f856 	bl	8007398 <_Balloc>
 80062ec:	9008      	str	r0, [sp, #32]
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f43f af18 	beq.w	8006124 <_strtod_l+0x47c>
 80062f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062f6:	300c      	adds	r0, #12
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	f103 010c 	add.w	r1, r3, #12
 80062fe:	3202      	adds	r2, #2
 8006300:	0092      	lsls	r2, r2, #2
 8006302:	f000 fc81 	bl	8006c08 <memcpy>
 8006306:	ab1c      	add	r3, sp, #112	; 0x70
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	ab1b      	add	r3, sp, #108	; 0x6c
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	4620      	mov	r0, r4
 8006314:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006318:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800631c:	f001 fc10 	bl	8007b40 <__d2b>
 8006320:	901a      	str	r0, [sp, #104]	; 0x68
 8006322:	2800      	cmp	r0, #0
 8006324:	f43f aefe 	beq.w	8006124 <_strtod_l+0x47c>
 8006328:	2101      	movs	r1, #1
 800632a:	4620      	mov	r0, r4
 800632c:	f001 f974 	bl	8007618 <__i2b>
 8006330:	4683      	mov	fp, r0
 8006332:	2800      	cmp	r0, #0
 8006334:	f43f aef6 	beq.w	8006124 <_strtod_l+0x47c>
 8006338:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800633a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800633c:	2f00      	cmp	r7, #0
 800633e:	bfab      	itete	ge
 8006340:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006342:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006344:	eb07 0a03 	addge.w	sl, r7, r3
 8006348:	1bdd      	sublt	r5, r3, r7
 800634a:	9b05      	ldr	r3, [sp, #20]
 800634c:	bfa8      	it	ge
 800634e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006350:	eba7 0703 	sub.w	r7, r7, r3
 8006354:	4417      	add	r7, r2
 8006356:	4b71      	ldr	r3, [pc, #452]	; (800651c <_strtod_l+0x874>)
 8006358:	f107 37ff 	add.w	r7, r7, #4294967295
 800635c:	bfb8      	it	lt
 800635e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006362:	429f      	cmp	r7, r3
 8006364:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006368:	f280 80c7 	bge.w	80064fa <_strtod_l+0x852>
 800636c:	1bdb      	subs	r3, r3, r7
 800636e:	2b1f      	cmp	r3, #31
 8006370:	f04f 0101 	mov.w	r1, #1
 8006374:	eba2 0203 	sub.w	r2, r2, r3
 8006378:	f300 80b3 	bgt.w	80064e2 <_strtod_l+0x83a>
 800637c:	fa01 f303 	lsl.w	r3, r1, r3
 8006380:	9313      	str	r3, [sp, #76]	; 0x4c
 8006382:	2300      	movs	r3, #0
 8006384:	9310      	str	r3, [sp, #64]	; 0x40
 8006386:	eb0a 0702 	add.w	r7, sl, r2
 800638a:	9b05      	ldr	r3, [sp, #20]
 800638c:	45ba      	cmp	sl, r7
 800638e:	4415      	add	r5, r2
 8006390:	441d      	add	r5, r3
 8006392:	4653      	mov	r3, sl
 8006394:	bfa8      	it	ge
 8006396:	463b      	movge	r3, r7
 8006398:	42ab      	cmp	r3, r5
 800639a:	bfa8      	it	ge
 800639c:	462b      	movge	r3, r5
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bfc2      	ittt	gt
 80063a2:	1aff      	subgt	r7, r7, r3
 80063a4:	1aed      	subgt	r5, r5, r3
 80063a6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80063aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dd17      	ble.n	80063e0 <_strtod_l+0x738>
 80063b0:	4659      	mov	r1, fp
 80063b2:	461a      	mov	r2, r3
 80063b4:	4620      	mov	r0, r4
 80063b6:	f001 f9ed 	bl	8007794 <__pow5mult>
 80063ba:	4683      	mov	fp, r0
 80063bc:	2800      	cmp	r0, #0
 80063be:	f43f aeb1 	beq.w	8006124 <_strtod_l+0x47c>
 80063c2:	4601      	mov	r1, r0
 80063c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80063c6:	4620      	mov	r0, r4
 80063c8:	f001 f93c 	bl	8007644 <__multiply>
 80063cc:	900a      	str	r0, [sp, #40]	; 0x28
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f43f aea8 	beq.w	8006124 <_strtod_l+0x47c>
 80063d4:	4620      	mov	r0, r4
 80063d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063d8:	f001 f81e 	bl	8007418 <_Bfree>
 80063dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063de:	931a      	str	r3, [sp, #104]	; 0x68
 80063e0:	2f00      	cmp	r7, #0
 80063e2:	f300 808f 	bgt.w	8006504 <_strtod_l+0x85c>
 80063e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	dd08      	ble.n	80063fe <_strtod_l+0x756>
 80063ec:	4620      	mov	r0, r4
 80063ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063f0:	9908      	ldr	r1, [sp, #32]
 80063f2:	f001 f9cf 	bl	8007794 <__pow5mult>
 80063f6:	9008      	str	r0, [sp, #32]
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f43f ae93 	beq.w	8006124 <_strtod_l+0x47c>
 80063fe:	2d00      	cmp	r5, #0
 8006400:	dd08      	ble.n	8006414 <_strtod_l+0x76c>
 8006402:	462a      	mov	r2, r5
 8006404:	4620      	mov	r0, r4
 8006406:	9908      	ldr	r1, [sp, #32]
 8006408:	f001 fa1e 	bl	8007848 <__lshift>
 800640c:	9008      	str	r0, [sp, #32]
 800640e:	2800      	cmp	r0, #0
 8006410:	f43f ae88 	beq.w	8006124 <_strtod_l+0x47c>
 8006414:	f1ba 0f00 	cmp.w	sl, #0
 8006418:	dd08      	ble.n	800642c <_strtod_l+0x784>
 800641a:	4659      	mov	r1, fp
 800641c:	4652      	mov	r2, sl
 800641e:	4620      	mov	r0, r4
 8006420:	f001 fa12 	bl	8007848 <__lshift>
 8006424:	4683      	mov	fp, r0
 8006426:	2800      	cmp	r0, #0
 8006428:	f43f ae7c 	beq.w	8006124 <_strtod_l+0x47c>
 800642c:	4620      	mov	r0, r4
 800642e:	9a08      	ldr	r2, [sp, #32]
 8006430:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006432:	f001 fa91 	bl	8007958 <__mdiff>
 8006436:	4606      	mov	r6, r0
 8006438:	2800      	cmp	r0, #0
 800643a:	f43f ae73 	beq.w	8006124 <_strtod_l+0x47c>
 800643e:	2500      	movs	r5, #0
 8006440:	68c3      	ldr	r3, [r0, #12]
 8006442:	4659      	mov	r1, fp
 8006444:	60c5      	str	r5, [r0, #12]
 8006446:	930a      	str	r3, [sp, #40]	; 0x28
 8006448:	f001 fa6a 	bl	8007920 <__mcmp>
 800644c:	42a8      	cmp	r0, r5
 800644e:	da6b      	bge.n	8006528 <_strtod_l+0x880>
 8006450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006452:	ea53 0308 	orrs.w	r3, r3, r8
 8006456:	f040 808f 	bne.w	8006578 <_strtod_l+0x8d0>
 800645a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 808a 	bne.w	8006578 <_strtod_l+0x8d0>
 8006464:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006468:	0d1b      	lsrs	r3, r3, #20
 800646a:	051b      	lsls	r3, r3, #20
 800646c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006470:	f240 8082 	bls.w	8006578 <_strtod_l+0x8d0>
 8006474:	6973      	ldr	r3, [r6, #20]
 8006476:	b913      	cbnz	r3, 800647e <_strtod_l+0x7d6>
 8006478:	6933      	ldr	r3, [r6, #16]
 800647a:	2b01      	cmp	r3, #1
 800647c:	dd7c      	ble.n	8006578 <_strtod_l+0x8d0>
 800647e:	4631      	mov	r1, r6
 8006480:	2201      	movs	r2, #1
 8006482:	4620      	mov	r0, r4
 8006484:	f001 f9e0 	bl	8007848 <__lshift>
 8006488:	4659      	mov	r1, fp
 800648a:	4606      	mov	r6, r0
 800648c:	f001 fa48 	bl	8007920 <__mcmp>
 8006490:	2800      	cmp	r0, #0
 8006492:	dd71      	ble.n	8006578 <_strtod_l+0x8d0>
 8006494:	9905      	ldr	r1, [sp, #20]
 8006496:	464b      	mov	r3, r9
 8006498:	4a21      	ldr	r2, [pc, #132]	; (8006520 <_strtod_l+0x878>)
 800649a:	2900      	cmp	r1, #0
 800649c:	f000 808d 	beq.w	80065ba <_strtod_l+0x912>
 80064a0:	ea02 0109 	and.w	r1, r2, r9
 80064a4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064a8:	f300 8087 	bgt.w	80065ba <_strtod_l+0x912>
 80064ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80064b0:	f77f aea9 	ble.w	8006206 <_strtod_l+0x55e>
 80064b4:	4640      	mov	r0, r8
 80064b6:	4649      	mov	r1, r9
 80064b8:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <_strtod_l+0x87c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	f7fa f816 	bl	80004ec <__aeabi_dmul>
 80064c0:	4b17      	ldr	r3, [pc, #92]	; (8006520 <_strtod_l+0x878>)
 80064c2:	4680      	mov	r8, r0
 80064c4:	400b      	ands	r3, r1
 80064c6:	4689      	mov	r9, r1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f47f ae35 	bne.w	8006138 <_strtod_l+0x490>
 80064ce:	2322      	movs	r3, #34	; 0x22
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	e631      	b.n	8006138 <_strtod_l+0x490>
 80064d4:	f04f 32ff 	mov.w	r2, #4294967295
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	ea03 0808 	and.w	r8, r3, r8
 80064e0:	e6de      	b.n	80062a0 <_strtod_l+0x5f8>
 80064e2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80064e6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80064ea:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80064ee:	37e2      	adds	r7, #226	; 0xe2
 80064f0:	fa01 f307 	lsl.w	r3, r1, r7
 80064f4:	9310      	str	r3, [sp, #64]	; 0x40
 80064f6:	9113      	str	r1, [sp, #76]	; 0x4c
 80064f8:	e745      	b.n	8006386 <_strtod_l+0x6de>
 80064fa:	2300      	movs	r3, #0
 80064fc:	9310      	str	r3, [sp, #64]	; 0x40
 80064fe:	2301      	movs	r3, #1
 8006500:	9313      	str	r3, [sp, #76]	; 0x4c
 8006502:	e740      	b.n	8006386 <_strtod_l+0x6de>
 8006504:	463a      	mov	r2, r7
 8006506:	4620      	mov	r0, r4
 8006508:	991a      	ldr	r1, [sp, #104]	; 0x68
 800650a:	f001 f99d 	bl	8007848 <__lshift>
 800650e:	901a      	str	r0, [sp, #104]	; 0x68
 8006510:	2800      	cmp	r0, #0
 8006512:	f47f af68 	bne.w	80063e6 <_strtod_l+0x73e>
 8006516:	e605      	b.n	8006124 <_strtod_l+0x47c>
 8006518:	08008cd8 	.word	0x08008cd8
 800651c:	fffffc02 	.word	0xfffffc02
 8006520:	7ff00000 	.word	0x7ff00000
 8006524:	39500000 	.word	0x39500000
 8006528:	46ca      	mov	sl, r9
 800652a:	d165      	bne.n	80065f8 <_strtod_l+0x950>
 800652c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800652e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006532:	b352      	cbz	r2, 800658a <_strtod_l+0x8e2>
 8006534:	4a9e      	ldr	r2, [pc, #632]	; (80067b0 <_strtod_l+0xb08>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d12a      	bne.n	8006590 <_strtod_l+0x8e8>
 800653a:	9b05      	ldr	r3, [sp, #20]
 800653c:	4641      	mov	r1, r8
 800653e:	b1fb      	cbz	r3, 8006580 <_strtod_l+0x8d8>
 8006540:	4b9c      	ldr	r3, [pc, #624]	; (80067b4 <_strtod_l+0xb0c>)
 8006542:	f04f 32ff 	mov.w	r2, #4294967295
 8006546:	ea09 0303 	and.w	r3, r9, r3
 800654a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800654e:	d81a      	bhi.n	8006586 <_strtod_l+0x8de>
 8006550:	0d1b      	lsrs	r3, r3, #20
 8006552:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	4299      	cmp	r1, r3
 800655c:	d118      	bne.n	8006590 <_strtod_l+0x8e8>
 800655e:	4b96      	ldr	r3, [pc, #600]	; (80067b8 <_strtod_l+0xb10>)
 8006560:	459a      	cmp	sl, r3
 8006562:	d102      	bne.n	800656a <_strtod_l+0x8c2>
 8006564:	3101      	adds	r1, #1
 8006566:	f43f addd 	beq.w	8006124 <_strtod_l+0x47c>
 800656a:	f04f 0800 	mov.w	r8, #0
 800656e:	4b91      	ldr	r3, [pc, #580]	; (80067b4 <_strtod_l+0xb0c>)
 8006570:	ea0a 0303 	and.w	r3, sl, r3
 8006574:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006578:	9b05      	ldr	r3, [sp, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d19a      	bne.n	80064b4 <_strtod_l+0x80c>
 800657e:	e5db      	b.n	8006138 <_strtod_l+0x490>
 8006580:	f04f 33ff 	mov.w	r3, #4294967295
 8006584:	e7e9      	b.n	800655a <_strtod_l+0x8b2>
 8006586:	4613      	mov	r3, r2
 8006588:	e7e7      	b.n	800655a <_strtod_l+0x8b2>
 800658a:	ea53 0308 	orrs.w	r3, r3, r8
 800658e:	d081      	beq.n	8006494 <_strtod_l+0x7ec>
 8006590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006592:	b1e3      	cbz	r3, 80065ce <_strtod_l+0x926>
 8006594:	ea13 0f0a 	tst.w	r3, sl
 8006598:	d0ee      	beq.n	8006578 <_strtod_l+0x8d0>
 800659a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659c:	4640      	mov	r0, r8
 800659e:	4649      	mov	r1, r9
 80065a0:	9a05      	ldr	r2, [sp, #20]
 80065a2:	b1c3      	cbz	r3, 80065d6 <_strtod_l+0x92e>
 80065a4:	f7ff fb5f 	bl	8005c66 <sulp>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80065ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80065b0:	f7f9 fde6 	bl	8000180 <__adddf3>
 80065b4:	4680      	mov	r8, r0
 80065b6:	4689      	mov	r9, r1
 80065b8:	e7de      	b.n	8006578 <_strtod_l+0x8d0>
 80065ba:	4013      	ands	r3, r2
 80065bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80065c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80065c4:	f04f 38ff 	mov.w	r8, #4294967295
 80065c8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80065cc:	e7d4      	b.n	8006578 <_strtod_l+0x8d0>
 80065ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065d0:	ea13 0f08 	tst.w	r3, r8
 80065d4:	e7e0      	b.n	8006598 <_strtod_l+0x8f0>
 80065d6:	f7ff fb46 	bl	8005c66 <sulp>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80065e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80065e2:	f7f9 fdcb 	bl	800017c <__aeabi_dsub>
 80065e6:	2200      	movs	r2, #0
 80065e8:	2300      	movs	r3, #0
 80065ea:	4680      	mov	r8, r0
 80065ec:	4689      	mov	r9, r1
 80065ee:	f7fa f9e5 	bl	80009bc <__aeabi_dcmpeq>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d0c0      	beq.n	8006578 <_strtod_l+0x8d0>
 80065f6:	e606      	b.n	8006206 <_strtod_l+0x55e>
 80065f8:	4659      	mov	r1, fp
 80065fa:	4630      	mov	r0, r6
 80065fc:	f001 faf6 	bl	8007bec <__ratio>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006608:	2200      	movs	r2, #0
 800660a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800660e:	f7fa f9e9 	bl	80009e4 <__aeabi_dcmple>
 8006612:	2800      	cmp	r0, #0
 8006614:	d06f      	beq.n	80066f6 <_strtod_l+0xa4e>
 8006616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006618:	2b00      	cmp	r3, #0
 800661a:	d17c      	bne.n	8006716 <_strtod_l+0xa6e>
 800661c:	f1b8 0f00 	cmp.w	r8, #0
 8006620:	d159      	bne.n	80066d6 <_strtod_l+0xa2e>
 8006622:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006626:	2b00      	cmp	r3, #0
 8006628:	d17b      	bne.n	8006722 <_strtod_l+0xa7a>
 800662a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800662e:	2200      	movs	r2, #0
 8006630:	4b62      	ldr	r3, [pc, #392]	; (80067bc <_strtod_l+0xb14>)
 8006632:	f7fa f9cd 	bl	80009d0 <__aeabi_dcmplt>
 8006636:	2800      	cmp	r0, #0
 8006638:	d15a      	bne.n	80066f0 <_strtod_l+0xa48>
 800663a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800663e:	2200      	movs	r2, #0
 8006640:	4b5f      	ldr	r3, [pc, #380]	; (80067c0 <_strtod_l+0xb18>)
 8006642:	f7f9 ff53 	bl	80004ec <__aeabi_dmul>
 8006646:	4605      	mov	r5, r0
 8006648:	460f      	mov	r7, r1
 800664a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800664e:	9506      	str	r5, [sp, #24]
 8006650:	9307      	str	r3, [sp, #28]
 8006652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006656:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800665a:	4b56      	ldr	r3, [pc, #344]	; (80067b4 <_strtod_l+0xb0c>)
 800665c:	4a55      	ldr	r2, [pc, #340]	; (80067b4 <_strtod_l+0xb0c>)
 800665e:	ea0a 0303 	and.w	r3, sl, r3
 8006662:	9313      	str	r3, [sp, #76]	; 0x4c
 8006664:	4b57      	ldr	r3, [pc, #348]	; (80067c4 <_strtod_l+0xb1c>)
 8006666:	ea0a 0202 	and.w	r2, sl, r2
 800666a:	429a      	cmp	r2, r3
 800666c:	f040 80b0 	bne.w	80067d0 <_strtod_l+0xb28>
 8006670:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006674:	4640      	mov	r0, r8
 8006676:	4649      	mov	r1, r9
 8006678:	f001 f9fa 	bl	8007a70 <__ulp>
 800667c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006680:	f7f9 ff34 	bl	80004ec <__aeabi_dmul>
 8006684:	4642      	mov	r2, r8
 8006686:	464b      	mov	r3, r9
 8006688:	f7f9 fd7a 	bl	8000180 <__adddf3>
 800668c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80067b4 <_strtod_l+0xb0c>
 8006690:	4a4d      	ldr	r2, [pc, #308]	; (80067c8 <_strtod_l+0xb20>)
 8006692:	ea01 0a0a 	and.w	sl, r1, sl
 8006696:	4592      	cmp	sl, r2
 8006698:	4680      	mov	r8, r0
 800669a:	d948      	bls.n	800672e <_strtod_l+0xa86>
 800669c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800669e:	4b46      	ldr	r3, [pc, #280]	; (80067b8 <_strtod_l+0xb10>)
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d103      	bne.n	80066ac <_strtod_l+0xa04>
 80066a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066a6:	3301      	adds	r3, #1
 80066a8:	f43f ad3c 	beq.w	8006124 <_strtod_l+0x47c>
 80066ac:	f04f 38ff 	mov.w	r8, #4294967295
 80066b0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80067b8 <_strtod_l+0xb10>
 80066b4:	4620      	mov	r0, r4
 80066b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066b8:	f000 feae 	bl	8007418 <_Bfree>
 80066bc:	4620      	mov	r0, r4
 80066be:	9908      	ldr	r1, [sp, #32]
 80066c0:	f000 feaa 	bl	8007418 <_Bfree>
 80066c4:	4659      	mov	r1, fp
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 fea6 	bl	8007418 <_Bfree>
 80066cc:	4631      	mov	r1, r6
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fea2 	bl	8007418 <_Bfree>
 80066d4:	e605      	b.n	80062e2 <_strtod_l+0x63a>
 80066d6:	f1b8 0f01 	cmp.w	r8, #1
 80066da:	d103      	bne.n	80066e4 <_strtod_l+0xa3c>
 80066dc:	f1b9 0f00 	cmp.w	r9, #0
 80066e0:	f43f ad91 	beq.w	8006206 <_strtod_l+0x55e>
 80066e4:	2200      	movs	r2, #0
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <_strtod_l+0xb24>)
 80066e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80066ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066ee:	e016      	b.n	800671e <_strtod_l+0xa76>
 80066f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80066f2:	4f33      	ldr	r7, [pc, #204]	; (80067c0 <_strtod_l+0xb18>)
 80066f4:	e7a9      	b.n	800664a <_strtod_l+0x9a2>
 80066f6:	4b32      	ldr	r3, [pc, #200]	; (80067c0 <_strtod_l+0xb18>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066fe:	f7f9 fef5 	bl	80004ec <__aeabi_dmul>
 8006702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006704:	4605      	mov	r5, r0
 8006706:	460f      	mov	r7, r1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d09e      	beq.n	800664a <_strtod_l+0x9a2>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006714:	e79d      	b.n	8006652 <_strtod_l+0x9aa>
 8006716:	2200      	movs	r2, #0
 8006718:	4b28      	ldr	r3, [pc, #160]	; (80067bc <_strtod_l+0xb14>)
 800671a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800671e:	4f27      	ldr	r7, [pc, #156]	; (80067bc <_strtod_l+0xb14>)
 8006720:	e797      	b.n	8006652 <_strtod_l+0x9aa>
 8006722:	2200      	movs	r2, #0
 8006724:	4b29      	ldr	r3, [pc, #164]	; (80067cc <_strtod_l+0xb24>)
 8006726:	4645      	mov	r5, r8
 8006728:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800672c:	e7f7      	b.n	800671e <_strtod_l+0xa76>
 800672e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006732:	9b05      	ldr	r3, [sp, #20]
 8006734:	46ca      	mov	sl, r9
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1bc      	bne.n	80066b4 <_strtod_l+0xa0c>
 800673a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800673e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006740:	0d1b      	lsrs	r3, r3, #20
 8006742:	051b      	lsls	r3, r3, #20
 8006744:	429a      	cmp	r2, r3
 8006746:	d1b5      	bne.n	80066b4 <_strtod_l+0xa0c>
 8006748:	4628      	mov	r0, r5
 800674a:	4639      	mov	r1, r7
 800674c:	f7fa fa20 	bl	8000b90 <__aeabi_d2lz>
 8006750:	f7f9 fe9e 	bl	8000490 <__aeabi_l2d>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4628      	mov	r0, r5
 800675a:	4639      	mov	r1, r7
 800675c:	f7f9 fd0e 	bl	800017c <__aeabi_dsub>
 8006760:	460b      	mov	r3, r1
 8006762:	4602      	mov	r2, r0
 8006764:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006768:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800676c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800676e:	ea4a 0a08 	orr.w	sl, sl, r8
 8006772:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006776:	d06c      	beq.n	8006852 <_strtod_l+0xbaa>
 8006778:	a309      	add	r3, pc, #36	; (adr r3, 80067a0 <_strtod_l+0xaf8>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7fa f927 	bl	80009d0 <__aeabi_dcmplt>
 8006782:	2800      	cmp	r0, #0
 8006784:	f47f acd8 	bne.w	8006138 <_strtod_l+0x490>
 8006788:	a307      	add	r3, pc, #28	; (adr r3, 80067a8 <_strtod_l+0xb00>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006792:	f7fa f93b 	bl	8000a0c <__aeabi_dcmpgt>
 8006796:	2800      	cmp	r0, #0
 8006798:	d08c      	beq.n	80066b4 <_strtod_l+0xa0c>
 800679a:	e4cd      	b.n	8006138 <_strtod_l+0x490>
 800679c:	f3af 8000 	nop.w
 80067a0:	94a03595 	.word	0x94a03595
 80067a4:	3fdfffff 	.word	0x3fdfffff
 80067a8:	35afe535 	.word	0x35afe535
 80067ac:	3fe00000 	.word	0x3fe00000
 80067b0:	000fffff 	.word	0x000fffff
 80067b4:	7ff00000 	.word	0x7ff00000
 80067b8:	7fefffff 	.word	0x7fefffff
 80067bc:	3ff00000 	.word	0x3ff00000
 80067c0:	3fe00000 	.word	0x3fe00000
 80067c4:	7fe00000 	.word	0x7fe00000
 80067c8:	7c9fffff 	.word	0x7c9fffff
 80067cc:	bff00000 	.word	0xbff00000
 80067d0:	9b05      	ldr	r3, [sp, #20]
 80067d2:	b333      	cbz	r3, 8006822 <_strtod_l+0xb7a>
 80067d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067da:	d822      	bhi.n	8006822 <_strtod_l+0xb7a>
 80067dc:	a328      	add	r3, pc, #160	; (adr r3, 8006880 <_strtod_l+0xbd8>)
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	4628      	mov	r0, r5
 80067e4:	4639      	mov	r1, r7
 80067e6:	f7fa f8fd 	bl	80009e4 <__aeabi_dcmple>
 80067ea:	b1a0      	cbz	r0, 8006816 <_strtod_l+0xb6e>
 80067ec:	4639      	mov	r1, r7
 80067ee:	4628      	mov	r0, r5
 80067f0:	f7fa f93e 	bl	8000a70 <__aeabi_d2uiz>
 80067f4:	2801      	cmp	r0, #1
 80067f6:	bf38      	it	cc
 80067f8:	2001      	movcc	r0, #1
 80067fa:	f7f9 fdfd 	bl	80003f8 <__aeabi_ui2d>
 80067fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006800:	4605      	mov	r5, r0
 8006802:	460f      	mov	r7, r1
 8006804:	bb03      	cbnz	r3, 8006848 <_strtod_l+0xba0>
 8006806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800680a:	9014      	str	r0, [sp, #80]	; 0x50
 800680c:	9315      	str	r3, [sp, #84]	; 0x54
 800680e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006812:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800681a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	9311      	str	r3, [sp, #68]	; 0x44
 8006822:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006824:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006826:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800682a:	f001 f921 	bl	8007a70 <__ulp>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4640      	mov	r0, r8
 8006834:	4649      	mov	r1, r9
 8006836:	f7f9 fe59 	bl	80004ec <__aeabi_dmul>
 800683a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800683c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800683e:	f7f9 fc9f 	bl	8000180 <__adddf3>
 8006842:	4680      	mov	r8, r0
 8006844:	4689      	mov	r9, r1
 8006846:	e774      	b.n	8006732 <_strtod_l+0xa8a>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006850:	e7dd      	b.n	800680e <_strtod_l+0xb66>
 8006852:	a30d      	add	r3, pc, #52	; (adr r3, 8006888 <_strtod_l+0xbe0>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f7fa f8ba 	bl	80009d0 <__aeabi_dcmplt>
 800685c:	e79b      	b.n	8006796 <_strtod_l+0xaee>
 800685e:	2300      	movs	r3, #0
 8006860:	930e      	str	r3, [sp, #56]	; 0x38
 8006862:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006864:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	f7ff ba5b 	b.w	8005d22 <_strtod_l+0x7a>
 800686c:	2a65      	cmp	r2, #101	; 0x65
 800686e:	f43f ab52 	beq.w	8005f16 <_strtod_l+0x26e>
 8006872:	2a45      	cmp	r2, #69	; 0x45
 8006874:	f43f ab4f 	beq.w	8005f16 <_strtod_l+0x26e>
 8006878:	2301      	movs	r3, #1
 800687a:	f7ff bb87 	b.w	8005f8c <_strtod_l+0x2e4>
 800687e:	bf00      	nop
 8006880:	ffc00000 	.word	0xffc00000
 8006884:	41dfffff 	.word	0x41dfffff
 8006888:	94a03595 	.word	0x94a03595
 800688c:	3fcfffff 	.word	0x3fcfffff

08006890 <strtod>:
 8006890:	460a      	mov	r2, r1
 8006892:	4601      	mov	r1, r0
 8006894:	4802      	ldr	r0, [pc, #8]	; (80068a0 <strtod+0x10>)
 8006896:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <strtod+0x14>)
 8006898:	6800      	ldr	r0, [r0, #0]
 800689a:	f7ff ba05 	b.w	8005ca8 <_strtod_l>
 800689e:	bf00      	nop
 80068a0:	200001e0 	.word	0x200001e0
 80068a4:	20000028 	.word	0x20000028

080068a8 <std>:
 80068a8:	2300      	movs	r3, #0
 80068aa:	b510      	push	{r4, lr}
 80068ac:	4604      	mov	r4, r0
 80068ae:	e9c0 3300 	strd	r3, r3, [r0]
 80068b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068b6:	6083      	str	r3, [r0, #8]
 80068b8:	8181      	strh	r1, [r0, #12]
 80068ba:	6643      	str	r3, [r0, #100]	; 0x64
 80068bc:	81c2      	strh	r2, [r0, #14]
 80068be:	6183      	str	r3, [r0, #24]
 80068c0:	4619      	mov	r1, r3
 80068c2:	2208      	movs	r2, #8
 80068c4:	305c      	adds	r0, #92	; 0x5c
 80068c6:	f000 f902 	bl	8006ace <memset>
 80068ca:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <std+0x38>)
 80068cc:	6224      	str	r4, [r4, #32]
 80068ce:	6263      	str	r3, [r4, #36]	; 0x24
 80068d0:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <std+0x3c>)
 80068d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80068d4:	4b04      	ldr	r3, [pc, #16]	; (80068e8 <std+0x40>)
 80068d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <std+0x44>)
 80068da:	6323      	str	r3, [r4, #48]	; 0x30
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	bf00      	nop
 80068e0:	08006a49 	.word	0x08006a49
 80068e4:	08006a6b 	.word	0x08006a6b
 80068e8:	08006aa3 	.word	0x08006aa3
 80068ec:	08006ac7 	.word	0x08006ac7

080068f0 <stdio_exit_handler>:
 80068f0:	4a02      	ldr	r2, [pc, #8]	; (80068fc <stdio_exit_handler+0xc>)
 80068f2:	4903      	ldr	r1, [pc, #12]	; (8006900 <stdio_exit_handler+0x10>)
 80068f4:	4803      	ldr	r0, [pc, #12]	; (8006904 <stdio_exit_handler+0x14>)
 80068f6:	f000 b869 	b.w	80069cc <_fwalk_sglue>
 80068fa:	bf00      	nop
 80068fc:	2000001c 	.word	0x2000001c
 8006900:	080083d9 	.word	0x080083d9
 8006904:	20000194 	.word	0x20000194

08006908 <cleanup_stdio>:
 8006908:	6841      	ldr	r1, [r0, #4]
 800690a:	4b0c      	ldr	r3, [pc, #48]	; (800693c <cleanup_stdio+0x34>)
 800690c:	b510      	push	{r4, lr}
 800690e:	4299      	cmp	r1, r3
 8006910:	4604      	mov	r4, r0
 8006912:	d001      	beq.n	8006918 <cleanup_stdio+0x10>
 8006914:	f001 fd60 	bl	80083d8 <_fflush_r>
 8006918:	68a1      	ldr	r1, [r4, #8]
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <cleanup_stdio+0x38>)
 800691c:	4299      	cmp	r1, r3
 800691e:	d002      	beq.n	8006926 <cleanup_stdio+0x1e>
 8006920:	4620      	mov	r0, r4
 8006922:	f001 fd59 	bl	80083d8 <_fflush_r>
 8006926:	68e1      	ldr	r1, [r4, #12]
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <cleanup_stdio+0x3c>)
 800692a:	4299      	cmp	r1, r3
 800692c:	d004      	beq.n	8006938 <cleanup_stdio+0x30>
 800692e:	4620      	mov	r0, r4
 8006930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006934:	f001 bd50 	b.w	80083d8 <_fflush_r>
 8006938:	bd10      	pop	{r4, pc}
 800693a:	bf00      	nop
 800693c:	2000124c 	.word	0x2000124c
 8006940:	200012b4 	.word	0x200012b4
 8006944:	2000131c 	.word	0x2000131c

08006948 <global_stdio_init.part.0>:
 8006948:	b510      	push	{r4, lr}
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <global_stdio_init.part.0+0x30>)
 800694c:	4c0b      	ldr	r4, [pc, #44]	; (800697c <global_stdio_init.part.0+0x34>)
 800694e:	4a0c      	ldr	r2, [pc, #48]	; (8006980 <global_stdio_init.part.0+0x38>)
 8006950:	4620      	mov	r0, r4
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	2104      	movs	r1, #4
 8006956:	2200      	movs	r2, #0
 8006958:	f7ff ffa6 	bl	80068a8 <std>
 800695c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006960:	2201      	movs	r2, #1
 8006962:	2109      	movs	r1, #9
 8006964:	f7ff ffa0 	bl	80068a8 <std>
 8006968:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800696c:	2202      	movs	r2, #2
 800696e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006972:	2112      	movs	r1, #18
 8006974:	f7ff bf98 	b.w	80068a8 <std>
 8006978:	20001384 	.word	0x20001384
 800697c:	2000124c 	.word	0x2000124c
 8006980:	080068f1 	.word	0x080068f1

08006984 <__sfp_lock_acquire>:
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <__sfp_lock_acquire+0x8>)
 8006986:	f000 b93d 	b.w	8006c04 <__retarget_lock_acquire_recursive>
 800698a:	bf00      	nop
 800698c:	2000138d 	.word	0x2000138d

08006990 <__sfp_lock_release>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__sfp_lock_release+0x8>)
 8006992:	f000 b938 	b.w	8006c06 <__retarget_lock_release_recursive>
 8006996:	bf00      	nop
 8006998:	2000138d 	.word	0x2000138d

0800699c <__sinit>:
 800699c:	b510      	push	{r4, lr}
 800699e:	4604      	mov	r4, r0
 80069a0:	f7ff fff0 	bl	8006984 <__sfp_lock_acquire>
 80069a4:	6a23      	ldr	r3, [r4, #32]
 80069a6:	b11b      	cbz	r3, 80069b0 <__sinit+0x14>
 80069a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ac:	f7ff bff0 	b.w	8006990 <__sfp_lock_release>
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <__sinit+0x28>)
 80069b2:	6223      	str	r3, [r4, #32]
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <__sinit+0x2c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1f5      	bne.n	80069a8 <__sinit+0xc>
 80069bc:	f7ff ffc4 	bl	8006948 <global_stdio_init.part.0>
 80069c0:	e7f2      	b.n	80069a8 <__sinit+0xc>
 80069c2:	bf00      	nop
 80069c4:	08006909 	.word	0x08006909
 80069c8:	20001384 	.word	0x20001384

080069cc <_fwalk_sglue>:
 80069cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d0:	4607      	mov	r7, r0
 80069d2:	4688      	mov	r8, r1
 80069d4:	4614      	mov	r4, r2
 80069d6:	2600      	movs	r6, #0
 80069d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069dc:	f1b9 0901 	subs.w	r9, r9, #1
 80069e0:	d505      	bpl.n	80069ee <_fwalk_sglue+0x22>
 80069e2:	6824      	ldr	r4, [r4, #0]
 80069e4:	2c00      	cmp	r4, #0
 80069e6:	d1f7      	bne.n	80069d8 <_fwalk_sglue+0xc>
 80069e8:	4630      	mov	r0, r6
 80069ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ee:	89ab      	ldrh	r3, [r5, #12]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d907      	bls.n	8006a04 <_fwalk_sglue+0x38>
 80069f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069f8:	3301      	adds	r3, #1
 80069fa:	d003      	beq.n	8006a04 <_fwalk_sglue+0x38>
 80069fc:	4629      	mov	r1, r5
 80069fe:	4638      	mov	r0, r7
 8006a00:	47c0      	blx	r8
 8006a02:	4306      	orrs	r6, r0
 8006a04:	3568      	adds	r5, #104	; 0x68
 8006a06:	e7e9      	b.n	80069dc <_fwalk_sglue+0x10>

08006a08 <siprintf>:
 8006a08:	b40e      	push	{r1, r2, r3}
 8006a0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a0e:	b500      	push	{lr}
 8006a10:	b09c      	sub	sp, #112	; 0x70
 8006a12:	ab1d      	add	r3, sp, #116	; 0x74
 8006a14:	9002      	str	r0, [sp, #8]
 8006a16:	9006      	str	r0, [sp, #24]
 8006a18:	9107      	str	r1, [sp, #28]
 8006a1a:	9104      	str	r1, [sp, #16]
 8006a1c:	4808      	ldr	r0, [pc, #32]	; (8006a40 <siprintf+0x38>)
 8006a1e:	4909      	ldr	r1, [pc, #36]	; (8006a44 <siprintf+0x3c>)
 8006a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a24:	9105      	str	r1, [sp, #20]
 8006a26:	6800      	ldr	r0, [r0, #0]
 8006a28:	a902      	add	r1, sp, #8
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	f001 f9c0 	bl	8007db0 <_svfiprintf_r>
 8006a30:	2200      	movs	r2, #0
 8006a32:	9b02      	ldr	r3, [sp, #8]
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	b01c      	add	sp, #112	; 0x70
 8006a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a3c:	b003      	add	sp, #12
 8006a3e:	4770      	bx	lr
 8006a40:	200001e0 	.word	0x200001e0
 8006a44:	ffff0208 	.word	0xffff0208

08006a48 <__sread>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a50:	f000 f87a 	bl	8006b48 <_read_r>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	bfab      	itete	ge
 8006a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a5c:	181b      	addge	r3, r3, r0
 8006a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a62:	bfac      	ite	ge
 8006a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a66:	81a3      	strhlt	r3, [r4, #12]
 8006a68:	bd10      	pop	{r4, pc}

08006a6a <__swrite>:
 8006a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6e:	461f      	mov	r7, r3
 8006a70:	898b      	ldrh	r3, [r1, #12]
 8006a72:	4605      	mov	r5, r0
 8006a74:	05db      	lsls	r3, r3, #23
 8006a76:	460c      	mov	r4, r1
 8006a78:	4616      	mov	r6, r2
 8006a7a:	d505      	bpl.n	8006a88 <__swrite+0x1e>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a84:	f000 f84e 	bl	8006b24 <_lseek_r>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	4632      	mov	r2, r6
 8006a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	4628      	mov	r0, r5
 8006a94:	463b      	mov	r3, r7
 8006a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	f000 b875 	b.w	8006b8c <_write_r>

08006aa2 <__sseek>:
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aaa:	f000 f83b 	bl	8006b24 <_lseek_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	bf15      	itete	ne
 8006ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006abe:	81a3      	strheq	r3, [r4, #12]
 8006ac0:	bf18      	it	ne
 8006ac2:	81a3      	strhne	r3, [r4, #12]
 8006ac4:	bd10      	pop	{r4, pc}

08006ac6 <__sclose>:
 8006ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aca:	f000 b81b 	b.w	8006b04 <_close_r>

08006ace <memset>:
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4402      	add	r2, r0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d100      	bne.n	8006ad8 <memset+0xa>
 8006ad6:	4770      	bx	lr
 8006ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8006adc:	e7f9      	b.n	8006ad2 <memset+0x4>

08006ade <strncmp>:
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	b16a      	cbz	r2, 8006afe <strncmp+0x20>
 8006ae2:	3901      	subs	r1, #1
 8006ae4:	1884      	adds	r4, r0, r2
 8006ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d103      	bne.n	8006afa <strncmp+0x1c>
 8006af2:	42a0      	cmp	r0, r4
 8006af4:	d001      	beq.n	8006afa <strncmp+0x1c>
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	d1f5      	bne.n	8006ae6 <strncmp+0x8>
 8006afa:	1ad0      	subs	r0, r2, r3
 8006afc:	bd10      	pop	{r4, pc}
 8006afe:	4610      	mov	r0, r2
 8006b00:	e7fc      	b.n	8006afc <strncmp+0x1e>
	...

08006b04 <_close_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	2300      	movs	r3, #0
 8006b08:	4d05      	ldr	r5, [pc, #20]	; (8006b20 <_close_r+0x1c>)
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	602b      	str	r3, [r5, #0]
 8006b10:	f7fb fdaa 	bl	8002668 <_close>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_close_r+0x1a>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_close_r+0x1a>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	20001388 	.word	0x20001388

08006b24 <_lseek_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4d05      	ldr	r5, [pc, #20]	; (8006b44 <_lseek_r+0x20>)
 8006b30:	602a      	str	r2, [r5, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f7fb fdbc 	bl	80026b0 <_lseek>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_lseek_r+0x1e>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_lseek_r+0x1e>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	20001388 	.word	0x20001388

08006b48 <_read_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	2200      	movs	r2, #0
 8006b52:	4d05      	ldr	r5, [pc, #20]	; (8006b68 <_read_r+0x20>)
 8006b54:	602a      	str	r2, [r5, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f7fb fd4d 	bl	80025f6 <_read>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_read_r+0x1e>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_read_r+0x1e>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	20001388 	.word	0x20001388

08006b6c <_sbrk_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4d05      	ldr	r5, [pc, #20]	; (8006b88 <_sbrk_r+0x1c>)
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	f7fb fda6 	bl	80026c8 <_sbrk>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_sbrk_r+0x1a>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_sbrk_r+0x1a>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20001388 	.word	0x20001388

08006b8c <_write_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	2200      	movs	r2, #0
 8006b96:	4d05      	ldr	r5, [pc, #20]	; (8006bac <_write_r+0x20>)
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f7fb fd48 	bl	8002630 <_write>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_write_r+0x1e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_write_r+0x1e>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20001388 	.word	0x20001388

08006bb0 <__errno>:
 8006bb0:	4b01      	ldr	r3, [pc, #4]	; (8006bb8 <__errno+0x8>)
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	200001e0 	.word	0x200001e0

08006bbc <__libc_init_array>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	4d0c      	ldr	r5, [pc, #48]	; (8006bf4 <__libc_init_array+0x38>)
 8006bc2:	4c0d      	ldr	r4, [pc, #52]	; (8006bf8 <__libc_init_array+0x3c>)
 8006bc4:	1b64      	subs	r4, r4, r5
 8006bc6:	10a4      	asrs	r4, r4, #2
 8006bc8:	42a6      	cmp	r6, r4
 8006bca:	d109      	bne.n	8006be0 <__libc_init_array+0x24>
 8006bcc:	f001 ff3e 	bl	8008a4c <_init>
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	4d0a      	ldr	r5, [pc, #40]	; (8006bfc <__libc_init_array+0x40>)
 8006bd4:	4c0a      	ldr	r4, [pc, #40]	; (8006c00 <__libc_init_array+0x44>)
 8006bd6:	1b64      	subs	r4, r4, r5
 8006bd8:	10a4      	asrs	r4, r4, #2
 8006bda:	42a6      	cmp	r6, r4
 8006bdc:	d105      	bne.n	8006bea <__libc_init_array+0x2e>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be4:	4798      	blx	r3
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7ee      	b.n	8006bc8 <__libc_init_array+0xc>
 8006bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bee:	4798      	blx	r3
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	e7f2      	b.n	8006bda <__libc_init_array+0x1e>
 8006bf4:	0800905c 	.word	0x0800905c
 8006bf8:	0800905c 	.word	0x0800905c
 8006bfc:	0800905c 	.word	0x0800905c
 8006c00:	08009060 	.word	0x08009060

08006c04 <__retarget_lock_acquire_recursive>:
 8006c04:	4770      	bx	lr

08006c06 <__retarget_lock_release_recursive>:
 8006c06:	4770      	bx	lr

08006c08 <memcpy>:
 8006c08:	440a      	add	r2, r1
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c10:	d100      	bne.n	8006c14 <memcpy+0xc>
 8006c12:	4770      	bx	lr
 8006c14:	b510      	push	{r4, lr}
 8006c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c20:	d1f9      	bne.n	8006c16 <memcpy+0xe>
 8006c22:	bd10      	pop	{r4, pc}

08006c24 <nan>:
 8006c24:	2000      	movs	r0, #0
 8006c26:	4901      	ldr	r1, [pc, #4]	; (8006c2c <nan+0x8>)
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	7ff80000 	.word	0x7ff80000

08006c30 <_free_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4605      	mov	r5, r0
 8006c34:	2900      	cmp	r1, #0
 8006c36:	d040      	beq.n	8006cba <_free_r+0x8a>
 8006c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c3c:	1f0c      	subs	r4, r1, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bfb8      	it	lt
 8006c42:	18e4      	addlt	r4, r4, r3
 8006c44:	f7fe ffcc 	bl	8005be0 <__malloc_lock>
 8006c48:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <_free_r+0x8c>)
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	b933      	cbnz	r3, 8006c5c <_free_r+0x2c>
 8006c4e:	6063      	str	r3, [r4, #4]
 8006c50:	6014      	str	r4, [r2, #0]
 8006c52:	4628      	mov	r0, r5
 8006c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c58:	f7fe bfc8 	b.w	8005bec <__malloc_unlock>
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	d908      	bls.n	8006c72 <_free_r+0x42>
 8006c60:	6820      	ldr	r0, [r4, #0]
 8006c62:	1821      	adds	r1, r4, r0
 8006c64:	428b      	cmp	r3, r1
 8006c66:	bf01      	itttt	eq
 8006c68:	6819      	ldreq	r1, [r3, #0]
 8006c6a:	685b      	ldreq	r3, [r3, #4]
 8006c6c:	1809      	addeq	r1, r1, r0
 8006c6e:	6021      	streq	r1, [r4, #0]
 8006c70:	e7ed      	b.n	8006c4e <_free_r+0x1e>
 8006c72:	461a      	mov	r2, r3
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	b10b      	cbz	r3, 8006c7c <_free_r+0x4c>
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	d9fa      	bls.n	8006c72 <_free_r+0x42>
 8006c7c:	6811      	ldr	r1, [r2, #0]
 8006c7e:	1850      	adds	r0, r2, r1
 8006c80:	42a0      	cmp	r0, r4
 8006c82:	d10b      	bne.n	8006c9c <_free_r+0x6c>
 8006c84:	6820      	ldr	r0, [r4, #0]
 8006c86:	4401      	add	r1, r0
 8006c88:	1850      	adds	r0, r2, r1
 8006c8a:	4283      	cmp	r3, r0
 8006c8c:	6011      	str	r1, [r2, #0]
 8006c8e:	d1e0      	bne.n	8006c52 <_free_r+0x22>
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	4408      	add	r0, r1
 8006c96:	6010      	str	r0, [r2, #0]
 8006c98:	6053      	str	r3, [r2, #4]
 8006c9a:	e7da      	b.n	8006c52 <_free_r+0x22>
 8006c9c:	d902      	bls.n	8006ca4 <_free_r+0x74>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	e7d6      	b.n	8006c52 <_free_r+0x22>
 8006ca4:	6820      	ldr	r0, [r4, #0]
 8006ca6:	1821      	adds	r1, r4, r0
 8006ca8:	428b      	cmp	r3, r1
 8006caa:	bf01      	itttt	eq
 8006cac:	6819      	ldreq	r1, [r3, #0]
 8006cae:	685b      	ldreq	r3, [r3, #4]
 8006cb0:	1809      	addeq	r1, r1, r0
 8006cb2:	6021      	streq	r1, [r4, #0]
 8006cb4:	6063      	str	r3, [r4, #4]
 8006cb6:	6054      	str	r4, [r2, #4]
 8006cb8:	e7cb      	b.n	8006c52 <_free_r+0x22>
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	20001244 	.word	0x20001244

08006cc0 <rshift>:
 8006cc0:	6903      	ldr	r3, [r0, #16]
 8006cc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006cca:	f100 0414 	add.w	r4, r0, #20
 8006cce:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006cd2:	dd46      	ble.n	8006d62 <rshift+0xa2>
 8006cd4:	f011 011f 	ands.w	r1, r1, #31
 8006cd8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006cdc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006ce0:	d10c      	bne.n	8006cfc <rshift+0x3c>
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	f100 0710 	add.w	r7, r0, #16
 8006ce8:	42b1      	cmp	r1, r6
 8006cea:	d335      	bcc.n	8006d58 <rshift+0x98>
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	1eea      	subs	r2, r5, #3
 8006cf2:	4296      	cmp	r6, r2
 8006cf4:	bf38      	it	cc
 8006cf6:	2300      	movcc	r3, #0
 8006cf8:	4423      	add	r3, r4
 8006cfa:	e015      	b.n	8006d28 <rshift+0x68>
 8006cfc:	46a1      	mov	r9, r4
 8006cfe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d02:	f1c1 0820 	rsb	r8, r1, #32
 8006d06:	40cf      	lsrs	r7, r1
 8006d08:	f105 0e04 	add.w	lr, r5, #4
 8006d0c:	4576      	cmp	r6, lr
 8006d0e:	46f4      	mov	ip, lr
 8006d10:	d816      	bhi.n	8006d40 <rshift+0x80>
 8006d12:	1a9a      	subs	r2, r3, r2
 8006d14:	0092      	lsls	r2, r2, #2
 8006d16:	3a04      	subs	r2, #4
 8006d18:	3501      	adds	r5, #1
 8006d1a:	42ae      	cmp	r6, r5
 8006d1c:	bf38      	it	cc
 8006d1e:	2200      	movcc	r2, #0
 8006d20:	18a3      	adds	r3, r4, r2
 8006d22:	50a7      	str	r7, [r4, r2]
 8006d24:	b107      	cbz	r7, 8006d28 <rshift+0x68>
 8006d26:	3304      	adds	r3, #4
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	eba3 0204 	sub.w	r2, r3, r4
 8006d2e:	bf08      	it	eq
 8006d30:	2300      	moveq	r3, #0
 8006d32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d36:	6102      	str	r2, [r0, #16]
 8006d38:	bf08      	it	eq
 8006d3a:	6143      	streq	r3, [r0, #20]
 8006d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d40:	f8dc c000 	ldr.w	ip, [ip]
 8006d44:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d48:	ea4c 0707 	orr.w	r7, ip, r7
 8006d4c:	f849 7b04 	str.w	r7, [r9], #4
 8006d50:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d54:	40cf      	lsrs	r7, r1
 8006d56:	e7d9      	b.n	8006d0c <rshift+0x4c>
 8006d58:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d5c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d60:	e7c2      	b.n	8006ce8 <rshift+0x28>
 8006d62:	4623      	mov	r3, r4
 8006d64:	e7e0      	b.n	8006d28 <rshift+0x68>

08006d66 <__hexdig_fun>:
 8006d66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d802      	bhi.n	8006d74 <__hexdig_fun+0xe>
 8006d6e:	3820      	subs	r0, #32
 8006d70:	b2c0      	uxtb	r0, r0
 8006d72:	4770      	bx	lr
 8006d74:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006d78:	2b05      	cmp	r3, #5
 8006d7a:	d801      	bhi.n	8006d80 <__hexdig_fun+0x1a>
 8006d7c:	3847      	subs	r0, #71	; 0x47
 8006d7e:	e7f7      	b.n	8006d70 <__hexdig_fun+0xa>
 8006d80:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006d84:	2b05      	cmp	r3, #5
 8006d86:	d801      	bhi.n	8006d8c <__hexdig_fun+0x26>
 8006d88:	3827      	subs	r0, #39	; 0x27
 8006d8a:	e7f1      	b.n	8006d70 <__hexdig_fun+0xa>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	4770      	bx	lr

08006d90 <__gethex>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	4681      	mov	r9, r0
 8006d96:	468a      	mov	sl, r1
 8006d98:	4617      	mov	r7, r2
 8006d9a:	680a      	ldr	r2, [r1, #0]
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	f102 0b02 	add.w	fp, r2, #2
 8006da2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006da6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006daa:	9302      	str	r3, [sp, #8]
 8006dac:	32fe      	adds	r2, #254	; 0xfe
 8006dae:	eb02 030b 	add.w	r3, r2, fp
 8006db2:	46d8      	mov	r8, fp
 8006db4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	2830      	cmp	r0, #48	; 0x30
 8006dbc:	d0f7      	beq.n	8006dae <__gethex+0x1e>
 8006dbe:	f7ff ffd2 	bl	8006d66 <__hexdig_fun>
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d138      	bne.n	8006e3a <__gethex+0xaa>
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4640      	mov	r0, r8
 8006dcc:	49a7      	ldr	r1, [pc, #668]	; (800706c <__gethex+0x2dc>)
 8006dce:	f7ff fe86 	bl	8006ade <strncmp>
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d169      	bne.n	8006eac <__gethex+0x11c>
 8006dd8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006ddc:	465d      	mov	r5, fp
 8006dde:	f7ff ffc2 	bl	8006d66 <__hexdig_fun>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d064      	beq.n	8006eb0 <__gethex+0x120>
 8006de6:	465a      	mov	r2, fp
 8006de8:	7810      	ldrb	r0, [r2, #0]
 8006dea:	4690      	mov	r8, r2
 8006dec:	2830      	cmp	r0, #48	; 0x30
 8006dee:	f102 0201 	add.w	r2, r2, #1
 8006df2:	d0f9      	beq.n	8006de8 <__gethex+0x58>
 8006df4:	f7ff ffb7 	bl	8006d66 <__hexdig_fun>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	fab0 f480 	clz	r4, r0
 8006dfe:	465e      	mov	r6, fp
 8006e00:	0964      	lsrs	r4, r4, #5
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	4642      	mov	r2, r8
 8006e06:	4615      	mov	r5, r2
 8006e08:	7828      	ldrb	r0, [r5, #0]
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	f7ff ffab 	bl	8006d66 <__hexdig_fun>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1f8      	bne.n	8006e06 <__gethex+0x76>
 8006e14:	2201      	movs	r2, #1
 8006e16:	4628      	mov	r0, r5
 8006e18:	4994      	ldr	r1, [pc, #592]	; (800706c <__gethex+0x2dc>)
 8006e1a:	f7ff fe60 	bl	8006ade <strncmp>
 8006e1e:	b978      	cbnz	r0, 8006e40 <__gethex+0xb0>
 8006e20:	b946      	cbnz	r6, 8006e34 <__gethex+0xa4>
 8006e22:	1c6e      	adds	r6, r5, #1
 8006e24:	4632      	mov	r2, r6
 8006e26:	4615      	mov	r5, r2
 8006e28:	7828      	ldrb	r0, [r5, #0]
 8006e2a:	3201      	adds	r2, #1
 8006e2c:	f7ff ff9b 	bl	8006d66 <__hexdig_fun>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d1f8      	bne.n	8006e26 <__gethex+0x96>
 8006e34:	1b73      	subs	r3, r6, r5
 8006e36:	009e      	lsls	r6, r3, #2
 8006e38:	e004      	b.n	8006e44 <__gethex+0xb4>
 8006e3a:	2400      	movs	r4, #0
 8006e3c:	4626      	mov	r6, r4
 8006e3e:	e7e1      	b.n	8006e04 <__gethex+0x74>
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	d1f7      	bne.n	8006e34 <__gethex+0xa4>
 8006e44:	782b      	ldrb	r3, [r5, #0]
 8006e46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e4a:	2b50      	cmp	r3, #80	; 0x50
 8006e4c:	d13d      	bne.n	8006eca <__gethex+0x13a>
 8006e4e:	786b      	ldrb	r3, [r5, #1]
 8006e50:	2b2b      	cmp	r3, #43	; 0x2b
 8006e52:	d02f      	beq.n	8006eb4 <__gethex+0x124>
 8006e54:	2b2d      	cmp	r3, #45	; 0x2d
 8006e56:	d031      	beq.n	8006ebc <__gethex+0x12c>
 8006e58:	f04f 0b00 	mov.w	fp, #0
 8006e5c:	1c69      	adds	r1, r5, #1
 8006e5e:	7808      	ldrb	r0, [r1, #0]
 8006e60:	f7ff ff81 	bl	8006d66 <__hexdig_fun>
 8006e64:	1e42      	subs	r2, r0, #1
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	2a18      	cmp	r2, #24
 8006e6a:	d82e      	bhi.n	8006eca <__gethex+0x13a>
 8006e6c:	f1a0 0210 	sub.w	r2, r0, #16
 8006e70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e74:	f7ff ff77 	bl	8006d66 <__hexdig_fun>
 8006e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8006e7c:	fa5f fc8c 	uxtb.w	ip, ip
 8006e80:	f1bc 0f18 	cmp.w	ip, #24
 8006e84:	d91d      	bls.n	8006ec2 <__gethex+0x132>
 8006e86:	f1bb 0f00 	cmp.w	fp, #0
 8006e8a:	d000      	beq.n	8006e8e <__gethex+0xfe>
 8006e8c:	4252      	negs	r2, r2
 8006e8e:	4416      	add	r6, r2
 8006e90:	f8ca 1000 	str.w	r1, [sl]
 8006e94:	b1dc      	cbz	r4, 8006ece <__gethex+0x13e>
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	f04f 0800 	movne.w	r8, #0
 8006ea0:	f04f 0806 	moveq.w	r8, #6
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	b005      	add	sp, #20
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	4645      	mov	r5, r8
 8006eae:	4626      	mov	r6, r4
 8006eb0:	2401      	movs	r4, #1
 8006eb2:	e7c7      	b.n	8006e44 <__gethex+0xb4>
 8006eb4:	f04f 0b00 	mov.w	fp, #0
 8006eb8:	1ca9      	adds	r1, r5, #2
 8006eba:	e7d0      	b.n	8006e5e <__gethex+0xce>
 8006ebc:	f04f 0b01 	mov.w	fp, #1
 8006ec0:	e7fa      	b.n	8006eb8 <__gethex+0x128>
 8006ec2:	230a      	movs	r3, #10
 8006ec4:	fb03 0002 	mla	r0, r3, r2, r0
 8006ec8:	e7d0      	b.n	8006e6c <__gethex+0xdc>
 8006eca:	4629      	mov	r1, r5
 8006ecc:	e7e0      	b.n	8006e90 <__gethex+0x100>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	eba5 0308 	sub.w	r3, r5, r8
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	2b07      	cmp	r3, #7
 8006ed8:	dc0a      	bgt.n	8006ef0 <__gethex+0x160>
 8006eda:	4648      	mov	r0, r9
 8006edc:	f000 fa5c 	bl	8007398 <_Balloc>
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	b940      	cbnz	r0, 8006ef6 <__gethex+0x166>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	21e4      	movs	r1, #228	; 0xe4
 8006ee8:	4b61      	ldr	r3, [pc, #388]	; (8007070 <__gethex+0x2e0>)
 8006eea:	4862      	ldr	r0, [pc, #392]	; (8007074 <__gethex+0x2e4>)
 8006eec:	f001 fac4 	bl	8008478 <__assert_func>
 8006ef0:	3101      	adds	r1, #1
 8006ef2:	105b      	asrs	r3, r3, #1
 8006ef4:	e7ef      	b.n	8006ed6 <__gethex+0x146>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	469b      	mov	fp, r3
 8006efa:	f100 0a14 	add.w	sl, r0, #20
 8006efe:	f8cd a004 	str.w	sl, [sp, #4]
 8006f02:	45a8      	cmp	r8, r5
 8006f04:	d344      	bcc.n	8006f90 <__gethex+0x200>
 8006f06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f0a:	4658      	mov	r0, fp
 8006f0c:	f848 bb04 	str.w	fp, [r8], #4
 8006f10:	eba8 080a 	sub.w	r8, r8, sl
 8006f14:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8006f18:	6122      	str	r2, [r4, #16]
 8006f1a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8006f1e:	f000 fb2d 	bl	800757c <__hi0bits>
 8006f22:	683d      	ldr	r5, [r7, #0]
 8006f24:	eba8 0800 	sub.w	r8, r8, r0
 8006f28:	45a8      	cmp	r8, r5
 8006f2a:	dd59      	ble.n	8006fe0 <__gethex+0x250>
 8006f2c:	eba8 0805 	sub.w	r8, r8, r5
 8006f30:	4641      	mov	r1, r8
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 feab 	bl	8007c8e <__any_on>
 8006f38:	4683      	mov	fp, r0
 8006f3a:	b1b8      	cbz	r0, 8006f6c <__gethex+0x1dc>
 8006f3c:	f04f 0b01 	mov.w	fp, #1
 8006f40:	f108 33ff 	add.w	r3, r8, #4294967295
 8006f44:	1159      	asrs	r1, r3, #5
 8006f46:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006f4a:	f003 021f 	and.w	r2, r3, #31
 8006f4e:	fa0b f202 	lsl.w	r2, fp, r2
 8006f52:	420a      	tst	r2, r1
 8006f54:	d00a      	beq.n	8006f6c <__gethex+0x1dc>
 8006f56:	455b      	cmp	r3, fp
 8006f58:	dd06      	ble.n	8006f68 <__gethex+0x1d8>
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f1a8 0102 	sub.w	r1, r8, #2
 8006f60:	f000 fe95 	bl	8007c8e <__any_on>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d138      	bne.n	8006fda <__gethex+0x24a>
 8006f68:	f04f 0b02 	mov.w	fp, #2
 8006f6c:	4641      	mov	r1, r8
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f7ff fea6 	bl	8006cc0 <rshift>
 8006f74:	4446      	add	r6, r8
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	42b3      	cmp	r3, r6
 8006f7a:	da41      	bge.n	8007000 <__gethex+0x270>
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4648      	mov	r0, r9
 8006f80:	f000 fa4a 	bl	8007418 <_Bfree>
 8006f84:	2300      	movs	r3, #0
 8006f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f88:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	e789      	b.n	8006ea4 <__gethex+0x114>
 8006f90:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8006f94:	2a2e      	cmp	r2, #46	; 0x2e
 8006f96:	d014      	beq.n	8006fc2 <__gethex+0x232>
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d106      	bne.n	8006faa <__gethex+0x21a>
 8006f9c:	9b01      	ldr	r3, [sp, #4]
 8006f9e:	f843 bb04 	str.w	fp, [r3], #4
 8006fa2:	f04f 0b00 	mov.w	fp, #0
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	465b      	mov	r3, fp
 8006faa:	7828      	ldrb	r0, [r5, #0]
 8006fac:	9303      	str	r3, [sp, #12]
 8006fae:	f7ff feda 	bl	8006d66 <__hexdig_fun>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	f000 000f 	and.w	r0, r0, #15
 8006fb8:	4098      	lsls	r0, r3
 8006fba:	ea4b 0b00 	orr.w	fp, fp, r0
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	e79f      	b.n	8006f02 <__gethex+0x172>
 8006fc2:	45a8      	cmp	r8, r5
 8006fc4:	d8e8      	bhi.n	8006f98 <__gethex+0x208>
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	4628      	mov	r0, r5
 8006fca:	4928      	ldr	r1, [pc, #160]	; (800706c <__gethex+0x2dc>)
 8006fcc:	9303      	str	r3, [sp, #12]
 8006fce:	f7ff fd86 	bl	8006ade <strncmp>
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d1df      	bne.n	8006f98 <__gethex+0x208>
 8006fd8:	e793      	b.n	8006f02 <__gethex+0x172>
 8006fda:	f04f 0b03 	mov.w	fp, #3
 8006fde:	e7c5      	b.n	8006f6c <__gethex+0x1dc>
 8006fe0:	da0b      	bge.n	8006ffa <__gethex+0x26a>
 8006fe2:	eba5 0808 	sub.w	r8, r5, r8
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4642      	mov	r2, r8
 8006fea:	4648      	mov	r0, r9
 8006fec:	f000 fc2c 	bl	8007848 <__lshift>
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	eba6 0608 	sub.w	r6, r6, r8
 8006ff6:	f100 0a14 	add.w	sl, r0, #20
 8006ffa:	f04f 0b00 	mov.w	fp, #0
 8006ffe:	e7ba      	b.n	8006f76 <__gethex+0x1e6>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	42b3      	cmp	r3, r6
 8007004:	dd74      	ble.n	80070f0 <__gethex+0x360>
 8007006:	1b9e      	subs	r6, r3, r6
 8007008:	42b5      	cmp	r5, r6
 800700a:	dc35      	bgt.n	8007078 <__gethex+0x2e8>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d023      	beq.n	800705a <__gethex+0x2ca>
 8007012:	2b03      	cmp	r3, #3
 8007014:	d025      	beq.n	8007062 <__gethex+0x2d2>
 8007016:	2b01      	cmp	r3, #1
 8007018:	d115      	bne.n	8007046 <__gethex+0x2b6>
 800701a:	42b5      	cmp	r5, r6
 800701c:	d113      	bne.n	8007046 <__gethex+0x2b6>
 800701e:	2d01      	cmp	r5, #1
 8007020:	d10b      	bne.n	800703a <__gethex+0x2aa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	9a02      	ldr	r2, [sp, #8]
 8007026:	f04f 0862 	mov.w	r8, #98	; 0x62
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	2301      	movs	r3, #1
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	f8ca 3000 	str.w	r3, [sl]
 8007034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007036:	601c      	str	r4, [r3, #0]
 8007038:	e734      	b.n	8006ea4 <__gethex+0x114>
 800703a:	4620      	mov	r0, r4
 800703c:	1e69      	subs	r1, r5, #1
 800703e:	f000 fe26 	bl	8007c8e <__any_on>
 8007042:	2800      	cmp	r0, #0
 8007044:	d1ed      	bne.n	8007022 <__gethex+0x292>
 8007046:	4621      	mov	r1, r4
 8007048:	4648      	mov	r0, r9
 800704a:	f000 f9e5 	bl	8007418 <_Bfree>
 800704e:	2300      	movs	r3, #0
 8007050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007052:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	e724      	b.n	8006ea4 <__gethex+0x114>
 800705a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f2      	bne.n	8007046 <__gethex+0x2b6>
 8007060:	e7df      	b.n	8007022 <__gethex+0x292>
 8007062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1dc      	bne.n	8007022 <__gethex+0x292>
 8007068:	e7ed      	b.n	8007046 <__gethex+0x2b6>
 800706a:	bf00      	nop
 800706c:	08008ca2 	.word	0x08008ca2
 8007070:	08008e09 	.word	0x08008e09
 8007074:	08008e1a 	.word	0x08008e1a
 8007078:	f106 38ff 	add.w	r8, r6, #4294967295
 800707c:	f1bb 0f00 	cmp.w	fp, #0
 8007080:	d133      	bne.n	80070ea <__gethex+0x35a>
 8007082:	f1b8 0f00 	cmp.w	r8, #0
 8007086:	d004      	beq.n	8007092 <__gethex+0x302>
 8007088:	4641      	mov	r1, r8
 800708a:	4620      	mov	r0, r4
 800708c:	f000 fdff 	bl	8007c8e <__any_on>
 8007090:	4683      	mov	fp, r0
 8007092:	2301      	movs	r3, #1
 8007094:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007098:	f008 081f 	and.w	r8, r8, #31
 800709c:	fa03 f308 	lsl.w	r3, r3, r8
 80070a0:	f04f 0802 	mov.w	r8, #2
 80070a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80070a8:	4631      	mov	r1, r6
 80070aa:	4213      	tst	r3, r2
 80070ac:	4620      	mov	r0, r4
 80070ae:	bf18      	it	ne
 80070b0:	f04b 0b02 	orrne.w	fp, fp, #2
 80070b4:	1bad      	subs	r5, r5, r6
 80070b6:	f7ff fe03 	bl	8006cc0 <rshift>
 80070ba:	687e      	ldr	r6, [r7, #4]
 80070bc:	f1bb 0f00 	cmp.w	fp, #0
 80070c0:	d04a      	beq.n	8007158 <__gethex+0x3c8>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d016      	beq.n	80070f6 <__gethex+0x366>
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d018      	beq.n	80070fe <__gethex+0x36e>
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d109      	bne.n	80070e4 <__gethex+0x354>
 80070d0:	f01b 0f02 	tst.w	fp, #2
 80070d4:	d006      	beq.n	80070e4 <__gethex+0x354>
 80070d6:	f8da 3000 	ldr.w	r3, [sl]
 80070da:	ea4b 0b03 	orr.w	fp, fp, r3
 80070de:	f01b 0f01 	tst.w	fp, #1
 80070e2:	d10f      	bne.n	8007104 <__gethex+0x374>
 80070e4:	f048 0810 	orr.w	r8, r8, #16
 80070e8:	e036      	b.n	8007158 <__gethex+0x3c8>
 80070ea:	f04f 0b01 	mov.w	fp, #1
 80070ee:	e7d0      	b.n	8007092 <__gethex+0x302>
 80070f0:	f04f 0801 	mov.w	r8, #1
 80070f4:	e7e2      	b.n	80070bc <__gethex+0x32c>
 80070f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f8:	f1c3 0301 	rsb	r3, r3, #1
 80070fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80070fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0ef      	beq.n	80070e4 <__gethex+0x354>
 8007104:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007108:	f104 0214 	add.w	r2, r4, #20
 800710c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	2300      	movs	r3, #0
 8007114:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007118:	4694      	mov	ip, r2
 800711a:	f852 1b04 	ldr.w	r1, [r2], #4
 800711e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007122:	d01e      	beq.n	8007162 <__gethex+0x3d2>
 8007124:	3101      	adds	r1, #1
 8007126:	f8cc 1000 	str.w	r1, [ip]
 800712a:	f1b8 0f02 	cmp.w	r8, #2
 800712e:	f104 0214 	add.w	r2, r4, #20
 8007132:	d13d      	bne.n	80071b0 <__gethex+0x420>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	3b01      	subs	r3, #1
 8007138:	42ab      	cmp	r3, r5
 800713a:	d10b      	bne.n	8007154 <__gethex+0x3c4>
 800713c:	2301      	movs	r3, #1
 800713e:	1169      	asrs	r1, r5, #5
 8007140:	f005 051f 	and.w	r5, r5, #31
 8007144:	fa03 f505 	lsl.w	r5, r3, r5
 8007148:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800714c:	421d      	tst	r5, r3
 800714e:	bf18      	it	ne
 8007150:	f04f 0801 	movne.w	r8, #1
 8007154:	f048 0820 	orr.w	r8, r8, #32
 8007158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800715a:	601c      	str	r4, [r3, #0]
 800715c:	9b02      	ldr	r3, [sp, #8]
 800715e:	601e      	str	r6, [r3, #0]
 8007160:	e6a0      	b.n	8006ea4 <__gethex+0x114>
 8007162:	4290      	cmp	r0, r2
 8007164:	f842 3c04 	str.w	r3, [r2, #-4]
 8007168:	d8d6      	bhi.n	8007118 <__gethex+0x388>
 800716a:	68a2      	ldr	r2, [r4, #8]
 800716c:	4593      	cmp	fp, r2
 800716e:	db17      	blt.n	80071a0 <__gethex+0x410>
 8007170:	6861      	ldr	r1, [r4, #4]
 8007172:	4648      	mov	r0, r9
 8007174:	3101      	adds	r1, #1
 8007176:	f000 f90f 	bl	8007398 <_Balloc>
 800717a:	4682      	mov	sl, r0
 800717c:	b918      	cbnz	r0, 8007186 <__gethex+0x3f6>
 800717e:	4602      	mov	r2, r0
 8007180:	2184      	movs	r1, #132	; 0x84
 8007182:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <__gethex+0x45c>)
 8007184:	e6b1      	b.n	8006eea <__gethex+0x15a>
 8007186:	6922      	ldr	r2, [r4, #16]
 8007188:	f104 010c 	add.w	r1, r4, #12
 800718c:	3202      	adds	r2, #2
 800718e:	0092      	lsls	r2, r2, #2
 8007190:	300c      	adds	r0, #12
 8007192:	f7ff fd39 	bl	8006c08 <memcpy>
 8007196:	4621      	mov	r1, r4
 8007198:	4648      	mov	r0, r9
 800719a:	f000 f93d 	bl	8007418 <_Bfree>
 800719e:	4654      	mov	r4, sl
 80071a0:	6922      	ldr	r2, [r4, #16]
 80071a2:	1c51      	adds	r1, r2, #1
 80071a4:	6121      	str	r1, [r4, #16]
 80071a6:	2101      	movs	r1, #1
 80071a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80071ac:	6151      	str	r1, [r2, #20]
 80071ae:	e7bc      	b.n	800712a <__gethex+0x39a>
 80071b0:	6921      	ldr	r1, [r4, #16]
 80071b2:	4559      	cmp	r1, fp
 80071b4:	dd0b      	ble.n	80071ce <__gethex+0x43e>
 80071b6:	2101      	movs	r1, #1
 80071b8:	4620      	mov	r0, r4
 80071ba:	f7ff fd81 	bl	8006cc0 <rshift>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	3601      	adds	r6, #1
 80071c2:	42b3      	cmp	r3, r6
 80071c4:	f6ff aeda 	blt.w	8006f7c <__gethex+0x1ec>
 80071c8:	f04f 0801 	mov.w	r8, #1
 80071cc:	e7c2      	b.n	8007154 <__gethex+0x3c4>
 80071ce:	f015 051f 	ands.w	r5, r5, #31
 80071d2:	d0f9      	beq.n	80071c8 <__gethex+0x438>
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	f1c5 0520 	rsb	r5, r5, #32
 80071da:	441a      	add	r2, r3
 80071dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80071e0:	f000 f9cc 	bl	800757c <__hi0bits>
 80071e4:	42a8      	cmp	r0, r5
 80071e6:	dbe6      	blt.n	80071b6 <__gethex+0x426>
 80071e8:	e7ee      	b.n	80071c8 <__gethex+0x438>
 80071ea:	bf00      	nop
 80071ec:	08008e09 	.word	0x08008e09

080071f0 <L_shift>:
 80071f0:	f1c2 0208 	rsb	r2, r2, #8
 80071f4:	0092      	lsls	r2, r2, #2
 80071f6:	b570      	push	{r4, r5, r6, lr}
 80071f8:	f1c2 0620 	rsb	r6, r2, #32
 80071fc:	6843      	ldr	r3, [r0, #4]
 80071fe:	6804      	ldr	r4, [r0, #0]
 8007200:	fa03 f506 	lsl.w	r5, r3, r6
 8007204:	432c      	orrs	r4, r5
 8007206:	40d3      	lsrs	r3, r2
 8007208:	6004      	str	r4, [r0, #0]
 800720a:	f840 3f04 	str.w	r3, [r0, #4]!
 800720e:	4288      	cmp	r0, r1
 8007210:	d3f4      	bcc.n	80071fc <L_shift+0xc>
 8007212:	bd70      	pop	{r4, r5, r6, pc}

08007214 <__match>:
 8007214:	b530      	push	{r4, r5, lr}
 8007216:	6803      	ldr	r3, [r0, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800721e:	b914      	cbnz	r4, 8007226 <__match+0x12>
 8007220:	6003      	str	r3, [r0, #0]
 8007222:	2001      	movs	r0, #1
 8007224:	bd30      	pop	{r4, r5, pc}
 8007226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800722e:	2d19      	cmp	r5, #25
 8007230:	bf98      	it	ls
 8007232:	3220      	addls	r2, #32
 8007234:	42a2      	cmp	r2, r4
 8007236:	d0f0      	beq.n	800721a <__match+0x6>
 8007238:	2000      	movs	r0, #0
 800723a:	e7f3      	b.n	8007224 <__match+0x10>

0800723c <__hexnan>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	2500      	movs	r5, #0
 8007242:	680b      	ldr	r3, [r1, #0]
 8007244:	4682      	mov	sl, r0
 8007246:	115e      	asrs	r6, r3, #5
 8007248:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800724c:	f013 031f 	ands.w	r3, r3, #31
 8007250:	bf18      	it	ne
 8007252:	3604      	addne	r6, #4
 8007254:	1f37      	subs	r7, r6, #4
 8007256:	4690      	mov	r8, r2
 8007258:	46b9      	mov	r9, r7
 800725a:	463c      	mov	r4, r7
 800725c:	46ab      	mov	fp, r5
 800725e:	b087      	sub	sp, #28
 8007260:	6801      	ldr	r1, [r0, #0]
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	f846 5c04 	str.w	r5, [r6, #-4]
 8007268:	9502      	str	r5, [sp, #8]
 800726a:	784a      	ldrb	r2, [r1, #1]
 800726c:	1c4b      	adds	r3, r1, #1
 800726e:	9303      	str	r3, [sp, #12]
 8007270:	b342      	cbz	r2, 80072c4 <__hexnan+0x88>
 8007272:	4610      	mov	r0, r2
 8007274:	9105      	str	r1, [sp, #20]
 8007276:	9204      	str	r2, [sp, #16]
 8007278:	f7ff fd75 	bl	8006d66 <__hexdig_fun>
 800727c:	2800      	cmp	r0, #0
 800727e:	d14f      	bne.n	8007320 <__hexnan+0xe4>
 8007280:	9a04      	ldr	r2, [sp, #16]
 8007282:	9905      	ldr	r1, [sp, #20]
 8007284:	2a20      	cmp	r2, #32
 8007286:	d818      	bhi.n	80072ba <__hexnan+0x7e>
 8007288:	9b02      	ldr	r3, [sp, #8]
 800728a:	459b      	cmp	fp, r3
 800728c:	dd13      	ble.n	80072b6 <__hexnan+0x7a>
 800728e:	454c      	cmp	r4, r9
 8007290:	d206      	bcs.n	80072a0 <__hexnan+0x64>
 8007292:	2d07      	cmp	r5, #7
 8007294:	dc04      	bgt.n	80072a0 <__hexnan+0x64>
 8007296:	462a      	mov	r2, r5
 8007298:	4649      	mov	r1, r9
 800729a:	4620      	mov	r0, r4
 800729c:	f7ff ffa8 	bl	80071f0 <L_shift>
 80072a0:	4544      	cmp	r4, r8
 80072a2:	d950      	bls.n	8007346 <__hexnan+0x10a>
 80072a4:	2300      	movs	r3, #0
 80072a6:	f1a4 0904 	sub.w	r9, r4, #4
 80072aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80072ae:	461d      	mov	r5, r3
 80072b0:	464c      	mov	r4, r9
 80072b2:	f8cd b008 	str.w	fp, [sp, #8]
 80072b6:	9903      	ldr	r1, [sp, #12]
 80072b8:	e7d7      	b.n	800726a <__hexnan+0x2e>
 80072ba:	2a29      	cmp	r2, #41	; 0x29
 80072bc:	d155      	bne.n	800736a <__hexnan+0x12e>
 80072be:	3102      	adds	r1, #2
 80072c0:	f8ca 1000 	str.w	r1, [sl]
 80072c4:	f1bb 0f00 	cmp.w	fp, #0
 80072c8:	d04f      	beq.n	800736a <__hexnan+0x12e>
 80072ca:	454c      	cmp	r4, r9
 80072cc:	d206      	bcs.n	80072dc <__hexnan+0xa0>
 80072ce:	2d07      	cmp	r5, #7
 80072d0:	dc04      	bgt.n	80072dc <__hexnan+0xa0>
 80072d2:	462a      	mov	r2, r5
 80072d4:	4649      	mov	r1, r9
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7ff ff8a 	bl	80071f0 <L_shift>
 80072dc:	4544      	cmp	r4, r8
 80072de:	d934      	bls.n	800734a <__hexnan+0x10e>
 80072e0:	4623      	mov	r3, r4
 80072e2:	f1a8 0204 	sub.w	r2, r8, #4
 80072e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80072ea:	429f      	cmp	r7, r3
 80072ec:	f842 1f04 	str.w	r1, [r2, #4]!
 80072f0:	d2f9      	bcs.n	80072e6 <__hexnan+0xaa>
 80072f2:	1b3b      	subs	r3, r7, r4
 80072f4:	f023 0303 	bic.w	r3, r3, #3
 80072f8:	3304      	adds	r3, #4
 80072fa:	3e03      	subs	r6, #3
 80072fc:	3401      	adds	r4, #1
 80072fe:	42a6      	cmp	r6, r4
 8007300:	bf38      	it	cc
 8007302:	2304      	movcc	r3, #4
 8007304:	2200      	movs	r2, #0
 8007306:	4443      	add	r3, r8
 8007308:	f843 2b04 	str.w	r2, [r3], #4
 800730c:	429f      	cmp	r7, r3
 800730e:	d2fb      	bcs.n	8007308 <__hexnan+0xcc>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	b91b      	cbnz	r3, 800731c <__hexnan+0xe0>
 8007314:	4547      	cmp	r7, r8
 8007316:	d126      	bne.n	8007366 <__hexnan+0x12a>
 8007318:	2301      	movs	r3, #1
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	2005      	movs	r0, #5
 800731e:	e025      	b.n	800736c <__hexnan+0x130>
 8007320:	3501      	adds	r5, #1
 8007322:	2d08      	cmp	r5, #8
 8007324:	f10b 0b01 	add.w	fp, fp, #1
 8007328:	dd06      	ble.n	8007338 <__hexnan+0xfc>
 800732a:	4544      	cmp	r4, r8
 800732c:	d9c3      	bls.n	80072b6 <__hexnan+0x7a>
 800732e:	2300      	movs	r3, #0
 8007330:	2501      	movs	r5, #1
 8007332:	f844 3c04 	str.w	r3, [r4, #-4]
 8007336:	3c04      	subs	r4, #4
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	f000 000f 	and.w	r0, r0, #15
 800733e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007342:	6020      	str	r0, [r4, #0]
 8007344:	e7b7      	b.n	80072b6 <__hexnan+0x7a>
 8007346:	2508      	movs	r5, #8
 8007348:	e7b5      	b.n	80072b6 <__hexnan+0x7a>
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0df      	beq.n	8007310 <__hexnan+0xd4>
 8007350:	f04f 32ff 	mov.w	r2, #4294967295
 8007354:	f1c3 0320 	rsb	r3, r3, #32
 8007358:	40da      	lsrs	r2, r3
 800735a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800735e:	4013      	ands	r3, r2
 8007360:	f846 3c04 	str.w	r3, [r6, #-4]
 8007364:	e7d4      	b.n	8007310 <__hexnan+0xd4>
 8007366:	3f04      	subs	r7, #4
 8007368:	e7d2      	b.n	8007310 <__hexnan+0xd4>
 800736a:	2004      	movs	r0, #4
 800736c:	b007      	add	sp, #28
 800736e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007372 <__ascii_mbtowc>:
 8007372:	b082      	sub	sp, #8
 8007374:	b901      	cbnz	r1, 8007378 <__ascii_mbtowc+0x6>
 8007376:	a901      	add	r1, sp, #4
 8007378:	b142      	cbz	r2, 800738c <__ascii_mbtowc+0x1a>
 800737a:	b14b      	cbz	r3, 8007390 <__ascii_mbtowc+0x1e>
 800737c:	7813      	ldrb	r3, [r2, #0]
 800737e:	600b      	str	r3, [r1, #0]
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	1e10      	subs	r0, r2, #0
 8007384:	bf18      	it	ne
 8007386:	2001      	movne	r0, #1
 8007388:	b002      	add	sp, #8
 800738a:	4770      	bx	lr
 800738c:	4610      	mov	r0, r2
 800738e:	e7fb      	b.n	8007388 <__ascii_mbtowc+0x16>
 8007390:	f06f 0001 	mvn.w	r0, #1
 8007394:	e7f8      	b.n	8007388 <__ascii_mbtowc+0x16>
	...

08007398 <_Balloc>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	69c6      	ldr	r6, [r0, #28]
 800739c:	4604      	mov	r4, r0
 800739e:	460d      	mov	r5, r1
 80073a0:	b976      	cbnz	r6, 80073c0 <_Balloc+0x28>
 80073a2:	2010      	movs	r0, #16
 80073a4:	f7fe fb6c 	bl	8005a80 <malloc>
 80073a8:	4602      	mov	r2, r0
 80073aa:	61e0      	str	r0, [r4, #28]
 80073ac:	b920      	cbnz	r0, 80073b8 <_Balloc+0x20>
 80073ae:	216b      	movs	r1, #107	; 0x6b
 80073b0:	4b17      	ldr	r3, [pc, #92]	; (8007410 <_Balloc+0x78>)
 80073b2:	4818      	ldr	r0, [pc, #96]	; (8007414 <_Balloc+0x7c>)
 80073b4:	f001 f860 	bl	8008478 <__assert_func>
 80073b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073bc:	6006      	str	r6, [r0, #0]
 80073be:	60c6      	str	r6, [r0, #12]
 80073c0:	69e6      	ldr	r6, [r4, #28]
 80073c2:	68f3      	ldr	r3, [r6, #12]
 80073c4:	b183      	cbz	r3, 80073e8 <_Balloc+0x50>
 80073c6:	69e3      	ldr	r3, [r4, #28]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073ce:	b9b8      	cbnz	r0, 8007400 <_Balloc+0x68>
 80073d0:	2101      	movs	r1, #1
 80073d2:	fa01 f605 	lsl.w	r6, r1, r5
 80073d6:	1d72      	adds	r2, r6, #5
 80073d8:	4620      	mov	r0, r4
 80073da:	0092      	lsls	r2, r2, #2
 80073dc:	f001 f86a 	bl	80084b4 <_calloc_r>
 80073e0:	b160      	cbz	r0, 80073fc <_Balloc+0x64>
 80073e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073e6:	e00e      	b.n	8007406 <_Balloc+0x6e>
 80073e8:	2221      	movs	r2, #33	; 0x21
 80073ea:	2104      	movs	r1, #4
 80073ec:	4620      	mov	r0, r4
 80073ee:	f001 f861 	bl	80084b4 <_calloc_r>
 80073f2:	69e3      	ldr	r3, [r4, #28]
 80073f4:	60f0      	str	r0, [r6, #12]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e4      	bne.n	80073c6 <_Balloc+0x2e>
 80073fc:	2000      	movs	r0, #0
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	6802      	ldr	r2, [r0, #0]
 8007402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007406:	2300      	movs	r3, #0
 8007408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800740c:	e7f7      	b.n	80073fe <_Balloc+0x66>
 800740e:	bf00      	nop
 8007410:	08008e7a 	.word	0x08008e7a
 8007414:	08008e91 	.word	0x08008e91

08007418 <_Bfree>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	69c6      	ldr	r6, [r0, #28]
 800741c:	4605      	mov	r5, r0
 800741e:	460c      	mov	r4, r1
 8007420:	b976      	cbnz	r6, 8007440 <_Bfree+0x28>
 8007422:	2010      	movs	r0, #16
 8007424:	f7fe fb2c 	bl	8005a80 <malloc>
 8007428:	4602      	mov	r2, r0
 800742a:	61e8      	str	r0, [r5, #28]
 800742c:	b920      	cbnz	r0, 8007438 <_Bfree+0x20>
 800742e:	218f      	movs	r1, #143	; 0x8f
 8007430:	4b08      	ldr	r3, [pc, #32]	; (8007454 <_Bfree+0x3c>)
 8007432:	4809      	ldr	r0, [pc, #36]	; (8007458 <_Bfree+0x40>)
 8007434:	f001 f820 	bl	8008478 <__assert_func>
 8007438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800743c:	6006      	str	r6, [r0, #0]
 800743e:	60c6      	str	r6, [r0, #12]
 8007440:	b13c      	cbz	r4, 8007452 <_Bfree+0x3a>
 8007442:	69eb      	ldr	r3, [r5, #28]
 8007444:	6862      	ldr	r2, [r4, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800744c:	6021      	str	r1, [r4, #0]
 800744e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	08008e7a 	.word	0x08008e7a
 8007458:	08008e91 	.word	0x08008e91

0800745c <__multadd>:
 800745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007460:	4607      	mov	r7, r0
 8007462:	460c      	mov	r4, r1
 8007464:	461e      	mov	r6, r3
 8007466:	2000      	movs	r0, #0
 8007468:	690d      	ldr	r5, [r1, #16]
 800746a:	f101 0c14 	add.w	ip, r1, #20
 800746e:	f8dc 3000 	ldr.w	r3, [ip]
 8007472:	3001      	adds	r0, #1
 8007474:	b299      	uxth	r1, r3
 8007476:	fb02 6101 	mla	r1, r2, r1, r6
 800747a:	0c1e      	lsrs	r6, r3, #16
 800747c:	0c0b      	lsrs	r3, r1, #16
 800747e:	fb02 3306 	mla	r3, r2, r6, r3
 8007482:	b289      	uxth	r1, r1
 8007484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007488:	4285      	cmp	r5, r0
 800748a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800748e:	f84c 1b04 	str.w	r1, [ip], #4
 8007492:	dcec      	bgt.n	800746e <__multadd+0x12>
 8007494:	b30e      	cbz	r6, 80074da <__multadd+0x7e>
 8007496:	68a3      	ldr	r3, [r4, #8]
 8007498:	42ab      	cmp	r3, r5
 800749a:	dc19      	bgt.n	80074d0 <__multadd+0x74>
 800749c:	6861      	ldr	r1, [r4, #4]
 800749e:	4638      	mov	r0, r7
 80074a0:	3101      	adds	r1, #1
 80074a2:	f7ff ff79 	bl	8007398 <_Balloc>
 80074a6:	4680      	mov	r8, r0
 80074a8:	b928      	cbnz	r0, 80074b6 <__multadd+0x5a>
 80074aa:	4602      	mov	r2, r0
 80074ac:	21ba      	movs	r1, #186	; 0xba
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <__multadd+0x84>)
 80074b0:	480c      	ldr	r0, [pc, #48]	; (80074e4 <__multadd+0x88>)
 80074b2:	f000 ffe1 	bl	8008478 <__assert_func>
 80074b6:	6922      	ldr	r2, [r4, #16]
 80074b8:	f104 010c 	add.w	r1, r4, #12
 80074bc:	3202      	adds	r2, #2
 80074be:	0092      	lsls	r2, r2, #2
 80074c0:	300c      	adds	r0, #12
 80074c2:	f7ff fba1 	bl	8006c08 <memcpy>
 80074c6:	4621      	mov	r1, r4
 80074c8:	4638      	mov	r0, r7
 80074ca:	f7ff ffa5 	bl	8007418 <_Bfree>
 80074ce:	4644      	mov	r4, r8
 80074d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074d4:	3501      	adds	r5, #1
 80074d6:	615e      	str	r6, [r3, #20]
 80074d8:	6125      	str	r5, [r4, #16]
 80074da:	4620      	mov	r0, r4
 80074dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e0:	08008e09 	.word	0x08008e09
 80074e4:	08008e91 	.word	0x08008e91

080074e8 <__s2b>:
 80074e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ec:	4615      	mov	r5, r2
 80074ee:	2209      	movs	r2, #9
 80074f0:	461f      	mov	r7, r3
 80074f2:	3308      	adds	r3, #8
 80074f4:	460c      	mov	r4, r1
 80074f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074fa:	4606      	mov	r6, r0
 80074fc:	2201      	movs	r2, #1
 80074fe:	2100      	movs	r1, #0
 8007500:	429a      	cmp	r2, r3
 8007502:	db09      	blt.n	8007518 <__s2b+0x30>
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff ff47 	bl	8007398 <_Balloc>
 800750a:	b940      	cbnz	r0, 800751e <__s2b+0x36>
 800750c:	4602      	mov	r2, r0
 800750e:	21d3      	movs	r1, #211	; 0xd3
 8007510:	4b18      	ldr	r3, [pc, #96]	; (8007574 <__s2b+0x8c>)
 8007512:	4819      	ldr	r0, [pc, #100]	; (8007578 <__s2b+0x90>)
 8007514:	f000 ffb0 	bl	8008478 <__assert_func>
 8007518:	0052      	lsls	r2, r2, #1
 800751a:	3101      	adds	r1, #1
 800751c:	e7f0      	b.n	8007500 <__s2b+0x18>
 800751e:	9b08      	ldr	r3, [sp, #32]
 8007520:	2d09      	cmp	r5, #9
 8007522:	6143      	str	r3, [r0, #20]
 8007524:	f04f 0301 	mov.w	r3, #1
 8007528:	6103      	str	r3, [r0, #16]
 800752a:	dd16      	ble.n	800755a <__s2b+0x72>
 800752c:	f104 0909 	add.w	r9, r4, #9
 8007530:	46c8      	mov	r8, r9
 8007532:	442c      	add	r4, r5
 8007534:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007538:	4601      	mov	r1, r0
 800753a:	220a      	movs	r2, #10
 800753c:	4630      	mov	r0, r6
 800753e:	3b30      	subs	r3, #48	; 0x30
 8007540:	f7ff ff8c 	bl	800745c <__multadd>
 8007544:	45a0      	cmp	r8, r4
 8007546:	d1f5      	bne.n	8007534 <__s2b+0x4c>
 8007548:	f1a5 0408 	sub.w	r4, r5, #8
 800754c:	444c      	add	r4, r9
 800754e:	1b2d      	subs	r5, r5, r4
 8007550:	1963      	adds	r3, r4, r5
 8007552:	42bb      	cmp	r3, r7
 8007554:	db04      	blt.n	8007560 <__s2b+0x78>
 8007556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755a:	2509      	movs	r5, #9
 800755c:	340a      	adds	r4, #10
 800755e:	e7f6      	b.n	800754e <__s2b+0x66>
 8007560:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007564:	4601      	mov	r1, r0
 8007566:	220a      	movs	r2, #10
 8007568:	4630      	mov	r0, r6
 800756a:	3b30      	subs	r3, #48	; 0x30
 800756c:	f7ff ff76 	bl	800745c <__multadd>
 8007570:	e7ee      	b.n	8007550 <__s2b+0x68>
 8007572:	bf00      	nop
 8007574:	08008e09 	.word	0x08008e09
 8007578:	08008e91 	.word	0x08008e91

0800757c <__hi0bits>:
 800757c:	0c02      	lsrs	r2, r0, #16
 800757e:	0412      	lsls	r2, r2, #16
 8007580:	4603      	mov	r3, r0
 8007582:	b9ca      	cbnz	r2, 80075b8 <__hi0bits+0x3c>
 8007584:	0403      	lsls	r3, r0, #16
 8007586:	2010      	movs	r0, #16
 8007588:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800758c:	bf04      	itt	eq
 800758e:	021b      	lsleq	r3, r3, #8
 8007590:	3008      	addeq	r0, #8
 8007592:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007596:	bf04      	itt	eq
 8007598:	011b      	lsleq	r3, r3, #4
 800759a:	3004      	addeq	r0, #4
 800759c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80075a0:	bf04      	itt	eq
 80075a2:	009b      	lsleq	r3, r3, #2
 80075a4:	3002      	addeq	r0, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	db05      	blt.n	80075b6 <__hi0bits+0x3a>
 80075aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80075ae:	f100 0001 	add.w	r0, r0, #1
 80075b2:	bf08      	it	eq
 80075b4:	2020      	moveq	r0, #32
 80075b6:	4770      	bx	lr
 80075b8:	2000      	movs	r0, #0
 80075ba:	e7e5      	b.n	8007588 <__hi0bits+0xc>

080075bc <__lo0bits>:
 80075bc:	6803      	ldr	r3, [r0, #0]
 80075be:	4602      	mov	r2, r0
 80075c0:	f013 0007 	ands.w	r0, r3, #7
 80075c4:	d00b      	beq.n	80075de <__lo0bits+0x22>
 80075c6:	07d9      	lsls	r1, r3, #31
 80075c8:	d421      	bmi.n	800760e <__lo0bits+0x52>
 80075ca:	0798      	lsls	r0, r3, #30
 80075cc:	bf49      	itett	mi
 80075ce:	085b      	lsrmi	r3, r3, #1
 80075d0:	089b      	lsrpl	r3, r3, #2
 80075d2:	2001      	movmi	r0, #1
 80075d4:	6013      	strmi	r3, [r2, #0]
 80075d6:	bf5c      	itt	pl
 80075d8:	2002      	movpl	r0, #2
 80075da:	6013      	strpl	r3, [r2, #0]
 80075dc:	4770      	bx	lr
 80075de:	b299      	uxth	r1, r3
 80075e0:	b909      	cbnz	r1, 80075e6 <__lo0bits+0x2a>
 80075e2:	2010      	movs	r0, #16
 80075e4:	0c1b      	lsrs	r3, r3, #16
 80075e6:	b2d9      	uxtb	r1, r3
 80075e8:	b909      	cbnz	r1, 80075ee <__lo0bits+0x32>
 80075ea:	3008      	adds	r0, #8
 80075ec:	0a1b      	lsrs	r3, r3, #8
 80075ee:	0719      	lsls	r1, r3, #28
 80075f0:	bf04      	itt	eq
 80075f2:	091b      	lsreq	r3, r3, #4
 80075f4:	3004      	addeq	r0, #4
 80075f6:	0799      	lsls	r1, r3, #30
 80075f8:	bf04      	itt	eq
 80075fa:	089b      	lsreq	r3, r3, #2
 80075fc:	3002      	addeq	r0, #2
 80075fe:	07d9      	lsls	r1, r3, #31
 8007600:	d403      	bmi.n	800760a <__lo0bits+0x4e>
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	f100 0001 	add.w	r0, r0, #1
 8007608:	d003      	beq.n	8007612 <__lo0bits+0x56>
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	4770      	bx	lr
 800760e:	2000      	movs	r0, #0
 8007610:	4770      	bx	lr
 8007612:	2020      	movs	r0, #32
 8007614:	4770      	bx	lr
	...

08007618 <__i2b>:
 8007618:	b510      	push	{r4, lr}
 800761a:	460c      	mov	r4, r1
 800761c:	2101      	movs	r1, #1
 800761e:	f7ff febb 	bl	8007398 <_Balloc>
 8007622:	4602      	mov	r2, r0
 8007624:	b928      	cbnz	r0, 8007632 <__i2b+0x1a>
 8007626:	f240 1145 	movw	r1, #325	; 0x145
 800762a:	4b04      	ldr	r3, [pc, #16]	; (800763c <__i2b+0x24>)
 800762c:	4804      	ldr	r0, [pc, #16]	; (8007640 <__i2b+0x28>)
 800762e:	f000 ff23 	bl	8008478 <__assert_func>
 8007632:	2301      	movs	r3, #1
 8007634:	6144      	str	r4, [r0, #20]
 8007636:	6103      	str	r3, [r0, #16]
 8007638:	bd10      	pop	{r4, pc}
 800763a:	bf00      	nop
 800763c:	08008e09 	.word	0x08008e09
 8007640:	08008e91 	.word	0x08008e91

08007644 <__multiply>:
 8007644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	4691      	mov	r9, r2
 800764a:	690a      	ldr	r2, [r1, #16]
 800764c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007650:	460c      	mov	r4, r1
 8007652:	429a      	cmp	r2, r3
 8007654:	bfbe      	ittt	lt
 8007656:	460b      	movlt	r3, r1
 8007658:	464c      	movlt	r4, r9
 800765a:	4699      	movlt	r9, r3
 800765c:	6927      	ldr	r7, [r4, #16]
 800765e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	6861      	ldr	r1, [r4, #4]
 8007666:	eb07 060a 	add.w	r6, r7, sl
 800766a:	42b3      	cmp	r3, r6
 800766c:	b085      	sub	sp, #20
 800766e:	bfb8      	it	lt
 8007670:	3101      	addlt	r1, #1
 8007672:	f7ff fe91 	bl	8007398 <_Balloc>
 8007676:	b930      	cbnz	r0, 8007686 <__multiply+0x42>
 8007678:	4602      	mov	r2, r0
 800767a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800767e:	4b43      	ldr	r3, [pc, #268]	; (800778c <__multiply+0x148>)
 8007680:	4843      	ldr	r0, [pc, #268]	; (8007790 <__multiply+0x14c>)
 8007682:	f000 fef9 	bl	8008478 <__assert_func>
 8007686:	f100 0514 	add.w	r5, r0, #20
 800768a:	462b      	mov	r3, r5
 800768c:	2200      	movs	r2, #0
 800768e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007692:	4543      	cmp	r3, r8
 8007694:	d321      	bcc.n	80076da <__multiply+0x96>
 8007696:	f104 0314 	add.w	r3, r4, #20
 800769a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800769e:	f109 0314 	add.w	r3, r9, #20
 80076a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076a6:	9202      	str	r2, [sp, #8]
 80076a8:	1b3a      	subs	r2, r7, r4
 80076aa:	3a15      	subs	r2, #21
 80076ac:	f022 0203 	bic.w	r2, r2, #3
 80076b0:	3204      	adds	r2, #4
 80076b2:	f104 0115 	add.w	r1, r4, #21
 80076b6:	428f      	cmp	r7, r1
 80076b8:	bf38      	it	cc
 80076ba:	2204      	movcc	r2, #4
 80076bc:	9201      	str	r2, [sp, #4]
 80076be:	9a02      	ldr	r2, [sp, #8]
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d80c      	bhi.n	80076e0 <__multiply+0x9c>
 80076c6:	2e00      	cmp	r6, #0
 80076c8:	dd03      	ble.n	80076d2 <__multiply+0x8e>
 80076ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d05a      	beq.n	8007788 <__multiply+0x144>
 80076d2:	6106      	str	r6, [r0, #16]
 80076d4:	b005      	add	sp, #20
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	f843 2b04 	str.w	r2, [r3], #4
 80076de:	e7d8      	b.n	8007692 <__multiply+0x4e>
 80076e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80076e4:	f1ba 0f00 	cmp.w	sl, #0
 80076e8:	d023      	beq.n	8007732 <__multiply+0xee>
 80076ea:	46a9      	mov	r9, r5
 80076ec:	f04f 0c00 	mov.w	ip, #0
 80076f0:	f104 0e14 	add.w	lr, r4, #20
 80076f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076f8:	f8d9 1000 	ldr.w	r1, [r9]
 80076fc:	fa1f fb82 	uxth.w	fp, r2
 8007700:	b289      	uxth	r1, r1
 8007702:	fb0a 110b 	mla	r1, sl, fp, r1
 8007706:	4461      	add	r1, ip
 8007708:	f8d9 c000 	ldr.w	ip, [r9]
 800770c:	0c12      	lsrs	r2, r2, #16
 800770e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007712:	fb0a c202 	mla	r2, sl, r2, ip
 8007716:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800771a:	b289      	uxth	r1, r1
 800771c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007720:	4577      	cmp	r7, lr
 8007722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007726:	f849 1b04 	str.w	r1, [r9], #4
 800772a:	d8e3      	bhi.n	80076f4 <__multiply+0xb0>
 800772c:	9a01      	ldr	r2, [sp, #4]
 800772e:	f845 c002 	str.w	ip, [r5, r2]
 8007732:	9a03      	ldr	r2, [sp, #12]
 8007734:	3304      	adds	r3, #4
 8007736:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800773a:	f1b9 0f00 	cmp.w	r9, #0
 800773e:	d021      	beq.n	8007784 <__multiply+0x140>
 8007740:	46ae      	mov	lr, r5
 8007742:	f04f 0a00 	mov.w	sl, #0
 8007746:	6829      	ldr	r1, [r5, #0]
 8007748:	f104 0c14 	add.w	ip, r4, #20
 800774c:	f8bc b000 	ldrh.w	fp, [ip]
 8007750:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007754:	b289      	uxth	r1, r1
 8007756:	fb09 220b 	mla	r2, r9, fp, r2
 800775a:	4452      	add	r2, sl
 800775c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007760:	f84e 1b04 	str.w	r1, [lr], #4
 8007764:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007768:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800776c:	f8be 1000 	ldrh.w	r1, [lr]
 8007770:	4567      	cmp	r7, ip
 8007772:	fb09 110a 	mla	r1, r9, sl, r1
 8007776:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800777a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800777e:	d8e5      	bhi.n	800774c <__multiply+0x108>
 8007780:	9a01      	ldr	r2, [sp, #4]
 8007782:	50a9      	str	r1, [r5, r2]
 8007784:	3504      	adds	r5, #4
 8007786:	e79a      	b.n	80076be <__multiply+0x7a>
 8007788:	3e01      	subs	r6, #1
 800778a:	e79c      	b.n	80076c6 <__multiply+0x82>
 800778c:	08008e09 	.word	0x08008e09
 8007790:	08008e91 	.word	0x08008e91

08007794 <__pow5mult>:
 8007794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007798:	4615      	mov	r5, r2
 800779a:	f012 0203 	ands.w	r2, r2, #3
 800779e:	4606      	mov	r6, r0
 80077a0:	460f      	mov	r7, r1
 80077a2:	d007      	beq.n	80077b4 <__pow5mult+0x20>
 80077a4:	4c25      	ldr	r4, [pc, #148]	; (800783c <__pow5mult+0xa8>)
 80077a6:	3a01      	subs	r2, #1
 80077a8:	2300      	movs	r3, #0
 80077aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ae:	f7ff fe55 	bl	800745c <__multadd>
 80077b2:	4607      	mov	r7, r0
 80077b4:	10ad      	asrs	r5, r5, #2
 80077b6:	d03d      	beq.n	8007834 <__pow5mult+0xa0>
 80077b8:	69f4      	ldr	r4, [r6, #28]
 80077ba:	b97c      	cbnz	r4, 80077dc <__pow5mult+0x48>
 80077bc:	2010      	movs	r0, #16
 80077be:	f7fe f95f 	bl	8005a80 <malloc>
 80077c2:	4602      	mov	r2, r0
 80077c4:	61f0      	str	r0, [r6, #28]
 80077c6:	b928      	cbnz	r0, 80077d4 <__pow5mult+0x40>
 80077c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077cc:	4b1c      	ldr	r3, [pc, #112]	; (8007840 <__pow5mult+0xac>)
 80077ce:	481d      	ldr	r0, [pc, #116]	; (8007844 <__pow5mult+0xb0>)
 80077d0:	f000 fe52 	bl	8008478 <__assert_func>
 80077d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d8:	6004      	str	r4, [r0, #0]
 80077da:	60c4      	str	r4, [r0, #12]
 80077dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e4:	b94c      	cbnz	r4, 80077fa <__pow5mult+0x66>
 80077e6:	f240 2171 	movw	r1, #625	; 0x271
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ff14 	bl	8007618 <__i2b>
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	f04f 0900 	mov.w	r9, #0
 80077fe:	07eb      	lsls	r3, r5, #31
 8007800:	d50a      	bpl.n	8007818 <__pow5mult+0x84>
 8007802:	4639      	mov	r1, r7
 8007804:	4622      	mov	r2, r4
 8007806:	4630      	mov	r0, r6
 8007808:	f7ff ff1c 	bl	8007644 <__multiply>
 800780c:	4680      	mov	r8, r0
 800780e:	4639      	mov	r1, r7
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff fe01 	bl	8007418 <_Bfree>
 8007816:	4647      	mov	r7, r8
 8007818:	106d      	asrs	r5, r5, #1
 800781a:	d00b      	beq.n	8007834 <__pow5mult+0xa0>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	b938      	cbnz	r0, 8007830 <__pow5mult+0x9c>
 8007820:	4622      	mov	r2, r4
 8007822:	4621      	mov	r1, r4
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ff0d 	bl	8007644 <__multiply>
 800782a:	6020      	str	r0, [r4, #0]
 800782c:	f8c0 9000 	str.w	r9, [r0]
 8007830:	4604      	mov	r4, r0
 8007832:	e7e4      	b.n	80077fe <__pow5mult+0x6a>
 8007834:	4638      	mov	r0, r7
 8007836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783a:	bf00      	nop
 800783c:	08008fe0 	.word	0x08008fe0
 8007840:	08008e7a 	.word	0x08008e7a
 8007844:	08008e91 	.word	0x08008e91

08007848 <__lshift>:
 8007848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	4607      	mov	r7, r0
 8007850:	4691      	mov	r9, r2
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	6849      	ldr	r1, [r1, #4]
 8007856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800785a:	68a3      	ldr	r3, [r4, #8]
 800785c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007860:	f108 0601 	add.w	r6, r8, #1
 8007864:	42b3      	cmp	r3, r6
 8007866:	db0b      	blt.n	8007880 <__lshift+0x38>
 8007868:	4638      	mov	r0, r7
 800786a:	f7ff fd95 	bl	8007398 <_Balloc>
 800786e:	4605      	mov	r5, r0
 8007870:	b948      	cbnz	r0, 8007886 <__lshift+0x3e>
 8007872:	4602      	mov	r2, r0
 8007874:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007878:	4b27      	ldr	r3, [pc, #156]	; (8007918 <__lshift+0xd0>)
 800787a:	4828      	ldr	r0, [pc, #160]	; (800791c <__lshift+0xd4>)
 800787c:	f000 fdfc 	bl	8008478 <__assert_func>
 8007880:	3101      	adds	r1, #1
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	e7ee      	b.n	8007864 <__lshift+0x1c>
 8007886:	2300      	movs	r3, #0
 8007888:	f100 0114 	add.w	r1, r0, #20
 800788c:	f100 0210 	add.w	r2, r0, #16
 8007890:	4618      	mov	r0, r3
 8007892:	4553      	cmp	r3, sl
 8007894:	db33      	blt.n	80078fe <__lshift+0xb6>
 8007896:	6920      	ldr	r0, [r4, #16]
 8007898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800789c:	f104 0314 	add.w	r3, r4, #20
 80078a0:	f019 091f 	ands.w	r9, r9, #31
 80078a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078ac:	d02b      	beq.n	8007906 <__lshift+0xbe>
 80078ae:	468a      	mov	sl, r1
 80078b0:	2200      	movs	r2, #0
 80078b2:	f1c9 0e20 	rsb	lr, r9, #32
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	fa00 f009 	lsl.w	r0, r0, r9
 80078bc:	4310      	orrs	r0, r2
 80078be:	f84a 0b04 	str.w	r0, [sl], #4
 80078c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c6:	459c      	cmp	ip, r3
 80078c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80078cc:	d8f3      	bhi.n	80078b6 <__lshift+0x6e>
 80078ce:	ebac 0304 	sub.w	r3, ip, r4
 80078d2:	3b15      	subs	r3, #21
 80078d4:	f023 0303 	bic.w	r3, r3, #3
 80078d8:	3304      	adds	r3, #4
 80078da:	f104 0015 	add.w	r0, r4, #21
 80078de:	4584      	cmp	ip, r0
 80078e0:	bf38      	it	cc
 80078e2:	2304      	movcc	r3, #4
 80078e4:	50ca      	str	r2, [r1, r3]
 80078e6:	b10a      	cbz	r2, 80078ec <__lshift+0xa4>
 80078e8:	f108 0602 	add.w	r6, r8, #2
 80078ec:	3e01      	subs	r6, #1
 80078ee:	4638      	mov	r0, r7
 80078f0:	4621      	mov	r1, r4
 80078f2:	612e      	str	r6, [r5, #16]
 80078f4:	f7ff fd90 	bl	8007418 <_Bfree>
 80078f8:	4628      	mov	r0, r5
 80078fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007902:	3301      	adds	r3, #1
 8007904:	e7c5      	b.n	8007892 <__lshift+0x4a>
 8007906:	3904      	subs	r1, #4
 8007908:	f853 2b04 	ldr.w	r2, [r3], #4
 800790c:	459c      	cmp	ip, r3
 800790e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007912:	d8f9      	bhi.n	8007908 <__lshift+0xc0>
 8007914:	e7ea      	b.n	80078ec <__lshift+0xa4>
 8007916:	bf00      	nop
 8007918:	08008e09 	.word	0x08008e09
 800791c:	08008e91 	.word	0x08008e91

08007920 <__mcmp>:
 8007920:	4603      	mov	r3, r0
 8007922:	690a      	ldr	r2, [r1, #16]
 8007924:	6900      	ldr	r0, [r0, #16]
 8007926:	b530      	push	{r4, r5, lr}
 8007928:	1a80      	subs	r0, r0, r2
 800792a:	d10d      	bne.n	8007948 <__mcmp+0x28>
 800792c:	3314      	adds	r3, #20
 800792e:	3114      	adds	r1, #20
 8007930:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007934:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007938:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800793c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007940:	4295      	cmp	r5, r2
 8007942:	d002      	beq.n	800794a <__mcmp+0x2a>
 8007944:	d304      	bcc.n	8007950 <__mcmp+0x30>
 8007946:	2001      	movs	r0, #1
 8007948:	bd30      	pop	{r4, r5, pc}
 800794a:	42a3      	cmp	r3, r4
 800794c:	d3f4      	bcc.n	8007938 <__mcmp+0x18>
 800794e:	e7fb      	b.n	8007948 <__mcmp+0x28>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	e7f8      	b.n	8007948 <__mcmp+0x28>
	...

08007958 <__mdiff>:
 8007958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	460d      	mov	r5, r1
 800795e:	4607      	mov	r7, r0
 8007960:	4611      	mov	r1, r2
 8007962:	4628      	mov	r0, r5
 8007964:	4614      	mov	r4, r2
 8007966:	f7ff ffdb 	bl	8007920 <__mcmp>
 800796a:	1e06      	subs	r6, r0, #0
 800796c:	d111      	bne.n	8007992 <__mdiff+0x3a>
 800796e:	4631      	mov	r1, r6
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff fd11 	bl	8007398 <_Balloc>
 8007976:	4602      	mov	r2, r0
 8007978:	b928      	cbnz	r0, 8007986 <__mdiff+0x2e>
 800797a:	f240 2137 	movw	r1, #567	; 0x237
 800797e:	4b3a      	ldr	r3, [pc, #232]	; (8007a68 <__mdiff+0x110>)
 8007980:	483a      	ldr	r0, [pc, #232]	; (8007a6c <__mdiff+0x114>)
 8007982:	f000 fd79 	bl	8008478 <__assert_func>
 8007986:	2301      	movs	r3, #1
 8007988:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800798c:	4610      	mov	r0, r2
 800798e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007992:	bfa4      	itt	ge
 8007994:	4623      	movge	r3, r4
 8007996:	462c      	movge	r4, r5
 8007998:	4638      	mov	r0, r7
 800799a:	6861      	ldr	r1, [r4, #4]
 800799c:	bfa6      	itte	ge
 800799e:	461d      	movge	r5, r3
 80079a0:	2600      	movge	r6, #0
 80079a2:	2601      	movlt	r6, #1
 80079a4:	f7ff fcf8 	bl	8007398 <_Balloc>
 80079a8:	4602      	mov	r2, r0
 80079aa:	b918      	cbnz	r0, 80079b4 <__mdiff+0x5c>
 80079ac:	f240 2145 	movw	r1, #581	; 0x245
 80079b0:	4b2d      	ldr	r3, [pc, #180]	; (8007a68 <__mdiff+0x110>)
 80079b2:	e7e5      	b.n	8007980 <__mdiff+0x28>
 80079b4:	f102 0814 	add.w	r8, r2, #20
 80079b8:	46c2      	mov	sl, r8
 80079ba:	f04f 0c00 	mov.w	ip, #0
 80079be:	6927      	ldr	r7, [r4, #16]
 80079c0:	60c6      	str	r6, [r0, #12]
 80079c2:	692e      	ldr	r6, [r5, #16]
 80079c4:	f104 0014 	add.w	r0, r4, #20
 80079c8:	f105 0914 	add.w	r9, r5, #20
 80079cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80079d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079d4:	3410      	adds	r4, #16
 80079d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80079da:	f859 3b04 	ldr.w	r3, [r9], #4
 80079de:	fa1f f18b 	uxth.w	r1, fp
 80079e2:	4461      	add	r1, ip
 80079e4:	fa1f fc83 	uxth.w	ip, r3
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	eba1 010c 	sub.w	r1, r1, ip
 80079ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079f6:	b289      	uxth	r1, r1
 80079f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80079fc:	454e      	cmp	r6, r9
 80079fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a02:	f84a 1b04 	str.w	r1, [sl], #4
 8007a06:	d8e6      	bhi.n	80079d6 <__mdiff+0x7e>
 8007a08:	1b73      	subs	r3, r6, r5
 8007a0a:	3b15      	subs	r3, #21
 8007a0c:	f023 0303 	bic.w	r3, r3, #3
 8007a10:	3515      	adds	r5, #21
 8007a12:	3304      	adds	r3, #4
 8007a14:	42ae      	cmp	r6, r5
 8007a16:	bf38      	it	cc
 8007a18:	2304      	movcc	r3, #4
 8007a1a:	4418      	add	r0, r3
 8007a1c:	4443      	add	r3, r8
 8007a1e:	461e      	mov	r6, r3
 8007a20:	4605      	mov	r5, r0
 8007a22:	4575      	cmp	r5, lr
 8007a24:	d30e      	bcc.n	8007a44 <__mdiff+0xec>
 8007a26:	f10e 0103 	add.w	r1, lr, #3
 8007a2a:	1a09      	subs	r1, r1, r0
 8007a2c:	f021 0103 	bic.w	r1, r1, #3
 8007a30:	3803      	subs	r0, #3
 8007a32:	4586      	cmp	lr, r0
 8007a34:	bf38      	it	cc
 8007a36:	2100      	movcc	r1, #0
 8007a38:	440b      	add	r3, r1
 8007a3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a3e:	b189      	cbz	r1, 8007a64 <__mdiff+0x10c>
 8007a40:	6117      	str	r7, [r2, #16]
 8007a42:	e7a3      	b.n	800798c <__mdiff+0x34>
 8007a44:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a48:	fa1f f188 	uxth.w	r1, r8
 8007a4c:	4461      	add	r1, ip
 8007a4e:	140c      	asrs	r4, r1, #16
 8007a50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a54:	b289      	uxth	r1, r1
 8007a56:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a5a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a5e:	f846 1b04 	str.w	r1, [r6], #4
 8007a62:	e7de      	b.n	8007a22 <__mdiff+0xca>
 8007a64:	3f01      	subs	r7, #1
 8007a66:	e7e8      	b.n	8007a3a <__mdiff+0xe2>
 8007a68:	08008e09 	.word	0x08008e09
 8007a6c:	08008e91 	.word	0x08008e91

08007a70 <__ulp>:
 8007a70:	4b0e      	ldr	r3, [pc, #56]	; (8007aac <__ulp+0x3c>)
 8007a72:	400b      	ands	r3, r1
 8007a74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc08      	bgt.n	8007a8e <__ulp+0x1e>
 8007a7c:	425b      	negs	r3, r3
 8007a7e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a86:	da04      	bge.n	8007a92 <__ulp+0x22>
 8007a88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a8c:	4113      	asrs	r3, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	e008      	b.n	8007aa4 <__ulp+0x34>
 8007a92:	f1a2 0314 	sub.w	r3, r2, #20
 8007a96:	2b1e      	cmp	r3, #30
 8007a98:	bfd6      	itet	le
 8007a9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007a9e:	2201      	movgt	r2, #1
 8007aa0:	40da      	lsrle	r2, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	7ff00000 	.word	0x7ff00000

08007ab0 <__b2d>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	6905      	ldr	r5, [r0, #16]
 8007ab4:	f100 0714 	add.w	r7, r0, #20
 8007ab8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007abc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007ac0:	1f2e      	subs	r6, r5, #4
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7ff fd5a 	bl	800757c <__hi0bits>
 8007ac8:	f1c0 0220 	rsb	r2, r0, #32
 8007acc:	280a      	cmp	r0, #10
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007b3c <__b2d+0x8c>
 8007ad4:	600a      	str	r2, [r1, #0]
 8007ad6:	dc12      	bgt.n	8007afe <__b2d+0x4e>
 8007ad8:	f1c0 0e0b 	rsb	lr, r0, #11
 8007adc:	fa24 f20e 	lsr.w	r2, r4, lr
 8007ae0:	42b7      	cmp	r7, r6
 8007ae2:	ea42 010c 	orr.w	r1, r2, ip
 8007ae6:	bf2c      	ite	cs
 8007ae8:	2200      	movcs	r2, #0
 8007aea:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007aee:	3315      	adds	r3, #21
 8007af0:	fa04 f303 	lsl.w	r3, r4, r3
 8007af4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007af8:	431a      	orrs	r2, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007afe:	42b7      	cmp	r7, r6
 8007b00:	bf2e      	itee	cs
 8007b02:	2200      	movcs	r2, #0
 8007b04:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007b08:	f1a5 0608 	subcc.w	r6, r5, #8
 8007b0c:	3b0b      	subs	r3, #11
 8007b0e:	d012      	beq.n	8007b36 <__b2d+0x86>
 8007b10:	f1c3 0520 	rsb	r5, r3, #32
 8007b14:	fa22 f105 	lsr.w	r1, r2, r5
 8007b18:	409c      	lsls	r4, r3
 8007b1a:	430c      	orrs	r4, r1
 8007b1c:	42be      	cmp	r6, r7
 8007b1e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007b22:	bf94      	ite	ls
 8007b24:	2400      	movls	r4, #0
 8007b26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007b2a:	409a      	lsls	r2, r3
 8007b2c:	40ec      	lsrs	r4, r5
 8007b2e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007b32:	4322      	orrs	r2, r4
 8007b34:	e7e1      	b.n	8007afa <__b2d+0x4a>
 8007b36:	ea44 010c 	orr.w	r1, r4, ip
 8007b3a:	e7de      	b.n	8007afa <__b2d+0x4a>
 8007b3c:	3ff00000 	.word	0x3ff00000

08007b40 <__d2b>:
 8007b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b42:	2101      	movs	r1, #1
 8007b44:	4617      	mov	r7, r2
 8007b46:	461c      	mov	r4, r3
 8007b48:	9e08      	ldr	r6, [sp, #32]
 8007b4a:	f7ff fc25 	bl	8007398 <_Balloc>
 8007b4e:	4605      	mov	r5, r0
 8007b50:	b930      	cbnz	r0, 8007b60 <__d2b+0x20>
 8007b52:	4602      	mov	r2, r0
 8007b54:	f240 310f 	movw	r1, #783	; 0x30f
 8007b58:	4b22      	ldr	r3, [pc, #136]	; (8007be4 <__d2b+0xa4>)
 8007b5a:	4823      	ldr	r0, [pc, #140]	; (8007be8 <__d2b+0xa8>)
 8007b5c:	f000 fc8c 	bl	8008478 <__assert_func>
 8007b60:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007b64:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007b68:	bb24      	cbnz	r4, 8007bb4 <__d2b+0x74>
 8007b6a:	2f00      	cmp	r7, #0
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	d026      	beq.n	8007bbe <__d2b+0x7e>
 8007b70:	4668      	mov	r0, sp
 8007b72:	9700      	str	r7, [sp, #0]
 8007b74:	f7ff fd22 	bl	80075bc <__lo0bits>
 8007b78:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b7c:	b1e8      	cbz	r0, 8007bba <__d2b+0x7a>
 8007b7e:	f1c0 0320 	rsb	r3, r0, #32
 8007b82:	fa02 f303 	lsl.w	r3, r2, r3
 8007b86:	430b      	orrs	r3, r1
 8007b88:	40c2      	lsrs	r2, r0
 8007b8a:	616b      	str	r3, [r5, #20]
 8007b8c:	9201      	str	r2, [sp, #4]
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf14      	ite	ne
 8007b94:	2102      	movne	r1, #2
 8007b96:	2101      	moveq	r1, #1
 8007b98:	61ab      	str	r3, [r5, #24]
 8007b9a:	6129      	str	r1, [r5, #16]
 8007b9c:	b1bc      	cbz	r4, 8007bce <__d2b+0x8e>
 8007b9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ba2:	4404      	add	r4, r0
 8007ba4:	6034      	str	r4, [r6, #0]
 8007ba6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bac:	6018      	str	r0, [r3, #0]
 8007bae:	4628      	mov	r0, r5
 8007bb0:	b003      	add	sp, #12
 8007bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bb8:	e7d7      	b.n	8007b6a <__d2b+0x2a>
 8007bba:	6169      	str	r1, [r5, #20]
 8007bbc:	e7e7      	b.n	8007b8e <__d2b+0x4e>
 8007bbe:	a801      	add	r0, sp, #4
 8007bc0:	f7ff fcfc 	bl	80075bc <__lo0bits>
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	616b      	str	r3, [r5, #20]
 8007bca:	3020      	adds	r0, #32
 8007bcc:	e7e5      	b.n	8007b9a <__d2b+0x5a>
 8007bce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bd2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007bd6:	6030      	str	r0, [r6, #0]
 8007bd8:	6918      	ldr	r0, [r3, #16]
 8007bda:	f7ff fccf 	bl	800757c <__hi0bits>
 8007bde:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007be2:	e7e2      	b.n	8007baa <__d2b+0x6a>
 8007be4:	08008e09 	.word	0x08008e09
 8007be8:	08008e91 	.word	0x08008e91

08007bec <__ratio>:
 8007bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4688      	mov	r8, r1
 8007bf2:	4669      	mov	r1, sp
 8007bf4:	4681      	mov	r9, r0
 8007bf6:	f7ff ff5b 	bl	8007ab0 <__b2d>
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	460d      	mov	r5, r1
 8007c00:	4640      	mov	r0, r8
 8007c02:	a901      	add	r1, sp, #4
 8007c04:	f7ff ff54 	bl	8007ab0 <__b2d>
 8007c08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c0c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c10:	468b      	mov	fp, r1
 8007c12:	eba3 0c02 	sub.w	ip, r3, r2
 8007c16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c1a:	1a9b      	subs	r3, r3, r2
 8007c1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bfd5      	itete	le
 8007c24:	460a      	movle	r2, r1
 8007c26:	462a      	movgt	r2, r5
 8007c28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c2c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c30:	bfd8      	it	le
 8007c32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c36:	465b      	mov	r3, fp
 8007c38:	4602      	mov	r2, r0
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f7f8 fd7f 	bl	8000740 <__aeabi_ddiv>
 8007c42:	b003      	add	sp, #12
 8007c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c48 <__copybits>:
 8007c48:	3901      	subs	r1, #1
 8007c4a:	b570      	push	{r4, r5, r6, lr}
 8007c4c:	1149      	asrs	r1, r1, #5
 8007c4e:	6914      	ldr	r4, [r2, #16]
 8007c50:	3101      	adds	r1, #1
 8007c52:	f102 0314 	add.w	r3, r2, #20
 8007c56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c5e:	1f05      	subs	r5, r0, #4
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d30c      	bcc.n	8007c7e <__copybits+0x36>
 8007c64:	1aa3      	subs	r3, r4, r2
 8007c66:	3b11      	subs	r3, #17
 8007c68:	f023 0303 	bic.w	r3, r3, #3
 8007c6c:	3211      	adds	r2, #17
 8007c6e:	42a2      	cmp	r2, r4
 8007c70:	bf88      	it	hi
 8007c72:	2300      	movhi	r3, #0
 8007c74:	4418      	add	r0, r3
 8007c76:	2300      	movs	r3, #0
 8007c78:	4288      	cmp	r0, r1
 8007c7a:	d305      	bcc.n	8007c88 <__copybits+0x40>
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
 8007c7e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c82:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c86:	e7eb      	b.n	8007c60 <__copybits+0x18>
 8007c88:	f840 3b04 	str.w	r3, [r0], #4
 8007c8c:	e7f4      	b.n	8007c78 <__copybits+0x30>

08007c8e <__any_on>:
 8007c8e:	f100 0214 	add.w	r2, r0, #20
 8007c92:	6900      	ldr	r0, [r0, #16]
 8007c94:	114b      	asrs	r3, r1, #5
 8007c96:	4298      	cmp	r0, r3
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	db11      	blt.n	8007cc0 <__any_on+0x32>
 8007c9c:	dd0a      	ble.n	8007cb4 <__any_on+0x26>
 8007c9e:	f011 011f 	ands.w	r1, r1, #31
 8007ca2:	d007      	beq.n	8007cb4 <__any_on+0x26>
 8007ca4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ca8:	fa24 f001 	lsr.w	r0, r4, r1
 8007cac:	fa00 f101 	lsl.w	r1, r0, r1
 8007cb0:	428c      	cmp	r4, r1
 8007cb2:	d10b      	bne.n	8007ccc <__any_on+0x3e>
 8007cb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d803      	bhi.n	8007cc4 <__any_on+0x36>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	bd10      	pop	{r4, pc}
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	e7f7      	b.n	8007cb4 <__any_on+0x26>
 8007cc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	d0f5      	beq.n	8007cb8 <__any_on+0x2a>
 8007ccc:	2001      	movs	r0, #1
 8007cce:	e7f6      	b.n	8007cbe <__any_on+0x30>

08007cd0 <_malloc_usable_size_r>:
 8007cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd4:	1f18      	subs	r0, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bfbc      	itt	lt
 8007cda:	580b      	ldrlt	r3, [r1, r0]
 8007cdc:	18c0      	addlt	r0, r0, r3
 8007cde:	4770      	bx	lr

08007ce0 <__ascii_wctomb>:
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	4608      	mov	r0, r1
 8007ce4:	b141      	cbz	r1, 8007cf8 <__ascii_wctomb+0x18>
 8007ce6:	2aff      	cmp	r2, #255	; 0xff
 8007ce8:	d904      	bls.n	8007cf4 <__ascii_wctomb+0x14>
 8007cea:	228a      	movs	r2, #138	; 0x8a
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	4770      	bx	lr
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	700a      	strb	r2, [r1, #0]
 8007cf8:	4770      	bx	lr

08007cfa <__ssputs_r>:
 8007cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfe:	461f      	mov	r7, r3
 8007d00:	688e      	ldr	r6, [r1, #8]
 8007d02:	4682      	mov	sl, r0
 8007d04:	42be      	cmp	r6, r7
 8007d06:	460c      	mov	r4, r1
 8007d08:	4690      	mov	r8, r2
 8007d0a:	680b      	ldr	r3, [r1, #0]
 8007d0c:	d82c      	bhi.n	8007d68 <__ssputs_r+0x6e>
 8007d0e:	898a      	ldrh	r2, [r1, #12]
 8007d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d14:	d026      	beq.n	8007d64 <__ssputs_r+0x6a>
 8007d16:	6965      	ldr	r5, [r4, #20]
 8007d18:	6909      	ldr	r1, [r1, #16]
 8007d1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d1e:	eba3 0901 	sub.w	r9, r3, r1
 8007d22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d26:	1c7b      	adds	r3, r7, #1
 8007d28:	444b      	add	r3, r9
 8007d2a:	106d      	asrs	r5, r5, #1
 8007d2c:	429d      	cmp	r5, r3
 8007d2e:	bf38      	it	cc
 8007d30:	461d      	movcc	r5, r3
 8007d32:	0553      	lsls	r3, r2, #21
 8007d34:	d527      	bpl.n	8007d86 <__ssputs_r+0x8c>
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7fd fed2 	bl	8005ae0 <_malloc_r>
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	b360      	cbz	r0, 8007d9a <__ssputs_r+0xa0>
 8007d40:	464a      	mov	r2, r9
 8007d42:	6921      	ldr	r1, [r4, #16]
 8007d44:	f7fe ff60 	bl	8006c08 <memcpy>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	6126      	str	r6, [r4, #16]
 8007d56:	444e      	add	r6, r9
 8007d58:	6026      	str	r6, [r4, #0]
 8007d5a:	463e      	mov	r6, r7
 8007d5c:	6165      	str	r5, [r4, #20]
 8007d5e:	eba5 0509 	sub.w	r5, r5, r9
 8007d62:	60a5      	str	r5, [r4, #8]
 8007d64:	42be      	cmp	r6, r7
 8007d66:	d900      	bls.n	8007d6a <__ssputs_r+0x70>
 8007d68:	463e      	mov	r6, r7
 8007d6a:	4632      	mov	r2, r6
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	6820      	ldr	r0, [r4, #0]
 8007d70:	f000 fb5a 	bl	8008428 <memmove>
 8007d74:	2000      	movs	r0, #0
 8007d76:	68a3      	ldr	r3, [r4, #8]
 8007d78:	1b9b      	subs	r3, r3, r6
 8007d7a:	60a3      	str	r3, [r4, #8]
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	4433      	add	r3, r6
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d86:	462a      	mov	r2, r5
 8007d88:	f7fd ff3e 	bl	8005c08 <_realloc_r>
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d1e0      	bne.n	8007d54 <__ssputs_r+0x5a>
 8007d92:	4650      	mov	r0, sl
 8007d94:	6921      	ldr	r1, [r4, #16]
 8007d96:	f7fe ff4b 	bl	8006c30 <_free_r>
 8007d9a:	230c      	movs	r3, #12
 8007d9c:	f8ca 3000 	str.w	r3, [sl]
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	e7e9      	b.n	8007d82 <__ssputs_r+0x88>
	...

08007db0 <_svfiprintf_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	4698      	mov	r8, r3
 8007db6:	898b      	ldrh	r3, [r1, #12]
 8007db8:	4607      	mov	r7, r0
 8007dba:	061b      	lsls	r3, r3, #24
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	4614      	mov	r4, r2
 8007dc0:	b09d      	sub	sp, #116	; 0x74
 8007dc2:	d50e      	bpl.n	8007de2 <_svfiprintf_r+0x32>
 8007dc4:	690b      	ldr	r3, [r1, #16]
 8007dc6:	b963      	cbnz	r3, 8007de2 <_svfiprintf_r+0x32>
 8007dc8:	2140      	movs	r1, #64	; 0x40
 8007dca:	f7fd fe89 	bl	8005ae0 <_malloc_r>
 8007dce:	6028      	str	r0, [r5, #0]
 8007dd0:	6128      	str	r0, [r5, #16]
 8007dd2:	b920      	cbnz	r0, 8007dde <_svfiprintf_r+0x2e>
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ddc:	e0d0      	b.n	8007f80 <_svfiprintf_r+0x1d0>
 8007dde:	2340      	movs	r3, #64	; 0x40
 8007de0:	616b      	str	r3, [r5, #20]
 8007de2:	2300      	movs	r3, #0
 8007de4:	9309      	str	r3, [sp, #36]	; 0x24
 8007de6:	2320      	movs	r3, #32
 8007de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dec:	2330      	movs	r3, #48	; 0x30
 8007dee:	f04f 0901 	mov.w	r9, #1
 8007df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007f98 <_svfiprintf_r+0x1e8>
 8007dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dfe:	4623      	mov	r3, r4
 8007e00:	469a      	mov	sl, r3
 8007e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e06:	b10a      	cbz	r2, 8007e0c <_svfiprintf_r+0x5c>
 8007e08:	2a25      	cmp	r2, #37	; 0x25
 8007e0a:	d1f9      	bne.n	8007e00 <_svfiprintf_r+0x50>
 8007e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e10:	d00b      	beq.n	8007e2a <_svfiprintf_r+0x7a>
 8007e12:	465b      	mov	r3, fp
 8007e14:	4622      	mov	r2, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f7ff ff6e 	bl	8007cfa <__ssputs_r>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f000 80a9 	beq.w	8007f76 <_svfiprintf_r+0x1c6>
 8007e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e26:	445a      	add	r2, fp
 8007e28:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80a1 	beq.w	8007f76 <_svfiprintf_r+0x1c6>
 8007e34:	2300      	movs	r3, #0
 8007e36:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e3e:	f10a 0a01 	add.w	sl, sl, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9307      	str	r3, [sp, #28]
 8007e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e4c:	4654      	mov	r4, sl
 8007e4e:	2205      	movs	r2, #5
 8007e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e54:	4850      	ldr	r0, [pc, #320]	; (8007f98 <_svfiprintf_r+0x1e8>)
 8007e56:	f000 fb01 	bl	800845c <memchr>
 8007e5a:	9a04      	ldr	r2, [sp, #16]
 8007e5c:	b9d8      	cbnz	r0, 8007e96 <_svfiprintf_r+0xe6>
 8007e5e:	06d0      	lsls	r0, r2, #27
 8007e60:	bf44      	itt	mi
 8007e62:	2320      	movmi	r3, #32
 8007e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e68:	0711      	lsls	r1, r2, #28
 8007e6a:	bf44      	itt	mi
 8007e6c:	232b      	movmi	r3, #43	; 0x2b
 8007e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e72:	f89a 3000 	ldrb.w	r3, [sl]
 8007e76:	2b2a      	cmp	r3, #42	; 0x2a
 8007e78:	d015      	beq.n	8007ea6 <_svfiprintf_r+0xf6>
 8007e7a:	4654      	mov	r4, sl
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	f04f 0c0a 	mov.w	ip, #10
 8007e82:	9a07      	ldr	r2, [sp, #28]
 8007e84:	4621      	mov	r1, r4
 8007e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8a:	3b30      	subs	r3, #48	; 0x30
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	d94d      	bls.n	8007f2c <_svfiprintf_r+0x17c>
 8007e90:	b1b0      	cbz	r0, 8007ec0 <_svfiprintf_r+0x110>
 8007e92:	9207      	str	r2, [sp, #28]
 8007e94:	e014      	b.n	8007ec0 <_svfiprintf_r+0x110>
 8007e96:	eba0 0308 	sub.w	r3, r0, r8
 8007e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	46a2      	mov	sl, r4
 8007ea2:	9304      	str	r3, [sp, #16]
 8007ea4:	e7d2      	b.n	8007e4c <_svfiprintf_r+0x9c>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	1d19      	adds	r1, r3, #4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	9103      	str	r1, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfbb      	ittet	lt
 8007eb2:	425b      	neglt	r3, r3
 8007eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb8:	9307      	strge	r3, [sp, #28]
 8007eba:	9307      	strlt	r3, [sp, #28]
 8007ebc:	bfb8      	it	lt
 8007ebe:	9204      	strlt	r2, [sp, #16]
 8007ec0:	7823      	ldrb	r3, [r4, #0]
 8007ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ec4:	d10c      	bne.n	8007ee0 <_svfiprintf_r+0x130>
 8007ec6:	7863      	ldrb	r3, [r4, #1]
 8007ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eca:	d134      	bne.n	8007f36 <_svfiprintf_r+0x186>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	3402      	adds	r4, #2
 8007ed0:	1d1a      	adds	r2, r3, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	9203      	str	r2, [sp, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfb8      	it	lt
 8007eda:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ede:	9305      	str	r3, [sp, #20]
 8007ee0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007f9c <_svfiprintf_r+0x1ec>
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	4650      	mov	r0, sl
 8007ee8:	7821      	ldrb	r1, [r4, #0]
 8007eea:	f000 fab7 	bl	800845c <memchr>
 8007eee:	b138      	cbz	r0, 8007f00 <_svfiprintf_r+0x150>
 8007ef0:	2240      	movs	r2, #64	; 0x40
 8007ef2:	9b04      	ldr	r3, [sp, #16]
 8007ef4:	eba0 000a 	sub.w	r0, r0, sl
 8007ef8:	4082      	lsls	r2, r0
 8007efa:	4313      	orrs	r3, r2
 8007efc:	3401      	adds	r4, #1
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f04:	2206      	movs	r2, #6
 8007f06:	4826      	ldr	r0, [pc, #152]	; (8007fa0 <_svfiprintf_r+0x1f0>)
 8007f08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f0c:	f000 faa6 	bl	800845c <memchr>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d038      	beq.n	8007f86 <_svfiprintf_r+0x1d6>
 8007f14:	4b23      	ldr	r3, [pc, #140]	; (8007fa4 <_svfiprintf_r+0x1f4>)
 8007f16:	bb1b      	cbnz	r3, 8007f60 <_svfiprintf_r+0x1b0>
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	3307      	adds	r3, #7
 8007f1c:	f023 0307 	bic.w	r3, r3, #7
 8007f20:	3308      	adds	r3, #8
 8007f22:	9303      	str	r3, [sp, #12]
 8007f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f26:	4433      	add	r3, r6
 8007f28:	9309      	str	r3, [sp, #36]	; 0x24
 8007f2a:	e768      	b.n	8007dfe <_svfiprintf_r+0x4e>
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	2001      	movs	r0, #1
 8007f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f34:	e7a6      	b.n	8007e84 <_svfiprintf_r+0xd4>
 8007f36:	2300      	movs	r3, #0
 8007f38:	f04f 0c0a 	mov.w	ip, #10
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	3401      	adds	r4, #1
 8007f40:	9305      	str	r3, [sp, #20]
 8007f42:	4620      	mov	r0, r4
 8007f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f48:	3a30      	subs	r2, #48	; 0x30
 8007f4a:	2a09      	cmp	r2, #9
 8007f4c:	d903      	bls.n	8007f56 <_svfiprintf_r+0x1a6>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0c6      	beq.n	8007ee0 <_svfiprintf_r+0x130>
 8007f52:	9105      	str	r1, [sp, #20]
 8007f54:	e7c4      	b.n	8007ee0 <_svfiprintf_r+0x130>
 8007f56:	4604      	mov	r4, r0
 8007f58:	2301      	movs	r3, #1
 8007f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f5e:	e7f0      	b.n	8007f42 <_svfiprintf_r+0x192>
 8007f60:	ab03      	add	r3, sp, #12
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	462a      	mov	r2, r5
 8007f66:	4638      	mov	r0, r7
 8007f68:	4b0f      	ldr	r3, [pc, #60]	; (8007fa8 <_svfiprintf_r+0x1f8>)
 8007f6a:	a904      	add	r1, sp, #16
 8007f6c:	f3af 8000 	nop.w
 8007f70:	1c42      	adds	r2, r0, #1
 8007f72:	4606      	mov	r6, r0
 8007f74:	d1d6      	bne.n	8007f24 <_svfiprintf_r+0x174>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	065b      	lsls	r3, r3, #25
 8007f7a:	f53f af2d 	bmi.w	8007dd8 <_svfiprintf_r+0x28>
 8007f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f80:	b01d      	add	sp, #116	; 0x74
 8007f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f86:	ab03      	add	r3, sp, #12
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	462a      	mov	r2, r5
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <_svfiprintf_r+0x1f8>)
 8007f90:	a904      	add	r1, sp, #16
 8007f92:	f000 f87d 	bl	8008090 <_printf_i>
 8007f96:	e7eb      	b.n	8007f70 <_svfiprintf_r+0x1c0>
 8007f98:	08008fec 	.word	0x08008fec
 8007f9c:	08008ff2 	.word	0x08008ff2
 8007fa0:	08008ff6 	.word	0x08008ff6
 8007fa4:	00000000 	.word	0x00000000
 8007fa8:	08007cfb 	.word	0x08007cfb

08007fac <_printf_common>:
 8007fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	4616      	mov	r6, r2
 8007fb2:	4699      	mov	r9, r3
 8007fb4:	688a      	ldr	r2, [r1, #8]
 8007fb6:	690b      	ldr	r3, [r1, #16]
 8007fb8:	4607      	mov	r7, r0
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	bfb8      	it	lt
 8007fbe:	4613      	movlt	r3, r2
 8007fc0:	6033      	str	r3, [r6, #0]
 8007fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fcc:	b10a      	cbz	r2, 8007fd2 <_printf_common+0x26>
 8007fce:	3301      	adds	r3, #1
 8007fd0:	6033      	str	r3, [r6, #0]
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	0699      	lsls	r1, r3, #26
 8007fd6:	bf42      	ittt	mi
 8007fd8:	6833      	ldrmi	r3, [r6, #0]
 8007fda:	3302      	addmi	r3, #2
 8007fdc:	6033      	strmi	r3, [r6, #0]
 8007fde:	6825      	ldr	r5, [r4, #0]
 8007fe0:	f015 0506 	ands.w	r5, r5, #6
 8007fe4:	d106      	bne.n	8007ff4 <_printf_common+0x48>
 8007fe6:	f104 0a19 	add.w	sl, r4, #25
 8007fea:	68e3      	ldr	r3, [r4, #12]
 8007fec:	6832      	ldr	r2, [r6, #0]
 8007fee:	1a9b      	subs	r3, r3, r2
 8007ff0:	42ab      	cmp	r3, r5
 8007ff2:	dc2b      	bgt.n	800804c <_printf_common+0xa0>
 8007ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ff8:	1e13      	subs	r3, r2, #0
 8007ffa:	6822      	ldr	r2, [r4, #0]
 8007ffc:	bf18      	it	ne
 8007ffe:	2301      	movne	r3, #1
 8008000:	0692      	lsls	r2, r2, #26
 8008002:	d430      	bmi.n	8008066 <_printf_common+0xba>
 8008004:	4649      	mov	r1, r9
 8008006:	4638      	mov	r0, r7
 8008008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800800c:	47c0      	blx	r8
 800800e:	3001      	adds	r0, #1
 8008010:	d023      	beq.n	800805a <_printf_common+0xae>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	6922      	ldr	r2, [r4, #16]
 8008016:	f003 0306 	and.w	r3, r3, #6
 800801a:	2b04      	cmp	r3, #4
 800801c:	bf14      	ite	ne
 800801e:	2500      	movne	r5, #0
 8008020:	6833      	ldreq	r3, [r6, #0]
 8008022:	f04f 0600 	mov.w	r6, #0
 8008026:	bf08      	it	eq
 8008028:	68e5      	ldreq	r5, [r4, #12]
 800802a:	f104 041a 	add.w	r4, r4, #26
 800802e:	bf08      	it	eq
 8008030:	1aed      	subeq	r5, r5, r3
 8008032:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008036:	bf08      	it	eq
 8008038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800803c:	4293      	cmp	r3, r2
 800803e:	bfc4      	itt	gt
 8008040:	1a9b      	subgt	r3, r3, r2
 8008042:	18ed      	addgt	r5, r5, r3
 8008044:	42b5      	cmp	r5, r6
 8008046:	d11a      	bne.n	800807e <_printf_common+0xd2>
 8008048:	2000      	movs	r0, #0
 800804a:	e008      	b.n	800805e <_printf_common+0xb2>
 800804c:	2301      	movs	r3, #1
 800804e:	4652      	mov	r2, sl
 8008050:	4649      	mov	r1, r9
 8008052:	4638      	mov	r0, r7
 8008054:	47c0      	blx	r8
 8008056:	3001      	adds	r0, #1
 8008058:	d103      	bne.n	8008062 <_printf_common+0xb6>
 800805a:	f04f 30ff 	mov.w	r0, #4294967295
 800805e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008062:	3501      	adds	r5, #1
 8008064:	e7c1      	b.n	8007fea <_printf_common+0x3e>
 8008066:	2030      	movs	r0, #48	; 0x30
 8008068:	18e1      	adds	r1, r4, r3
 800806a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008074:	4422      	add	r2, r4
 8008076:	3302      	adds	r3, #2
 8008078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800807c:	e7c2      	b.n	8008004 <_printf_common+0x58>
 800807e:	2301      	movs	r3, #1
 8008080:	4622      	mov	r2, r4
 8008082:	4649      	mov	r1, r9
 8008084:	4638      	mov	r0, r7
 8008086:	47c0      	blx	r8
 8008088:	3001      	adds	r0, #1
 800808a:	d0e6      	beq.n	800805a <_printf_common+0xae>
 800808c:	3601      	adds	r6, #1
 800808e:	e7d9      	b.n	8008044 <_printf_common+0x98>

08008090 <_printf_i>:
 8008090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	7e0f      	ldrb	r7, [r1, #24]
 8008096:	4691      	mov	r9, r2
 8008098:	2f78      	cmp	r7, #120	; 0x78
 800809a:	4680      	mov	r8, r0
 800809c:	460c      	mov	r4, r1
 800809e:	469a      	mov	sl, r3
 80080a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080a6:	d807      	bhi.n	80080b8 <_printf_i+0x28>
 80080a8:	2f62      	cmp	r7, #98	; 0x62
 80080aa:	d80a      	bhi.n	80080c2 <_printf_i+0x32>
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	f000 80d5 	beq.w	800825c <_printf_i+0x1cc>
 80080b2:	2f58      	cmp	r7, #88	; 0x58
 80080b4:	f000 80c1 	beq.w	800823a <_printf_i+0x1aa>
 80080b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080c0:	e03a      	b.n	8008138 <_printf_i+0xa8>
 80080c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080c6:	2b15      	cmp	r3, #21
 80080c8:	d8f6      	bhi.n	80080b8 <_printf_i+0x28>
 80080ca:	a101      	add	r1, pc, #4	; (adr r1, 80080d0 <_printf_i+0x40>)
 80080cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d0:	08008129 	.word	0x08008129
 80080d4:	0800813d 	.word	0x0800813d
 80080d8:	080080b9 	.word	0x080080b9
 80080dc:	080080b9 	.word	0x080080b9
 80080e0:	080080b9 	.word	0x080080b9
 80080e4:	080080b9 	.word	0x080080b9
 80080e8:	0800813d 	.word	0x0800813d
 80080ec:	080080b9 	.word	0x080080b9
 80080f0:	080080b9 	.word	0x080080b9
 80080f4:	080080b9 	.word	0x080080b9
 80080f8:	080080b9 	.word	0x080080b9
 80080fc:	08008243 	.word	0x08008243
 8008100:	08008169 	.word	0x08008169
 8008104:	080081fd 	.word	0x080081fd
 8008108:	080080b9 	.word	0x080080b9
 800810c:	080080b9 	.word	0x080080b9
 8008110:	08008265 	.word	0x08008265
 8008114:	080080b9 	.word	0x080080b9
 8008118:	08008169 	.word	0x08008169
 800811c:	080080b9 	.word	0x080080b9
 8008120:	080080b9 	.word	0x080080b9
 8008124:	08008205 	.word	0x08008205
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	1d1a      	adds	r2, r3, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	602a      	str	r2, [r5, #0]
 8008130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008138:	2301      	movs	r3, #1
 800813a:	e0a0      	b.n	800827e <_printf_i+0x1ee>
 800813c:	6820      	ldr	r0, [r4, #0]
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	0607      	lsls	r7, r0, #24
 8008142:	f103 0104 	add.w	r1, r3, #4
 8008146:	6029      	str	r1, [r5, #0]
 8008148:	d501      	bpl.n	800814e <_printf_i+0xbe>
 800814a:	681e      	ldr	r6, [r3, #0]
 800814c:	e003      	b.n	8008156 <_printf_i+0xc6>
 800814e:	0646      	lsls	r6, r0, #25
 8008150:	d5fb      	bpl.n	800814a <_printf_i+0xba>
 8008152:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008156:	2e00      	cmp	r6, #0
 8008158:	da03      	bge.n	8008162 <_printf_i+0xd2>
 800815a:	232d      	movs	r3, #45	; 0x2d
 800815c:	4276      	negs	r6, r6
 800815e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008162:	230a      	movs	r3, #10
 8008164:	4859      	ldr	r0, [pc, #356]	; (80082cc <_printf_i+0x23c>)
 8008166:	e012      	b.n	800818e <_printf_i+0xfe>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	6820      	ldr	r0, [r4, #0]
 800816c:	1d19      	adds	r1, r3, #4
 800816e:	6029      	str	r1, [r5, #0]
 8008170:	0605      	lsls	r5, r0, #24
 8008172:	d501      	bpl.n	8008178 <_printf_i+0xe8>
 8008174:	681e      	ldr	r6, [r3, #0]
 8008176:	e002      	b.n	800817e <_printf_i+0xee>
 8008178:	0641      	lsls	r1, r0, #25
 800817a:	d5fb      	bpl.n	8008174 <_printf_i+0xe4>
 800817c:	881e      	ldrh	r6, [r3, #0]
 800817e:	2f6f      	cmp	r7, #111	; 0x6f
 8008180:	bf0c      	ite	eq
 8008182:	2308      	moveq	r3, #8
 8008184:	230a      	movne	r3, #10
 8008186:	4851      	ldr	r0, [pc, #324]	; (80082cc <_printf_i+0x23c>)
 8008188:	2100      	movs	r1, #0
 800818a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800818e:	6865      	ldr	r5, [r4, #4]
 8008190:	2d00      	cmp	r5, #0
 8008192:	bfa8      	it	ge
 8008194:	6821      	ldrge	r1, [r4, #0]
 8008196:	60a5      	str	r5, [r4, #8]
 8008198:	bfa4      	itt	ge
 800819a:	f021 0104 	bicge.w	r1, r1, #4
 800819e:	6021      	strge	r1, [r4, #0]
 80081a0:	b90e      	cbnz	r6, 80081a6 <_printf_i+0x116>
 80081a2:	2d00      	cmp	r5, #0
 80081a4:	d04b      	beq.n	800823e <_printf_i+0x1ae>
 80081a6:	4615      	mov	r5, r2
 80081a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80081ac:	fb03 6711 	mls	r7, r3, r1, r6
 80081b0:	5dc7      	ldrb	r7, [r0, r7]
 80081b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081b6:	4637      	mov	r7, r6
 80081b8:	42bb      	cmp	r3, r7
 80081ba:	460e      	mov	r6, r1
 80081bc:	d9f4      	bls.n	80081a8 <_printf_i+0x118>
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d10b      	bne.n	80081da <_printf_i+0x14a>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	07de      	lsls	r6, r3, #31
 80081c6:	d508      	bpl.n	80081da <_printf_i+0x14a>
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	6861      	ldr	r1, [r4, #4]
 80081cc:	4299      	cmp	r1, r3
 80081ce:	bfde      	ittt	le
 80081d0:	2330      	movle	r3, #48	; 0x30
 80081d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081da:	1b52      	subs	r2, r2, r5
 80081dc:	6122      	str	r2, [r4, #16]
 80081de:	464b      	mov	r3, r9
 80081e0:	4621      	mov	r1, r4
 80081e2:	4640      	mov	r0, r8
 80081e4:	f8cd a000 	str.w	sl, [sp]
 80081e8:	aa03      	add	r2, sp, #12
 80081ea:	f7ff fedf 	bl	8007fac <_printf_common>
 80081ee:	3001      	adds	r0, #1
 80081f0:	d14a      	bne.n	8008288 <_printf_i+0x1f8>
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295
 80081f6:	b004      	add	sp, #16
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	f043 0320 	orr.w	r3, r3, #32
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	2778      	movs	r7, #120	; 0x78
 8008206:	4832      	ldr	r0, [pc, #200]	; (80082d0 <_printf_i+0x240>)
 8008208:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	6829      	ldr	r1, [r5, #0]
 8008210:	061f      	lsls	r7, r3, #24
 8008212:	f851 6b04 	ldr.w	r6, [r1], #4
 8008216:	d402      	bmi.n	800821e <_printf_i+0x18e>
 8008218:	065f      	lsls	r7, r3, #25
 800821a:	bf48      	it	mi
 800821c:	b2b6      	uxthmi	r6, r6
 800821e:	07df      	lsls	r7, r3, #31
 8008220:	bf48      	it	mi
 8008222:	f043 0320 	orrmi.w	r3, r3, #32
 8008226:	6029      	str	r1, [r5, #0]
 8008228:	bf48      	it	mi
 800822a:	6023      	strmi	r3, [r4, #0]
 800822c:	b91e      	cbnz	r6, 8008236 <_printf_i+0x1a6>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	f023 0320 	bic.w	r3, r3, #32
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	2310      	movs	r3, #16
 8008238:	e7a6      	b.n	8008188 <_printf_i+0xf8>
 800823a:	4824      	ldr	r0, [pc, #144]	; (80082cc <_printf_i+0x23c>)
 800823c:	e7e4      	b.n	8008208 <_printf_i+0x178>
 800823e:	4615      	mov	r5, r2
 8008240:	e7bd      	b.n	80081be <_printf_i+0x12e>
 8008242:	682b      	ldr	r3, [r5, #0]
 8008244:	6826      	ldr	r6, [r4, #0]
 8008246:	1d18      	adds	r0, r3, #4
 8008248:	6961      	ldr	r1, [r4, #20]
 800824a:	6028      	str	r0, [r5, #0]
 800824c:	0635      	lsls	r5, r6, #24
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	d501      	bpl.n	8008256 <_printf_i+0x1c6>
 8008252:	6019      	str	r1, [r3, #0]
 8008254:	e002      	b.n	800825c <_printf_i+0x1cc>
 8008256:	0670      	lsls	r0, r6, #25
 8008258:	d5fb      	bpl.n	8008252 <_printf_i+0x1c2>
 800825a:	8019      	strh	r1, [r3, #0]
 800825c:	2300      	movs	r3, #0
 800825e:	4615      	mov	r5, r2
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	e7bc      	b.n	80081de <_printf_i+0x14e>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	2100      	movs	r1, #0
 8008268:	1d1a      	adds	r2, r3, #4
 800826a:	602a      	str	r2, [r5, #0]
 800826c:	681d      	ldr	r5, [r3, #0]
 800826e:	6862      	ldr	r2, [r4, #4]
 8008270:	4628      	mov	r0, r5
 8008272:	f000 f8f3 	bl	800845c <memchr>
 8008276:	b108      	cbz	r0, 800827c <_printf_i+0x1ec>
 8008278:	1b40      	subs	r0, r0, r5
 800827a:	6060      	str	r0, [r4, #4]
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	2300      	movs	r3, #0
 8008282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008286:	e7aa      	b.n	80081de <_printf_i+0x14e>
 8008288:	462a      	mov	r2, r5
 800828a:	4649      	mov	r1, r9
 800828c:	4640      	mov	r0, r8
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	47d0      	blx	sl
 8008292:	3001      	adds	r0, #1
 8008294:	d0ad      	beq.n	80081f2 <_printf_i+0x162>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	079b      	lsls	r3, r3, #30
 800829a:	d413      	bmi.n	80082c4 <_printf_i+0x234>
 800829c:	68e0      	ldr	r0, [r4, #12]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	4298      	cmp	r0, r3
 80082a2:	bfb8      	it	lt
 80082a4:	4618      	movlt	r0, r3
 80082a6:	e7a6      	b.n	80081f6 <_printf_i+0x166>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4632      	mov	r2, r6
 80082ac:	4649      	mov	r1, r9
 80082ae:	4640      	mov	r0, r8
 80082b0:	47d0      	blx	sl
 80082b2:	3001      	adds	r0, #1
 80082b4:	d09d      	beq.n	80081f2 <_printf_i+0x162>
 80082b6:	3501      	adds	r5, #1
 80082b8:	68e3      	ldr	r3, [r4, #12]
 80082ba:	9903      	ldr	r1, [sp, #12]
 80082bc:	1a5b      	subs	r3, r3, r1
 80082be:	42ab      	cmp	r3, r5
 80082c0:	dcf2      	bgt.n	80082a8 <_printf_i+0x218>
 80082c2:	e7eb      	b.n	800829c <_printf_i+0x20c>
 80082c4:	2500      	movs	r5, #0
 80082c6:	f104 0619 	add.w	r6, r4, #25
 80082ca:	e7f5      	b.n	80082b8 <_printf_i+0x228>
 80082cc:	08008ffd 	.word	0x08008ffd
 80082d0:	0800900e 	.word	0x0800900e

080082d4 <__sflush_r>:
 80082d4:	898a      	ldrh	r2, [r1, #12]
 80082d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d8:	4605      	mov	r5, r0
 80082da:	0710      	lsls	r0, r2, #28
 80082dc:	460c      	mov	r4, r1
 80082de:	d457      	bmi.n	8008390 <__sflush_r+0xbc>
 80082e0:	684b      	ldr	r3, [r1, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dc04      	bgt.n	80082f0 <__sflush_r+0x1c>
 80082e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dc01      	bgt.n	80082f0 <__sflush_r+0x1c>
 80082ec:	2000      	movs	r0, #0
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f2:	2e00      	cmp	r6, #0
 80082f4:	d0fa      	beq.n	80082ec <__sflush_r+0x18>
 80082f6:	2300      	movs	r3, #0
 80082f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082fc:	682f      	ldr	r7, [r5, #0]
 80082fe:	6a21      	ldr	r1, [r4, #32]
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	d032      	beq.n	800836a <__sflush_r+0x96>
 8008304:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	075a      	lsls	r2, r3, #29
 800830a:	d505      	bpl.n	8008318 <__sflush_r+0x44>
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	1ac0      	subs	r0, r0, r3
 8008310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008312:	b10b      	cbz	r3, 8008318 <__sflush_r+0x44>
 8008314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008316:	1ac0      	subs	r0, r0, r3
 8008318:	2300      	movs	r3, #0
 800831a:	4602      	mov	r2, r0
 800831c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831e:	4628      	mov	r0, r5
 8008320:	6a21      	ldr	r1, [r4, #32]
 8008322:	47b0      	blx	r6
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	d106      	bne.n	8008338 <__sflush_r+0x64>
 800832a:	6829      	ldr	r1, [r5, #0]
 800832c:	291d      	cmp	r1, #29
 800832e:	d82b      	bhi.n	8008388 <__sflush_r+0xb4>
 8008330:	4a28      	ldr	r2, [pc, #160]	; (80083d4 <__sflush_r+0x100>)
 8008332:	410a      	asrs	r2, r1
 8008334:	07d6      	lsls	r6, r2, #31
 8008336:	d427      	bmi.n	8008388 <__sflush_r+0xb4>
 8008338:	2200      	movs	r2, #0
 800833a:	6062      	str	r2, [r4, #4]
 800833c:	6922      	ldr	r2, [r4, #16]
 800833e:	04d9      	lsls	r1, r3, #19
 8008340:	6022      	str	r2, [r4, #0]
 8008342:	d504      	bpl.n	800834e <__sflush_r+0x7a>
 8008344:	1c42      	adds	r2, r0, #1
 8008346:	d101      	bne.n	800834c <__sflush_r+0x78>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b903      	cbnz	r3, 800834e <__sflush_r+0x7a>
 800834c:	6560      	str	r0, [r4, #84]	; 0x54
 800834e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008350:	602f      	str	r7, [r5, #0]
 8008352:	2900      	cmp	r1, #0
 8008354:	d0ca      	beq.n	80082ec <__sflush_r+0x18>
 8008356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800835a:	4299      	cmp	r1, r3
 800835c:	d002      	beq.n	8008364 <__sflush_r+0x90>
 800835e:	4628      	mov	r0, r5
 8008360:	f7fe fc66 	bl	8006c30 <_free_r>
 8008364:	2000      	movs	r0, #0
 8008366:	6360      	str	r0, [r4, #52]	; 0x34
 8008368:	e7c1      	b.n	80082ee <__sflush_r+0x1a>
 800836a:	2301      	movs	r3, #1
 800836c:	4628      	mov	r0, r5
 800836e:	47b0      	blx	r6
 8008370:	1c41      	adds	r1, r0, #1
 8008372:	d1c8      	bne.n	8008306 <__sflush_r+0x32>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0c5      	beq.n	8008306 <__sflush_r+0x32>
 800837a:	2b1d      	cmp	r3, #29
 800837c:	d001      	beq.n	8008382 <__sflush_r+0xae>
 800837e:	2b16      	cmp	r3, #22
 8008380:	d101      	bne.n	8008386 <__sflush_r+0xb2>
 8008382:	602f      	str	r7, [r5, #0]
 8008384:	e7b2      	b.n	80082ec <__sflush_r+0x18>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	e7ae      	b.n	80082ee <__sflush_r+0x1a>
 8008390:	690f      	ldr	r7, [r1, #16]
 8008392:	2f00      	cmp	r7, #0
 8008394:	d0aa      	beq.n	80082ec <__sflush_r+0x18>
 8008396:	0793      	lsls	r3, r2, #30
 8008398:	bf18      	it	ne
 800839a:	2300      	movne	r3, #0
 800839c:	680e      	ldr	r6, [r1, #0]
 800839e:	bf08      	it	eq
 80083a0:	694b      	ldreq	r3, [r1, #20]
 80083a2:	1bf6      	subs	r6, r6, r7
 80083a4:	600f      	str	r7, [r1, #0]
 80083a6:	608b      	str	r3, [r1, #8]
 80083a8:	2e00      	cmp	r6, #0
 80083aa:	dd9f      	ble.n	80082ec <__sflush_r+0x18>
 80083ac:	4633      	mov	r3, r6
 80083ae:	463a      	mov	r2, r7
 80083b0:	4628      	mov	r0, r5
 80083b2:	6a21      	ldr	r1, [r4, #32]
 80083b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80083b8:	47e0      	blx	ip
 80083ba:	2800      	cmp	r0, #0
 80083bc:	dc06      	bgt.n	80083cc <__sflush_r+0xf8>
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	e790      	b.n	80082ee <__sflush_r+0x1a>
 80083cc:	4407      	add	r7, r0
 80083ce:	1a36      	subs	r6, r6, r0
 80083d0:	e7ea      	b.n	80083a8 <__sflush_r+0xd4>
 80083d2:	bf00      	nop
 80083d4:	dfbffffe 	.word	0xdfbffffe

080083d8 <_fflush_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	690b      	ldr	r3, [r1, #16]
 80083dc:	4605      	mov	r5, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	b913      	cbnz	r3, 80083e8 <_fflush_r+0x10>
 80083e2:	2500      	movs	r5, #0
 80083e4:	4628      	mov	r0, r5
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	b118      	cbz	r0, 80083f2 <_fflush_r+0x1a>
 80083ea:	6a03      	ldr	r3, [r0, #32]
 80083ec:	b90b      	cbnz	r3, 80083f2 <_fflush_r+0x1a>
 80083ee:	f7fe fad5 	bl	800699c <__sinit>
 80083f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0f3      	beq.n	80083e2 <_fflush_r+0xa>
 80083fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083fc:	07d0      	lsls	r0, r2, #31
 80083fe:	d404      	bmi.n	800840a <_fflush_r+0x32>
 8008400:	0599      	lsls	r1, r3, #22
 8008402:	d402      	bmi.n	800840a <_fflush_r+0x32>
 8008404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008406:	f7fe fbfd 	bl	8006c04 <__retarget_lock_acquire_recursive>
 800840a:	4628      	mov	r0, r5
 800840c:	4621      	mov	r1, r4
 800840e:	f7ff ff61 	bl	80082d4 <__sflush_r>
 8008412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008414:	4605      	mov	r5, r0
 8008416:	07da      	lsls	r2, r3, #31
 8008418:	d4e4      	bmi.n	80083e4 <_fflush_r+0xc>
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	059b      	lsls	r3, r3, #22
 800841e:	d4e1      	bmi.n	80083e4 <_fflush_r+0xc>
 8008420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008422:	f7fe fbf0 	bl	8006c06 <__retarget_lock_release_recursive>
 8008426:	e7dd      	b.n	80083e4 <_fflush_r+0xc>

08008428 <memmove>:
 8008428:	4288      	cmp	r0, r1
 800842a:	b510      	push	{r4, lr}
 800842c:	eb01 0402 	add.w	r4, r1, r2
 8008430:	d902      	bls.n	8008438 <memmove+0x10>
 8008432:	4284      	cmp	r4, r0
 8008434:	4623      	mov	r3, r4
 8008436:	d807      	bhi.n	8008448 <memmove+0x20>
 8008438:	1e43      	subs	r3, r0, #1
 800843a:	42a1      	cmp	r1, r4
 800843c:	d008      	beq.n	8008450 <memmove+0x28>
 800843e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008446:	e7f8      	b.n	800843a <memmove+0x12>
 8008448:	4601      	mov	r1, r0
 800844a:	4402      	add	r2, r0
 800844c:	428a      	cmp	r2, r1
 800844e:	d100      	bne.n	8008452 <memmove+0x2a>
 8008450:	bd10      	pop	{r4, pc}
 8008452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800845a:	e7f7      	b.n	800844c <memmove+0x24>

0800845c <memchr>:
 800845c:	4603      	mov	r3, r0
 800845e:	b510      	push	{r4, lr}
 8008460:	b2c9      	uxtb	r1, r1
 8008462:	4402      	add	r2, r0
 8008464:	4293      	cmp	r3, r2
 8008466:	4618      	mov	r0, r3
 8008468:	d101      	bne.n	800846e <memchr+0x12>
 800846a:	2000      	movs	r0, #0
 800846c:	e003      	b.n	8008476 <memchr+0x1a>
 800846e:	7804      	ldrb	r4, [r0, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	428c      	cmp	r4, r1
 8008474:	d1f6      	bne.n	8008464 <memchr+0x8>
 8008476:	bd10      	pop	{r4, pc}

08008478 <__assert_func>:
 8008478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800847a:	4614      	mov	r4, r2
 800847c:	461a      	mov	r2, r3
 800847e:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <__assert_func+0x2c>)
 8008480:	4605      	mov	r5, r0
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68d8      	ldr	r0, [r3, #12]
 8008486:	b14c      	cbz	r4, 800849c <__assert_func+0x24>
 8008488:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <__assert_func+0x30>)
 800848a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800848e:	9100      	str	r1, [sp, #0]
 8008490:	462b      	mov	r3, r5
 8008492:	4906      	ldr	r1, [pc, #24]	; (80084ac <__assert_func+0x34>)
 8008494:	f000 f822 	bl	80084dc <fiprintf>
 8008498:	f000 f832 	bl	8008500 <abort>
 800849c:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <__assert_func+0x38>)
 800849e:	461c      	mov	r4, r3
 80084a0:	e7f3      	b.n	800848a <__assert_func+0x12>
 80084a2:	bf00      	nop
 80084a4:	200001e0 	.word	0x200001e0
 80084a8:	0800901f 	.word	0x0800901f
 80084ac:	0800902c 	.word	0x0800902c
 80084b0:	0800905a 	.word	0x0800905a

080084b4 <_calloc_r>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	fba1 5402 	umull	r5, r4, r1, r2
 80084ba:	b934      	cbnz	r4, 80084ca <_calloc_r+0x16>
 80084bc:	4629      	mov	r1, r5
 80084be:	f7fd fb0f 	bl	8005ae0 <_malloc_r>
 80084c2:	4606      	mov	r6, r0
 80084c4:	b928      	cbnz	r0, 80084d2 <_calloc_r+0x1e>
 80084c6:	4630      	mov	r0, r6
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
 80084ca:	220c      	movs	r2, #12
 80084cc:	2600      	movs	r6, #0
 80084ce:	6002      	str	r2, [r0, #0]
 80084d0:	e7f9      	b.n	80084c6 <_calloc_r+0x12>
 80084d2:	462a      	mov	r2, r5
 80084d4:	4621      	mov	r1, r4
 80084d6:	f7fe fafa 	bl	8006ace <memset>
 80084da:	e7f4      	b.n	80084c6 <_calloc_r+0x12>

080084dc <fiprintf>:
 80084dc:	b40e      	push	{r1, r2, r3}
 80084de:	b503      	push	{r0, r1, lr}
 80084e0:	4601      	mov	r1, r0
 80084e2:	ab03      	add	r3, sp, #12
 80084e4:	4805      	ldr	r0, [pc, #20]	; (80084fc <fiprintf+0x20>)
 80084e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ea:	6800      	ldr	r0, [r0, #0]
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	f000 f835 	bl	800855c <_vfiprintf_r>
 80084f2:	b002      	add	sp, #8
 80084f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084f8:	b003      	add	sp, #12
 80084fa:	4770      	bx	lr
 80084fc:	200001e0 	.word	0x200001e0

08008500 <abort>:
 8008500:	2006      	movs	r0, #6
 8008502:	b508      	push	{r3, lr}
 8008504:	f000 fa02 	bl	800890c <raise>
 8008508:	2001      	movs	r0, #1
 800850a:	f7fa f86a 	bl	80025e2 <_exit>

0800850e <__sfputc_r>:
 800850e:	6893      	ldr	r3, [r2, #8]
 8008510:	b410      	push	{r4}
 8008512:	3b01      	subs	r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	6093      	str	r3, [r2, #8]
 8008518:	da07      	bge.n	800852a <__sfputc_r+0x1c>
 800851a:	6994      	ldr	r4, [r2, #24]
 800851c:	42a3      	cmp	r3, r4
 800851e:	db01      	blt.n	8008524 <__sfputc_r+0x16>
 8008520:	290a      	cmp	r1, #10
 8008522:	d102      	bne.n	800852a <__sfputc_r+0x1c>
 8008524:	bc10      	pop	{r4}
 8008526:	f000 b933 	b.w	8008790 <__swbuf_r>
 800852a:	6813      	ldr	r3, [r2, #0]
 800852c:	1c58      	adds	r0, r3, #1
 800852e:	6010      	str	r0, [r2, #0]
 8008530:	7019      	strb	r1, [r3, #0]
 8008532:	4608      	mov	r0, r1
 8008534:	bc10      	pop	{r4}
 8008536:	4770      	bx	lr

08008538 <__sfputs_r>:
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	4606      	mov	r6, r0
 800853c:	460f      	mov	r7, r1
 800853e:	4614      	mov	r4, r2
 8008540:	18d5      	adds	r5, r2, r3
 8008542:	42ac      	cmp	r4, r5
 8008544:	d101      	bne.n	800854a <__sfputs_r+0x12>
 8008546:	2000      	movs	r0, #0
 8008548:	e007      	b.n	800855a <__sfputs_r+0x22>
 800854a:	463a      	mov	r2, r7
 800854c:	4630      	mov	r0, r6
 800854e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008552:	f7ff ffdc 	bl	800850e <__sfputc_r>
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	d1f3      	bne.n	8008542 <__sfputs_r+0xa>
 800855a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800855c <_vfiprintf_r>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	460d      	mov	r5, r1
 8008562:	4614      	mov	r4, r2
 8008564:	4698      	mov	r8, r3
 8008566:	4606      	mov	r6, r0
 8008568:	b09d      	sub	sp, #116	; 0x74
 800856a:	b118      	cbz	r0, 8008574 <_vfiprintf_r+0x18>
 800856c:	6a03      	ldr	r3, [r0, #32]
 800856e:	b90b      	cbnz	r3, 8008574 <_vfiprintf_r+0x18>
 8008570:	f7fe fa14 	bl	800699c <__sinit>
 8008574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008576:	07d9      	lsls	r1, r3, #31
 8008578:	d405      	bmi.n	8008586 <_vfiprintf_r+0x2a>
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	059a      	lsls	r2, r3, #22
 800857e:	d402      	bmi.n	8008586 <_vfiprintf_r+0x2a>
 8008580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008582:	f7fe fb3f 	bl	8006c04 <__retarget_lock_acquire_recursive>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	071b      	lsls	r3, r3, #28
 800858a:	d501      	bpl.n	8008590 <_vfiprintf_r+0x34>
 800858c:	692b      	ldr	r3, [r5, #16]
 800858e:	b99b      	cbnz	r3, 80085b8 <_vfiprintf_r+0x5c>
 8008590:	4629      	mov	r1, r5
 8008592:	4630      	mov	r0, r6
 8008594:	f000 f93a 	bl	800880c <__swsetup_r>
 8008598:	b170      	cbz	r0, 80085b8 <_vfiprintf_r+0x5c>
 800859a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800859c:	07dc      	lsls	r4, r3, #31
 800859e:	d504      	bpl.n	80085aa <_vfiprintf_r+0x4e>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b01d      	add	sp, #116	; 0x74
 80085a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085aa:	89ab      	ldrh	r3, [r5, #12]
 80085ac:	0598      	lsls	r0, r3, #22
 80085ae:	d4f7      	bmi.n	80085a0 <_vfiprintf_r+0x44>
 80085b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b2:	f7fe fb28 	bl	8006c06 <__retarget_lock_release_recursive>
 80085b6:	e7f3      	b.n	80085a0 <_vfiprintf_r+0x44>
 80085b8:	2300      	movs	r3, #0
 80085ba:	9309      	str	r3, [sp, #36]	; 0x24
 80085bc:	2320      	movs	r3, #32
 80085be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085c2:	2330      	movs	r3, #48	; 0x30
 80085c4:	f04f 0901 	mov.w	r9, #1
 80085c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80085cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800877c <_vfiprintf_r+0x220>
 80085d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085d4:	4623      	mov	r3, r4
 80085d6:	469a      	mov	sl, r3
 80085d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085dc:	b10a      	cbz	r2, 80085e2 <_vfiprintf_r+0x86>
 80085de:	2a25      	cmp	r2, #37	; 0x25
 80085e0:	d1f9      	bne.n	80085d6 <_vfiprintf_r+0x7a>
 80085e2:	ebba 0b04 	subs.w	fp, sl, r4
 80085e6:	d00b      	beq.n	8008600 <_vfiprintf_r+0xa4>
 80085e8:	465b      	mov	r3, fp
 80085ea:	4622      	mov	r2, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	4630      	mov	r0, r6
 80085f0:	f7ff ffa2 	bl	8008538 <__sfputs_r>
 80085f4:	3001      	adds	r0, #1
 80085f6:	f000 80a9 	beq.w	800874c <_vfiprintf_r+0x1f0>
 80085fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085fc:	445a      	add	r2, fp
 80085fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008600:	f89a 3000 	ldrb.w	r3, [sl]
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 80a1 	beq.w	800874c <_vfiprintf_r+0x1f0>
 800860a:	2300      	movs	r3, #0
 800860c:	f04f 32ff 	mov.w	r2, #4294967295
 8008610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008614:	f10a 0a01 	add.w	sl, sl, #1
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	9307      	str	r3, [sp, #28]
 800861c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008620:	931a      	str	r3, [sp, #104]	; 0x68
 8008622:	4654      	mov	r4, sl
 8008624:	2205      	movs	r2, #5
 8008626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862a:	4854      	ldr	r0, [pc, #336]	; (800877c <_vfiprintf_r+0x220>)
 800862c:	f7ff ff16 	bl	800845c <memchr>
 8008630:	9a04      	ldr	r2, [sp, #16]
 8008632:	b9d8      	cbnz	r0, 800866c <_vfiprintf_r+0x110>
 8008634:	06d1      	lsls	r1, r2, #27
 8008636:	bf44      	itt	mi
 8008638:	2320      	movmi	r3, #32
 800863a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800863e:	0713      	lsls	r3, r2, #28
 8008640:	bf44      	itt	mi
 8008642:	232b      	movmi	r3, #43	; 0x2b
 8008644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008648:	f89a 3000 	ldrb.w	r3, [sl]
 800864c:	2b2a      	cmp	r3, #42	; 0x2a
 800864e:	d015      	beq.n	800867c <_vfiprintf_r+0x120>
 8008650:	4654      	mov	r4, sl
 8008652:	2000      	movs	r0, #0
 8008654:	f04f 0c0a 	mov.w	ip, #10
 8008658:	9a07      	ldr	r2, [sp, #28]
 800865a:	4621      	mov	r1, r4
 800865c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008660:	3b30      	subs	r3, #48	; 0x30
 8008662:	2b09      	cmp	r3, #9
 8008664:	d94d      	bls.n	8008702 <_vfiprintf_r+0x1a6>
 8008666:	b1b0      	cbz	r0, 8008696 <_vfiprintf_r+0x13a>
 8008668:	9207      	str	r2, [sp, #28]
 800866a:	e014      	b.n	8008696 <_vfiprintf_r+0x13a>
 800866c:	eba0 0308 	sub.w	r3, r0, r8
 8008670:	fa09 f303 	lsl.w	r3, r9, r3
 8008674:	4313      	orrs	r3, r2
 8008676:	46a2      	mov	sl, r4
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	e7d2      	b.n	8008622 <_vfiprintf_r+0xc6>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	1d19      	adds	r1, r3, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	9103      	str	r1, [sp, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	bfbb      	ittet	lt
 8008688:	425b      	neglt	r3, r3
 800868a:	f042 0202 	orrlt.w	r2, r2, #2
 800868e:	9307      	strge	r3, [sp, #28]
 8008690:	9307      	strlt	r3, [sp, #28]
 8008692:	bfb8      	it	lt
 8008694:	9204      	strlt	r2, [sp, #16]
 8008696:	7823      	ldrb	r3, [r4, #0]
 8008698:	2b2e      	cmp	r3, #46	; 0x2e
 800869a:	d10c      	bne.n	80086b6 <_vfiprintf_r+0x15a>
 800869c:	7863      	ldrb	r3, [r4, #1]
 800869e:	2b2a      	cmp	r3, #42	; 0x2a
 80086a0:	d134      	bne.n	800870c <_vfiprintf_r+0x1b0>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	3402      	adds	r4, #2
 80086a6:	1d1a      	adds	r2, r3, #4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	9203      	str	r2, [sp, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bfb8      	it	lt
 80086b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80086b4:	9305      	str	r3, [sp, #20]
 80086b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008780 <_vfiprintf_r+0x224>
 80086ba:	2203      	movs	r2, #3
 80086bc:	4650      	mov	r0, sl
 80086be:	7821      	ldrb	r1, [r4, #0]
 80086c0:	f7ff fecc 	bl	800845c <memchr>
 80086c4:	b138      	cbz	r0, 80086d6 <_vfiprintf_r+0x17a>
 80086c6:	2240      	movs	r2, #64	; 0x40
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	eba0 000a 	sub.w	r0, r0, sl
 80086ce:	4082      	lsls	r2, r0
 80086d0:	4313      	orrs	r3, r2
 80086d2:	3401      	adds	r4, #1
 80086d4:	9304      	str	r3, [sp, #16]
 80086d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086da:	2206      	movs	r2, #6
 80086dc:	4829      	ldr	r0, [pc, #164]	; (8008784 <_vfiprintf_r+0x228>)
 80086de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086e2:	f7ff febb 	bl	800845c <memchr>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d03f      	beq.n	800876a <_vfiprintf_r+0x20e>
 80086ea:	4b27      	ldr	r3, [pc, #156]	; (8008788 <_vfiprintf_r+0x22c>)
 80086ec:	bb1b      	cbnz	r3, 8008736 <_vfiprintf_r+0x1da>
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	3307      	adds	r3, #7
 80086f2:	f023 0307 	bic.w	r3, r3, #7
 80086f6:	3308      	adds	r3, #8
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	443b      	add	r3, r7
 80086fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008700:	e768      	b.n	80085d4 <_vfiprintf_r+0x78>
 8008702:	460c      	mov	r4, r1
 8008704:	2001      	movs	r0, #1
 8008706:	fb0c 3202 	mla	r2, ip, r2, r3
 800870a:	e7a6      	b.n	800865a <_vfiprintf_r+0xfe>
 800870c:	2300      	movs	r3, #0
 800870e:	f04f 0c0a 	mov.w	ip, #10
 8008712:	4619      	mov	r1, r3
 8008714:	3401      	adds	r4, #1
 8008716:	9305      	str	r3, [sp, #20]
 8008718:	4620      	mov	r0, r4
 800871a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871e:	3a30      	subs	r2, #48	; 0x30
 8008720:	2a09      	cmp	r2, #9
 8008722:	d903      	bls.n	800872c <_vfiprintf_r+0x1d0>
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0c6      	beq.n	80086b6 <_vfiprintf_r+0x15a>
 8008728:	9105      	str	r1, [sp, #20]
 800872a:	e7c4      	b.n	80086b6 <_vfiprintf_r+0x15a>
 800872c:	4604      	mov	r4, r0
 800872e:	2301      	movs	r3, #1
 8008730:	fb0c 2101 	mla	r1, ip, r1, r2
 8008734:	e7f0      	b.n	8008718 <_vfiprintf_r+0x1bc>
 8008736:	ab03      	add	r3, sp, #12
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	462a      	mov	r2, r5
 800873c:	4630      	mov	r0, r6
 800873e:	4b13      	ldr	r3, [pc, #76]	; (800878c <_vfiprintf_r+0x230>)
 8008740:	a904      	add	r1, sp, #16
 8008742:	f3af 8000 	nop.w
 8008746:	4607      	mov	r7, r0
 8008748:	1c78      	adds	r0, r7, #1
 800874a:	d1d6      	bne.n	80086fa <_vfiprintf_r+0x19e>
 800874c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800874e:	07d9      	lsls	r1, r3, #31
 8008750:	d405      	bmi.n	800875e <_vfiprintf_r+0x202>
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	059a      	lsls	r2, r3, #22
 8008756:	d402      	bmi.n	800875e <_vfiprintf_r+0x202>
 8008758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800875a:	f7fe fa54 	bl	8006c06 <__retarget_lock_release_recursive>
 800875e:	89ab      	ldrh	r3, [r5, #12]
 8008760:	065b      	lsls	r3, r3, #25
 8008762:	f53f af1d 	bmi.w	80085a0 <_vfiprintf_r+0x44>
 8008766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008768:	e71c      	b.n	80085a4 <_vfiprintf_r+0x48>
 800876a:	ab03      	add	r3, sp, #12
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	462a      	mov	r2, r5
 8008770:	4630      	mov	r0, r6
 8008772:	4b06      	ldr	r3, [pc, #24]	; (800878c <_vfiprintf_r+0x230>)
 8008774:	a904      	add	r1, sp, #16
 8008776:	f7ff fc8b 	bl	8008090 <_printf_i>
 800877a:	e7e4      	b.n	8008746 <_vfiprintf_r+0x1ea>
 800877c:	08008fec 	.word	0x08008fec
 8008780:	08008ff2 	.word	0x08008ff2
 8008784:	08008ff6 	.word	0x08008ff6
 8008788:	00000000 	.word	0x00000000
 800878c:	08008539 	.word	0x08008539

08008790 <__swbuf_r>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	460e      	mov	r6, r1
 8008794:	4614      	mov	r4, r2
 8008796:	4605      	mov	r5, r0
 8008798:	b118      	cbz	r0, 80087a2 <__swbuf_r+0x12>
 800879a:	6a03      	ldr	r3, [r0, #32]
 800879c:	b90b      	cbnz	r3, 80087a2 <__swbuf_r+0x12>
 800879e:	f7fe f8fd 	bl	800699c <__sinit>
 80087a2:	69a3      	ldr	r3, [r4, #24]
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	071a      	lsls	r2, r3, #28
 80087aa:	d525      	bpl.n	80087f8 <__swbuf_r+0x68>
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	b31b      	cbz	r3, 80087f8 <__swbuf_r+0x68>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	6922      	ldr	r2, [r4, #16]
 80087b4:	b2f6      	uxtb	r6, r6
 80087b6:	1a98      	subs	r0, r3, r2
 80087b8:	6963      	ldr	r3, [r4, #20]
 80087ba:	4637      	mov	r7, r6
 80087bc:	4283      	cmp	r3, r0
 80087be:	dc04      	bgt.n	80087ca <__swbuf_r+0x3a>
 80087c0:	4621      	mov	r1, r4
 80087c2:	4628      	mov	r0, r5
 80087c4:	f7ff fe08 	bl	80083d8 <_fflush_r>
 80087c8:	b9e0      	cbnz	r0, 8008804 <__swbuf_r+0x74>
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	60a3      	str	r3, [r4, #8]
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	6022      	str	r2, [r4, #0]
 80087d6:	701e      	strb	r6, [r3, #0]
 80087d8:	6962      	ldr	r2, [r4, #20]
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	429a      	cmp	r2, r3
 80087de:	d004      	beq.n	80087ea <__swbuf_r+0x5a>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	07db      	lsls	r3, r3, #31
 80087e4:	d506      	bpl.n	80087f4 <__swbuf_r+0x64>
 80087e6:	2e0a      	cmp	r6, #10
 80087e8:	d104      	bne.n	80087f4 <__swbuf_r+0x64>
 80087ea:	4621      	mov	r1, r4
 80087ec:	4628      	mov	r0, r5
 80087ee:	f7ff fdf3 	bl	80083d8 <_fflush_r>
 80087f2:	b938      	cbnz	r0, 8008804 <__swbuf_r+0x74>
 80087f4:	4638      	mov	r0, r7
 80087f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f8:	4621      	mov	r1, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f806 	bl	800880c <__swsetup_r>
 8008800:	2800      	cmp	r0, #0
 8008802:	d0d5      	beq.n	80087b0 <__swbuf_r+0x20>
 8008804:	f04f 37ff 	mov.w	r7, #4294967295
 8008808:	e7f4      	b.n	80087f4 <__swbuf_r+0x64>
	...

0800880c <__swsetup_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4b2a      	ldr	r3, [pc, #168]	; (80088b8 <__swsetup_r+0xac>)
 8008810:	4605      	mov	r5, r0
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	460c      	mov	r4, r1
 8008816:	b118      	cbz	r0, 8008820 <__swsetup_r+0x14>
 8008818:	6a03      	ldr	r3, [r0, #32]
 800881a:	b90b      	cbnz	r3, 8008820 <__swsetup_r+0x14>
 800881c:	f7fe f8be 	bl	800699c <__sinit>
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008826:	0718      	lsls	r0, r3, #28
 8008828:	d422      	bmi.n	8008870 <__swsetup_r+0x64>
 800882a:	06d9      	lsls	r1, r3, #27
 800882c:	d407      	bmi.n	800883e <__swsetup_r+0x32>
 800882e:	2309      	movs	r3, #9
 8008830:	602b      	str	r3, [r5, #0]
 8008832:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	e034      	b.n	80088a8 <__swsetup_r+0x9c>
 800883e:	0758      	lsls	r0, r3, #29
 8008840:	d512      	bpl.n	8008868 <__swsetup_r+0x5c>
 8008842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008844:	b141      	cbz	r1, 8008858 <__swsetup_r+0x4c>
 8008846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800884a:	4299      	cmp	r1, r3
 800884c:	d002      	beq.n	8008854 <__swsetup_r+0x48>
 800884e:	4628      	mov	r0, r5
 8008850:	f7fe f9ee 	bl	8006c30 <_free_r>
 8008854:	2300      	movs	r3, #0
 8008856:	6363      	str	r3, [r4, #52]	; 0x34
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800885e:	81a3      	strh	r3, [r4, #12]
 8008860:	2300      	movs	r3, #0
 8008862:	6063      	str	r3, [r4, #4]
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	f043 0308 	orr.w	r3, r3, #8
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	b94b      	cbnz	r3, 8008888 <__swsetup_r+0x7c>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800887a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800887e:	d003      	beq.n	8008888 <__swsetup_r+0x7c>
 8008880:	4621      	mov	r1, r4
 8008882:	4628      	mov	r0, r5
 8008884:	f000 f883 	bl	800898e <__smakebuf_r>
 8008888:	89a0      	ldrh	r0, [r4, #12]
 800888a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800888e:	f010 0301 	ands.w	r3, r0, #1
 8008892:	d00a      	beq.n	80088aa <__swsetup_r+0x9e>
 8008894:	2300      	movs	r3, #0
 8008896:	60a3      	str	r3, [r4, #8]
 8008898:	6963      	ldr	r3, [r4, #20]
 800889a:	425b      	negs	r3, r3
 800889c:	61a3      	str	r3, [r4, #24]
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	b943      	cbnz	r3, 80088b4 <__swsetup_r+0xa8>
 80088a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088a6:	d1c4      	bne.n	8008832 <__swsetup_r+0x26>
 80088a8:	bd38      	pop	{r3, r4, r5, pc}
 80088aa:	0781      	lsls	r1, r0, #30
 80088ac:	bf58      	it	pl
 80088ae:	6963      	ldrpl	r3, [r4, #20]
 80088b0:	60a3      	str	r3, [r4, #8]
 80088b2:	e7f4      	b.n	800889e <__swsetup_r+0x92>
 80088b4:	2000      	movs	r0, #0
 80088b6:	e7f7      	b.n	80088a8 <__swsetup_r+0x9c>
 80088b8:	200001e0 	.word	0x200001e0

080088bc <_raise_r>:
 80088bc:	291f      	cmp	r1, #31
 80088be:	b538      	push	{r3, r4, r5, lr}
 80088c0:	4604      	mov	r4, r0
 80088c2:	460d      	mov	r5, r1
 80088c4:	d904      	bls.n	80088d0 <_raise_r+0x14>
 80088c6:	2316      	movs	r3, #22
 80088c8:	6003      	str	r3, [r0, #0]
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80088d2:	b112      	cbz	r2, 80088da <_raise_r+0x1e>
 80088d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088d8:	b94b      	cbnz	r3, 80088ee <_raise_r+0x32>
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 f830 	bl	8008940 <_getpid_r>
 80088e0:	462a      	mov	r2, r5
 80088e2:	4601      	mov	r1, r0
 80088e4:	4620      	mov	r0, r4
 80088e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ea:	f000 b817 	b.w	800891c <_kill_r>
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d00a      	beq.n	8008908 <_raise_r+0x4c>
 80088f2:	1c59      	adds	r1, r3, #1
 80088f4:	d103      	bne.n	80088fe <_raise_r+0x42>
 80088f6:	2316      	movs	r3, #22
 80088f8:	6003      	str	r3, [r0, #0]
 80088fa:	2001      	movs	r0, #1
 80088fc:	e7e7      	b.n	80088ce <_raise_r+0x12>
 80088fe:	2400      	movs	r4, #0
 8008900:	4628      	mov	r0, r5
 8008902:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008906:	4798      	blx	r3
 8008908:	2000      	movs	r0, #0
 800890a:	e7e0      	b.n	80088ce <_raise_r+0x12>

0800890c <raise>:
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <raise+0xc>)
 800890e:	4601      	mov	r1, r0
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	f7ff bfd3 	b.w	80088bc <_raise_r>
 8008916:	bf00      	nop
 8008918:	200001e0 	.word	0x200001e0

0800891c <_kill_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	2300      	movs	r3, #0
 8008920:	4d06      	ldr	r5, [pc, #24]	; (800893c <_kill_r+0x20>)
 8008922:	4604      	mov	r4, r0
 8008924:	4608      	mov	r0, r1
 8008926:	4611      	mov	r1, r2
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	f7f9 fe4a 	bl	80025c2 <_kill>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d102      	bne.n	8008938 <_kill_r+0x1c>
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	b103      	cbz	r3, 8008938 <_kill_r+0x1c>
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	bf00      	nop
 800893c:	20001388 	.word	0x20001388

08008940 <_getpid_r>:
 8008940:	f7f9 be38 	b.w	80025b4 <_getpid>

08008944 <__swhatbuf_r>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	460c      	mov	r4, r1
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	4615      	mov	r5, r2
 800894e:	2900      	cmp	r1, #0
 8008950:	461e      	mov	r6, r3
 8008952:	b096      	sub	sp, #88	; 0x58
 8008954:	da0c      	bge.n	8008970 <__swhatbuf_r+0x2c>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	2100      	movs	r1, #0
 800895a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800895e:	bf0c      	ite	eq
 8008960:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008964:	2340      	movne	r3, #64	; 0x40
 8008966:	2000      	movs	r0, #0
 8008968:	6031      	str	r1, [r6, #0]
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	b016      	add	sp, #88	; 0x58
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	466a      	mov	r2, sp
 8008972:	f000 f849 	bl	8008a08 <_fstat_r>
 8008976:	2800      	cmp	r0, #0
 8008978:	dbed      	blt.n	8008956 <__swhatbuf_r+0x12>
 800897a:	9901      	ldr	r1, [sp, #4]
 800897c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008980:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008984:	4259      	negs	r1, r3
 8008986:	4159      	adcs	r1, r3
 8008988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800898c:	e7eb      	b.n	8008966 <__swhatbuf_r+0x22>

0800898e <__smakebuf_r>:
 800898e:	898b      	ldrh	r3, [r1, #12]
 8008990:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008992:	079d      	lsls	r5, r3, #30
 8008994:	4606      	mov	r6, r0
 8008996:	460c      	mov	r4, r1
 8008998:	d507      	bpl.n	80089aa <__smakebuf_r+0x1c>
 800899a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	2301      	movs	r3, #1
 80089a4:	6163      	str	r3, [r4, #20]
 80089a6:	b002      	add	sp, #8
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
 80089aa:	466a      	mov	r2, sp
 80089ac:	ab01      	add	r3, sp, #4
 80089ae:	f7ff ffc9 	bl	8008944 <__swhatbuf_r>
 80089b2:	9900      	ldr	r1, [sp, #0]
 80089b4:	4605      	mov	r5, r0
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7fd f892 	bl	8005ae0 <_malloc_r>
 80089bc:	b948      	cbnz	r0, 80089d2 <__smakebuf_r+0x44>
 80089be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c2:	059a      	lsls	r2, r3, #22
 80089c4:	d4ef      	bmi.n	80089a6 <__smakebuf_r+0x18>
 80089c6:	f023 0303 	bic.w	r3, r3, #3
 80089ca:	f043 0302 	orr.w	r3, r3, #2
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	e7e3      	b.n	800899a <__smakebuf_r+0xc>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	6020      	str	r0, [r4, #0]
 80089d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	9b00      	ldr	r3, [sp, #0]
 80089de:	6120      	str	r0, [r4, #16]
 80089e0:	6163      	str	r3, [r4, #20]
 80089e2:	9b01      	ldr	r3, [sp, #4]
 80089e4:	b15b      	cbz	r3, 80089fe <__smakebuf_r+0x70>
 80089e6:	4630      	mov	r0, r6
 80089e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ec:	f000 f81e 	bl	8008a2c <_isatty_r>
 80089f0:	b128      	cbz	r0, 80089fe <__smakebuf_r+0x70>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f023 0303 	bic.w	r3, r3, #3
 80089f8:	f043 0301 	orr.w	r3, r3, #1
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	431d      	orrs	r5, r3
 8008a02:	81a5      	strh	r5, [r4, #12]
 8008a04:	e7cf      	b.n	80089a6 <__smakebuf_r+0x18>
	...

08008a08 <_fstat_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4d06      	ldr	r5, [pc, #24]	; (8008a28 <_fstat_r+0x20>)
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	f7f9 fe32 	bl	800267e <_fstat>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d102      	bne.n	8008a24 <_fstat_r+0x1c>
 8008a1e:	682b      	ldr	r3, [r5, #0]
 8008a20:	b103      	cbz	r3, 8008a24 <_fstat_r+0x1c>
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	20001388 	.word	0x20001388

08008a2c <_isatty_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4d05      	ldr	r5, [pc, #20]	; (8008a48 <_isatty_r+0x1c>)
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	f7f9 fe30 	bl	800269c <_isatty>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_isatty_r+0x1a>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_isatty_r+0x1a>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	20001388 	.word	0x20001388

08008a4c <_init>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	bf00      	nop
 8008a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a52:	bc08      	pop	{r3}
 8008a54:	469e      	mov	lr, r3
 8008a56:	4770      	bx	lr

08008a58 <_fini>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	bf00      	nop
 8008a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5e:	bc08      	pop	{r3}
 8008a60:	469e      	mov	lr, r3
 8008a62:	4770      	bx	lr
